/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Migration;
import org.openapitools.client.model.MigrationsMapCommitAuthorRequest;
import org.openapitools.client.model.MigrationsSetLfsPreferenceRequest;
import org.openapitools.client.model.MigrationsStartForAuthenticatedUserRequest;
import org.openapitools.client.model.MigrationsStartForOrgRequest;
import org.openapitools.client.model.MigrationsStartImportRequest;
import org.openapitools.client.model.MigrationsUpdateImportRequest;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.ModelImport;
import org.openapitools.client.model.PorterAuthor;
import org.openapitools.client.model.PorterLargeFile;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MigrationsApi
 */
@Disabled
public class MigrationsApiTest {

    private final MigrationsApi api = new MigrationsApi();

    /**
     * Cancel an import
     *
     * Stop an import for a repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsCancelImportTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.migrationsCancelImport(owner, repo);
        // TODO: test validations
    }

    /**
     * Delete a user migration archive
     *
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsDeleteArchiveForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        api.migrationsDeleteArchiveForAuthenticatedUser(migrationId);
        // TODO: test validations
    }

    /**
     * Delete an organization migration archive
     *
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsDeleteArchiveForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        api.migrationsDeleteArchiveForOrg(org, migrationId);
        // TODO: test validations
    }

    /**
     * Download an organization migration archive
     *
     * Fetches the URL to a migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsDownloadArchiveForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        api.migrationsDownloadArchiveForOrg(org, migrationId);
        // TODO: test validations
    }

    /**
     * Download a user migration archive
     *
     * Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetArchiveForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        api.migrationsGetArchiveForAuthenticatedUser(migrationId);
        // TODO: test validations
    }

    /**
     * Get commit authors
     *
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username &#x60;hubot&#x60; into something like &#x60;hubot &lt;hubot@12341234-abab-fefe-8787-fedcba987654&gt;&#x60;.  This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetCommitAuthorsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer since = null;
        List<PorterAuthor> response = api.migrationsGetCommitAuthors(owner, repo, since);
        // TODO: test validations
    }

    /**
     * Get an import status
     *
     * View the progress of an import.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.  **Import status**  This section includes details about the possible values of the &#x60;status&#x60; field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   &#x60;detecting&#x60; - the \&quot;detection\&quot; step of the import is in progress because the request did not include a &#x60;vcs&#x60; parameter. The import is identifying the type of source control present at the URL. *   &#x60;importing&#x60; - the \&quot;raw\&quot; step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include &#x60;commit_count&#x60; (the total number of raw commits that will be imported) and &#x60;percent&#x60; (0 - 100, the current progress through the import). *   &#x60;mapping&#x60; - the \&quot;rewrite\&quot; step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   &#x60;pushing&#x60; - the \&quot;push\&quot; step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include &#x60;push_percent&#x60;, which is the percent value reported by &#x60;git push&#x60; when it is \&quot;Writing objects\&quot;. *   &#x60;complete&#x60; - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the &#x60;status&#x60; field:  *   &#x60;auth_failed&#x60; - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;error&#x60; - the import encountered an error. The import progress response will include the &#x60;failed_step&#x60; and an error message. Contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api) for more information. *   &#x60;detection_needs_auth&#x60; - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;detection_found_nothing&#x60; - the importer didn&#39;t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   &#x60;detection_found_multiple&#x60; - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a &#x60;project_choices&#x60; field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a &#x60;project_choices&#x60; field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   &#x60;use_lfs&#x60; - describes whether the import has been opted in or out of using Git LFS. The value can be &#x60;opt_in&#x60;, &#x60;opt_out&#x60;, or &#x60;undecided&#x60; if no action has been taken. *   &#x60;has_large_files&#x60; - the boolean value describing whether files larger than 100MB were found during the &#x60;importing&#x60; step. *   &#x60;large_files_size&#x60; - the total size in gigabytes of files larger than 100MB found in the originating repository. *   &#x60;large_files_count&#x60; - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \&quot;Get Large Files\&quot; request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetImportStatusTest() throws ApiException {
        String owner = null;
        String repo = null;
        ModelImport response = api.migrationsGetImportStatus(owner, repo);
        // TODO: test validations
    }

    /**
     * Get large files
     *
     * List files larger than 100MB found during the import  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetLargeFilesTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<PorterLargeFile> response = api.migrationsGetLargeFiles(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a user migration status
     *
     * Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:  *   &#x60;pending&#x60; - the migration hasn&#39;t started yet. *   &#x60;exporting&#x60; - the migration is in progress. *   &#x60;exported&#x60; - the migration finished successfully. *   &#x60;failed&#x60; - the migration failed.  Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetStatusForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        List<String> exclude = null;
        Migration response = api.migrationsGetStatusForAuthenticatedUser(migrationId, exclude);
        // TODO: test validations
    }

    /**
     * Get an organization migration status
     *
     * Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetStatusForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        List<String> exclude = null;
        Migration response = api.migrationsGetStatusForOrg(org, migrationId, exclude);
        // TODO: test validations
    }

    /**
     * List user migrations
     *
     * Lists all migrations a user has started.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListForAuthenticatedUserTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<Migration> response = api.migrationsListForAuthenticatedUser(perPage, page);
        // TODO: test validations
    }

    /**
     * List organization migrations
     *
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of &#x60;repositories&#x60; is only returned for export migrations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<String> exclude = null;
        List<Migration> response = api.migrationsListForOrg(org, perPage, page, exclude);
        // TODO: test validations
    }

    /**
     * List repositories for a user migration
     *
     * Lists all the repositories for this user migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListReposForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.migrationsListReposForAuthenticatedUser(migrationId, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories in an organization migration
     *
     * List all the repositories for this organization migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListReposForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.migrationsListReposForOrg(org, migrationId, perPage, page);
        // TODO: test validations
    }

    /**
     * Map a commit author
     *
     * Update an author&#39;s identity for the import. Your application can continue updating authors any time before you push new commits to the repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsMapCommitAuthorTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer authorId = null;
        MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest = null;
        PorterAuthor response = api.migrationsMapCommitAuthor(owner, repo, authorId, migrationsMapCommitAuthorRequest);
        // TODO: test validations
    }

    /**
     * Update Git LFS preference
     *
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com).  You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsSetLfsPreferenceTest() throws ApiException {
        String owner = null;
        String repo = null;
        MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest = null;
        ModelImport response = api.migrationsSetLfsPreference(owner, repo, migrationsSetLfsPreferenceRequest);
        // TODO: test validations
    }

    /**
     * Start a user migration
     *
     * Initiates the generation of a user migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsStartForAuthenticatedUserTest() throws ApiException {
        MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest = null;
        Migration response = api.migrationsStartForAuthenticatedUser(migrationsStartForAuthenticatedUserRequest);
        // TODO: test validations
    }

    /**
     * Start an organization migration
     *
     * Initiates the generation of a migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsStartForOrgTest() throws ApiException {
        String org = null;
        MigrationsStartForOrgRequest migrationsStartForOrgRequest = null;
        Migration response = api.migrationsStartForOrg(org, migrationsStartForOrgRequest);
        // TODO: test validations
    }

    /**
     * Start an import
     *
     * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status &#x60;422 Unprocessable Entity&#x60; response. **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsStartImportTest() throws ApiException {
        String owner = null;
        String repo = null;
        MigrationsStartImportRequest migrationsStartImportRequest = null;
        ModelImport response = api.migrationsStartImport(owner, repo, migrationsStartImportRequest);
        // TODO: test validations
    }

    /**
     * Unlock a user repository
     *
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsUnlockRepoForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        String repoName = null;
        api.migrationsUnlockRepoForAuthenticatedUser(migrationId, repoName);
        // TODO: test validations
    }

    /**
     * Unlock an organization repository
     *
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsUnlockRepoForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        String repoName = null;
        api.migrationsUnlockRepoForOrg(org, migrationId, repoName);
        // TODO: test validations
    }

    /**
     * Update an import
     *
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status &#x60;detection_found_multiple&#x60; and the Import Progress response will include a &#x60;project_choices&#x60; array. You can select the project to import by providing one of the objects in the &#x60;project_choices&#x60; array in the update request.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsUpdateImportTest() throws ApiException {
        String owner = null;
        String repo = null;
        MigrationsUpdateImportRequest migrationsUpdateImportRequest = null;
        ModelImport response = api.migrationsUpdateImport(owner, repo, migrationsUpdateImportRequest);
        // TODO: test validations
    }

}
