/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;
import org.openapitools.client.model.ActionsCacheList;
import org.openapitools.client.model.ActionsCacheUsageByRepository;
import org.openapitools.client.model.ActionsCacheUsageOrgEnterprise;
import org.openapitools.client.model.ActionsCreateOrUpdateEnvironmentSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateOrgSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateRepoSecretRequest;
import org.openapitools.client.model.ActionsCreateOrgVariableRequest;
import org.openapitools.client.model.ActionsCreateRepoVariableRequest;
import org.openapitools.client.model.ActionsCreateRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsCreateWorkflowDispatchRequest;
import org.openapitools.client.model.ActionsGetActionsCacheUsageByRepoForOrg200Response;
import org.openapitools.client.model.ActionsGetDefaultWorkflowPermissions;
import org.openapitools.client.model.ActionsGetWorkflowWorkflowIdParameter;
import org.openapitools.client.model.ActionsListArtifactsForRepo200Response;
import org.openapitools.client.model.ActionsListJobsForWorkflowRunAttempt200Response;
import org.openapitools.client.model.ActionsListLabelsForSelfHostedRunnerForOrg200Response;
import org.openapitools.client.model.ActionsListOrgSecrets200Response;
import org.openapitools.client.model.ActionsListOrgVariables200Response;
import org.openapitools.client.model.ActionsListRepoOrganizationSecrets200Response;
import org.openapitools.client.model.ActionsListRepoOrganizationVariables200Response;
import org.openapitools.client.model.ActionsListRepoRequiredWorkflows200Response;
import org.openapitools.client.model.ActionsListRepoWorkflows200Response;
import org.openapitools.client.model.ActionsListRequiredWorkflowRuns200Response;
import org.openapitools.client.model.ActionsListRequiredWorkflows200Response;
import org.openapitools.client.model.ActionsListSelectedReposForOrgSecret200Response;
import org.openapitools.client.model.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnersForOrg200Response;
import org.openapitools.client.model.ActionsOIDCSubjectCustomizationForARepository;
import org.openapitools.client.model.ActionsOrganizationPermissions;
import org.openapitools.client.model.ActionsPublicKey;
import org.openapitools.client.model.ActionsReRunJobForWorkflowRunRequest;
import org.openapitools.client.model.ActionsRepositoryPermissions;
import org.openapitools.client.model.ActionsReviewCustomGatesForRunRequest;
import org.openapitools.client.model.ActionsReviewPendingDeploymentsForRunRequest;
import org.openapitools.client.model.ActionsSecret;
import org.openapitools.client.model.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;
import org.openapitools.client.model.ActionsSetDefaultWorkflowPermissions;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsOrganizationRequest;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsRepositoryRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgSecretRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgVariableRequest;
import org.openapitools.client.model.ActionsSetSelectedReposToRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
import org.openapitools.client.model.ActionsUpdateOrgVariableRequest;
import org.openapitools.client.model.ActionsUpdateRepoVariableRequest;
import org.openapitools.client.model.ActionsUpdateRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsVariable;
import org.openapitools.client.model.ActionsWorkflowAccessToRepository;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.AuthenticationToken;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.EnvironmentApprovals;
import org.openapitools.client.model.Job;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OidcCustomSubRepo;
import org.openapitools.client.model.OrganizationActionsSecret;
import org.openapitools.client.model.OrganizationActionsVariable;
import org.openapitools.client.model.PendingDeployment;
import org.openapitools.client.model.RepoRequiredWorkflow;
import org.openapitools.client.model.RequiredWorkflow;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerApplication;
import org.openapitools.client.model.ScimError;
import org.openapitools.client.model.SelectedActions;
import org.openapitools.client.model.ValidationErrorSimple;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowRun;
import org.openapitools.client.model.WorkflowRunUsage;
import org.openapitools.client.model.WorkflowUsage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActionsApi
 */
@Disabled
public class ActionsApiTest {

    private final ActionsApi api = new ActionsApi();

    /**
     * Add custom labels to a self-hosted runner for an organization
     *
     * Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddCustomLabelsToSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsAddCustomLabelsToSelfHostedRunnerForOrg(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest);
        // TODO: test validations
    }

    /**
     * Add custom labels to a self-hosted runner for a repository
     *
     * Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddCustomLabelsToSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsAddCustomLabelsToSelfHostedRunnerForRepo(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest);
        // TODO: test validations
    }

    /**
     * Add selected repository to an organization secret
     *
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddSelectedRepoToOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer repositoryId = null;
        api.actionsAddSelectedRepoToOrgSecret(org, secretName, repositoryId);
        // TODO: test validations
    }

    /**
     * Add selected repository to an organization variable
     *
     * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddSelectedRepoToOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        Integer repositoryId = null;
        api.actionsAddSelectedRepoToOrgVariable(org, name, repositoryId);
        // TODO: test validations
    }

    /**
     * Add a repository to a required workflow
     *
     * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddSelectedRepoToRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        Integer repositoryId = null;
        api.actionsAddSelectedRepoToRequiredWorkflow(org, requiredWorkflowId, repositoryId);
        // TODO: test validations
    }

    /**
     * Approve a workflow run for a fork pull request
     *
     * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsApproveWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Object response = api.actionsApproveWorkflowRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Cancel a workflow run
     *
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCancelWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Object response = api.actionsCancelWorkflowRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Create an environment variable
     *
     * Create an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateEnvironmentVariableTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest = null;
        Object response = api.actionsCreateEnvironmentVariable(repositoryId, environmentName, actionsCreateRepoVariableRequest);
        // TODO: test validations
    }

    /**
     * Create or update an environment secret
     *
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest = null;
        Object response = api.actionsCreateOrUpdateEnvironmentSecret(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest);
        // TODO: test validations
    }

    /**
     * Create or update an organization secret
     *
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest = null;
        Object response = api.actionsCreateOrUpdateOrgSecret(org, secretName, actionsCreateOrUpdateOrgSecretRequest);
        // TODO: test validations
    }

    /**
     * Create or update a repository secret
     *
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest = null;
        Object response = api.actionsCreateOrUpdateRepoSecret(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest);
        // TODO: test validations
    }

    /**
     * Create an organization variable
     *
     * Creates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrgVariableTest() throws ApiException {
        String org = null;
        ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest = null;
        Object response = api.actionsCreateOrgVariable(org, actionsCreateOrgVariableRequest);
        // TODO: test validations
    }

    /**
     * Create a registration token for an organization
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRegistrationTokenForOrgTest() throws ApiException {
        String org = null;
        AuthenticationToken response = api.actionsCreateRegistrationTokenForOrg(org);
        // TODO: test validations
    }

    /**
     * Create a registration token for a repository
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRegistrationTokenForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        AuthenticationToken response = api.actionsCreateRegistrationTokenForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Create a remove token for an organization
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRemoveTokenForOrgTest() throws ApiException {
        String org = null;
        AuthenticationToken response = api.actionsCreateRemoveTokenForOrg(org);
        // TODO: test validations
    }

    /**
     * Create a remove token for a repository
     *
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRemoveTokenForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        AuthenticationToken response = api.actionsCreateRemoveTokenForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Create a repository variable
     *
     * Creates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRepoVariableTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest = null;
        Object response = api.actionsCreateRepoVariable(owner, repo, actionsCreateRepoVariableRequest);
        // TODO: test validations
    }

    /**
     * Create a required workflow
     *
     * Create a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRequiredWorkflowTest() throws ApiException {
        String org = null;
        ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest = null;
        RequiredWorkflow response = api.actionsCreateRequiredWorkflow(org, actionsCreateRequiredWorkflowRequest);
        // TODO: test validations
    }

    /**
     * Create a workflow dispatch event
     *
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateWorkflowDispatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest = null;
        api.actionsCreateWorkflowDispatch(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest);
        // TODO: test validations
    }

    /**
     * Delete a GitHub Actions cache for a repository (using a cache ID)
     *
     * Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteActionsCacheByIdTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer cacheId = null;
        api.actionsDeleteActionsCacheById(owner, repo, cacheId);
        // TODO: test validations
    }

    /**
     * Delete GitHub Actions caches for a repository (using a cache key)
     *
     * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteActionsCacheByKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        String key = null;
        String ref = null;
        ActionsCacheList response = api.actionsDeleteActionsCacheByKey(owner, repo, key, ref);
        // TODO: test validations
    }

    /**
     * Delete an artifact
     *
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        api.actionsDeleteArtifact(owner, repo, artifactId);
        // TODO: test validations
    }

    /**
     * Delete an environment secret
     *
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        api.actionsDeleteEnvironmentSecret(repositoryId, environmentName, secretName);
        // TODO: test validations
    }

    /**
     * Delete an environment variable
     *
     * Deletes an environment variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteEnvironmentVariableTest() throws ApiException {
        Integer repositoryId = null;
        String name = null;
        String environmentName = null;
        api.actionsDeleteEnvironmentVariable(repositoryId, name, environmentName);
        // TODO: test validations
    }

    /**
     * Delete an organization secret
     *
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        api.actionsDeleteOrgSecret(org, secretName);
        // TODO: test validations
    }

    /**
     * Delete an organization variable
     *
     * Deletes an organization variable using the variable name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        api.actionsDeleteOrgVariable(org, name);
        // TODO: test validations
    }

    /**
     * Delete a repository secret
     *
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        api.actionsDeleteRepoSecret(owner, repo, secretName);
        // TODO: test validations
    }

    /**
     * Delete a repository variable
     *
     * Deletes a repository variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteRepoVariableTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        api.actionsDeleteRepoVariable(owner, repo, name);
        // TODO: test validations
    }

    /**
     * Delete a required workflow
     *
     * Deletes a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        api.actionsDeleteRequiredWorkflow(org, requiredWorkflowId);
        // TODO: test validations
    }

    /**
     * Delete a self-hosted runner from an organization
     *
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteSelfHostedRunnerFromOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        api.actionsDeleteSelfHostedRunnerFromOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * Delete a self-hosted runner from a repository
     *
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteSelfHostedRunnerFromRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        api.actionsDeleteSelfHostedRunnerFromRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * Delete a workflow run
     *
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDeleteWorkflowRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Delete workflow run logs
     *
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteWorkflowRunLogsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDeleteWorkflowRunLogs(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     *
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDisableSelectedRepositoryGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer repositoryId = null;
        api.actionsDisableSelectedRepositoryGithubActionsOrganization(org, repositoryId);
        // TODO: test validations
    }

    /**
     * Disable a workflow
     *
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDisableWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        api.actionsDisableWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * Download an artifact
     *
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        String archiveFormat = null;
        api.actionsDownloadArtifact(owner, repo, artifactId, archiveFormat);
        // TODO: test validations
    }

    /**
     * Download job logs for a workflow run
     *
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadJobLogsForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer jobId = null;
        api.actionsDownloadJobLogsForWorkflowRun(owner, repo, jobId);
        // TODO: test validations
    }

    /**
     * Download workflow run attempt logs
     *
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadWorkflowRunAttemptLogsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Integer attemptNumber = null;
        api.actionsDownloadWorkflowRunAttemptLogs(owner, repo, runId, attemptNumber);
        // TODO: test validations
    }

    /**
     * Download workflow run logs
     *
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadWorkflowRunLogsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDownloadWorkflowRunLogs(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     *
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsEnableSelectedRepositoryGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer repositoryId = null;
        api.actionsEnableSelectedRepositoryGithubActionsOrganization(org, repositoryId);
        // TODO: test validations
    }

    /**
     * Enable a workflow
     *
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsEnableWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        api.actionsEnableWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * List GitHub Actions caches for a repository
     *
     * Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetActionsCacheListTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        String ref = null;
        String key = null;
        String sort = null;
        String direction = null;
        ActionsCacheList response = api.actionsGetActionsCacheList(owner, repo, perPage, page, ref, key, sort, direction);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions cache usage for a repository
     *
     * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetActionsCacheUsageTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsCacheUsageByRepository response = api.actionsGetActionsCacheUsage(owner, repo);
        // TODO: test validations
    }

    /**
     * List repositories with GitHub Actions cache usage for an organization
     *
     * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetActionsCacheUsageByRepoForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsGetActionsCacheUsageByRepoForOrg200Response response = api.actionsGetActionsCacheUsageByRepoForOrg(org, perPage, page);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions cache usage for an organization
     *
     * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetActionsCacheUsageForOrgTest() throws ApiException {
        String org = null;
        ActionsCacheUsageOrgEnterprise response = api.actionsGetActionsCacheUsageForOrg(org);
        // TODO: test validations
    }

    /**
     * Get allowed actions and reusable workflows for an organization
     *
     * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetAllowedActionsOrganizationTest() throws ApiException {
        String org = null;
        SelectedActions response = api.actionsGetAllowedActionsOrganization(org);
        // TODO: test validations
    }

    /**
     * Get allowed actions and reusable workflows for a repository
     *
     * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetAllowedActionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        SelectedActions response = api.actionsGetAllowedActionsRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get an artifact
     *
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        Artifact response = api.actionsGetArtifact(owner, repo, artifactId);
        // TODO: test validations
    }

    /**
     * Get the customization template for an OIDC subject claim for a repository
     *
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetCustomOidcSubClaimForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        OidcCustomSubRepo response = api.actionsGetCustomOidcSubClaimForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Get an environment public key
     *
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetEnvironmentPublicKeyTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        ActionsPublicKey response = api.actionsGetEnvironmentPublicKey(repositoryId, environmentName);
        // TODO: test validations
    }

    /**
     * Get an environment secret
     *
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        ActionsSecret response = api.actionsGetEnvironmentSecret(repositoryId, environmentName, secretName);
        // TODO: test validations
    }

    /**
     * Get an environment variable
     *
     * Gets a specific variable in an environment. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetEnvironmentVariableTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String name = null;
        ActionsVariable response = api.actionsGetEnvironmentVariable(repositoryId, environmentName, name);
        // TODO: test validations
    }

    /**
     * Get default workflow permissions for an organization
     *
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsGetDefaultWorkflowPermissions response = api.actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(org);
        // TODO: test validations
    }

    /**
     * Get default workflow permissions for a repository
     *
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetDefaultWorkflowPermissions response = api.actionsGetGithubActionsDefaultWorkflowPermissionsRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions permissions for an organization
     *
     * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsOrganizationPermissions response = api.actionsGetGithubActionsPermissionsOrganization(org);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions permissions for a repository
     *
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsRepositoryPermissions response = api.actionsGetGithubActionsPermissionsRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a job for a workflow run
     *
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetJobForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer jobId = null;
        Job response = api.actionsGetJobForWorkflowRun(owner, repo, jobId);
        // TODO: test validations
    }

    /**
     * Get an organization public key
     *
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetOrgPublicKeyTest() throws ApiException {
        String org = null;
        ActionsPublicKey response = api.actionsGetOrgPublicKey(org);
        // TODO: test validations
    }

    /**
     * Get an organization secret
     *
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        OrganizationActionsSecret response = api.actionsGetOrgSecret(org, secretName);
        // TODO: test validations
    }

    /**
     * Get an organization variable
     *
     * Gets a specific variable in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        OrganizationActionsVariable response = api.actionsGetOrgVariable(org, name);
        // TODO: test validations
    }

    /**
     * Get pending deployments for a workflow run
     *
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetPendingDeploymentsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        List<PendingDeployment> response = api.actionsGetPendingDeploymentsForRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Get a repository public key
     *
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoPublicKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsPublicKey response = api.actionsGetRepoPublicKey(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a required workflow entity for a repository
     *
     * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoRequiredWorkflowTest() throws ApiException {
        String org = null;
        String repo = null;
        Integer requiredWorkflowIdForRepo = null;
        RepoRequiredWorkflow response = api.actionsGetRepoRequiredWorkflow(org, repo, requiredWorkflowIdForRepo);
        // TODO: test validations
    }

    /**
     * Get required workflow usage
     *
     * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.  Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions).\&quot;  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoRequiredWorkflowUsageTest() throws ApiException {
        String org = null;
        String repo = null;
        Integer requiredWorkflowIdForRepo = null;
        WorkflowUsage response = api.actionsGetRepoRequiredWorkflowUsage(org, repo, requiredWorkflowIdForRepo);
        // TODO: test validations
    }

    /**
     * Get a repository secret
     *
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        ActionsSecret response = api.actionsGetRepoSecret(owner, repo, secretName);
        // TODO: test validations
    }

    /**
     * Get a repository variable
     *
     * Gets a specific variable in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoVariableTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        ActionsVariable response = api.actionsGetRepoVariable(owner, repo, name);
        // TODO: test validations
    }

    /**
     * Get a required workflow
     *
     * Get a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        RequiredWorkflow response = api.actionsGetRequiredWorkflow(org, requiredWorkflowId);
        // TODO: test validations
    }

    /**
     * Get the review history for a workflow run
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetReviewsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        List<EnvironmentApprovals> response = api.actionsGetReviewsForRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Get a self-hosted runner for an organization
     *
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        Runner response = api.actionsGetSelfHostedRunnerForOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * Get a self-hosted runner for a repository
     *
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        Runner response = api.actionsGetSelfHostedRunnerForRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * Get a workflow
     *
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        Workflow response = api.actionsGetWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * Get the level of access for workflows outside of the repository
     *
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowAccessToRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsWorkflowAccessToRepository response = api.actionsGetWorkflowAccessToRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a workflow run
     *
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Boolean excludePullRequests = null;
        WorkflowRun response = api.actionsGetWorkflowRun(owner, repo, runId, excludePullRequests);
        // TODO: test validations
    }

    /**
     * Get a workflow run attempt
     *
     * Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowRunAttemptTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Integer attemptNumber = null;
        Boolean excludePullRequests = null;
        WorkflowRun response = api.actionsGetWorkflowRunAttempt(owner, repo, runId, attemptNumber, excludePullRequests);
        // TODO: test validations
    }

    /**
     * Get workflow run usage
     *
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowRunUsageTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        WorkflowRunUsage response = api.actionsGetWorkflowRunUsage(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Get workflow usage
     *
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowUsageTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        WorkflowUsage response = api.actionsGetWorkflowUsage(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * List artifacts for a repository
     *
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListArtifactsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        String name = null;
        ActionsListArtifactsForRepo200Response response = api.actionsListArtifactsForRepo(owner, repo, perPage, page, name);
        // TODO: test validations
    }

    /**
     * List environment secrets
     *
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListEnvironmentSecretsTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationSecrets200Response response = api.actionsListEnvironmentSecrets(repositoryId, environmentName, perPage, page);
        // TODO: test validations
    }

    /**
     * List environment variables
     *
     * Lists all environment variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListEnvironmentVariablesTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationVariables200Response response = api.actionsListEnvironmentVariables(repositoryId, environmentName, perPage, page);
        // TODO: test validations
    }

    /**
     * List jobs for a workflow run
     *
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListJobsForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        String filter = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListJobsForWorkflowRunAttempt200Response response = api.actionsListJobsForWorkflowRun(owner, repo, runId, filter, perPage, page);
        // TODO: test validations
    }

    /**
     * List jobs for a workflow run attempt
     *
     * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListJobsForWorkflowRunAttemptTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Integer attemptNumber = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListJobsForWorkflowRunAttempt200Response response = api.actionsListJobsForWorkflowRunAttempt(owner, repo, runId, attemptNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List labels for a self-hosted runner for an organization
     *
     * Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListLabelsForSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsListLabelsForSelfHostedRunnerForOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * List labels for a self-hosted runner for a repository
     *
     * Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListLabelsForSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsListLabelsForSelfHostedRunnerForRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * List organization secrets
     *
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListOrgSecretsTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListOrgSecrets200Response response = api.actionsListOrgSecrets(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization variables
     *
     * Lists all organization variables. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListOrgVariablesTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListOrgVariables200Response response = api.actionsListOrgVariables(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository organization secrets
     *
     * Lists all organization secrets shared with a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoOrganizationSecretsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationSecrets200Response response = api.actionsListRepoOrganizationSecrets(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository organization variables
     *
     * Lists all organiation variables shared with a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoOrganizationVariablesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationVariables200Response response = api.actionsListRepoOrganizationVariables(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository required workflows
     *
     * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoRequiredWorkflowsTest() throws ApiException {
        String org = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoRequiredWorkflows200Response response = api.actionsListRepoRequiredWorkflows(org, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository secrets
     *
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoSecretsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationSecrets200Response response = api.actionsListRepoSecrets(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository variables
     *
     * Lists all repository variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoVariablesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoOrganizationVariables200Response response = api.actionsListRepoVariables(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository workflows
     *
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoWorkflowsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoWorkflows200Response response = api.actionsListRepoWorkflows(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List workflow runs for a required workflow
     *
     * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRequiredWorkflowRunsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer requiredWorkflowIdForRepo = null;
        String actor = null;
        String branch = null;
        String event = null;
        String status = null;
        Integer perPage = null;
        Integer page = null;
        OffsetDateTime created = null;
        Boolean excludePullRequests = null;
        Integer checkSuiteId = null;
        String headSha = null;
        ActionsListRequiredWorkflowRuns200Response response = api.actionsListRequiredWorkflowRuns(owner, repo, requiredWorkflowIdForRepo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        // TODO: test validations
    }

    /**
     * List required workflows
     *
     * List all required workflows in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRequiredWorkflowsTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRequiredWorkflows200Response response = api.actionsListRequiredWorkflows(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List runner applications for an organization
     *
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRunnerApplicationsForOrgTest() throws ApiException {
        String org = null;
        List<RunnerApplication> response = api.actionsListRunnerApplicationsForOrg(org);
        // TODO: test validations
    }

    /**
     * List runner applications for a repository
     *
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRunnerApplicationsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<RunnerApplication> response = api.actionsListRunnerApplicationsForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * List selected repositories for an organization secret
     *
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedReposForOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer page = null;
        Integer perPage = null;
        ActionsListSelectedReposForOrgSecret200Response response = api.actionsListSelectedReposForOrgSecret(org, secretName, page, perPage);
        // TODO: test validations
    }

    /**
     * List selected repositories for an organization variable
     *
     * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedReposForOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        Integer page = null;
        Integer perPage = null;
        ActionsListSelectedReposForOrgSecret200Response response = api.actionsListSelectedReposForOrgVariable(org, name, page, perPage);
        // TODO: test validations
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     *
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedRepositoriesEnabledGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response response = api.actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List selected repositories for a required workflow
     *
     * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedRepositoriesRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response response = api.actionsListSelectedRepositoriesRequiredWorkflow(org, requiredWorkflowId);
        // TODO: test validations
    }

    /**
     * List self-hosted runners for an organization
     *
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnersForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelfHostedRunnersForOrg200Response response = api.actionsListSelfHostedRunnersForOrg(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List self-hosted runners for a repository
     *
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnersForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelfHostedRunnersForOrg200Response response = api.actionsListSelfHostedRunnersForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List workflow run artifacts
     *
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunArtifactsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListArtifactsForRepo200Response response = api.actionsListWorkflowRunArtifacts(owner, repo, runId, perPage, page);
        // TODO: test validations
    }

    /**
     * List workflow runs for a workflow
     *
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunsTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        String actor = null;
        String branch = null;
        String event = null;
        String status = null;
        Integer perPage = null;
        Integer page = null;
        OffsetDateTime created = null;
        Boolean excludePullRequests = null;
        Integer checkSuiteId = null;
        String headSha = null;
        ActionsListRequiredWorkflowRuns200Response response = api.actionsListWorkflowRuns(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        // TODO: test validations
    }

    /**
     * List workflow runs for a repository
     *
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String actor = null;
        String branch = null;
        String event = null;
        String status = null;
        Integer perPage = null;
        Integer page = null;
        OffsetDateTime created = null;
        Boolean excludePullRequests = null;
        Integer checkSuiteId = null;
        String headSha = null;
        ActionsListRequiredWorkflowRuns200Response response = api.actionsListWorkflowRunsForRepo(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        // TODO: test validations
    }

    /**
     * Re-run a job from a workflow run
     *
     * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReRunJobForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer jobId = null;
        ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest = null;
        Object response = api.actionsReRunJobForWorkflowRun(owner, repo, jobId, actionsReRunJobForWorkflowRunRequest);
        // TODO: test validations
    }

    /**
     * Re-run a workflow
     *
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReRunWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest = null;
        Object response = api.actionsReRunWorkflow(owner, repo, runId, actionsReRunJobForWorkflowRunRequest);
        // TODO: test validations
    }

    /**
     * Re-run failed jobs from a workflow run
     *
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReRunWorkflowFailedJobsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest = null;
        Object response = api.actionsReRunWorkflowFailedJobs(owner, repo, runId, actionsReRunJobForWorkflowRunRequest);
        // TODO: test validations
    }

    /**
     * Remove all custom labels from a self-hosted runner for an organization
     *
     * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * Remove all custom labels from a self-hosted runner for a repository
     *
     * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * Remove a custom label from a self-hosted runner for an organization
     *
     * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveCustomLabelFromSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        String name = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(org, runnerId, name);
        // TODO: test validations
    }

    /**
     * Remove a custom label from a self-hosted runner for a repository
     *
     * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveCustomLabelFromSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        String name = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(owner, repo, runnerId, name);
        // TODO: test validations
    }

    /**
     * Remove selected repository from an organization secret
     *
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveSelectedRepoFromOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer repositoryId = null;
        api.actionsRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId);
        // TODO: test validations
    }

    /**
     * Remove selected repository from an organization variable
     *
     * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveSelectedRepoFromOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        Integer repositoryId = null;
        api.actionsRemoveSelectedRepoFromOrgVariable(org, name, repositoryId);
        // TODO: test validations
    }

    /**
     * Remove a selected repository from required workflow
     *
     * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveSelectedRepoFromRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        Integer repositoryId = null;
        api.actionsRemoveSelectedRepoFromRequiredWorkflow(org, requiredWorkflowId, repositoryId);
        // TODO: test validations
    }

    /**
     * Review custom deployment protection rules for a workflow run
     *
     * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  GitHub Apps must have read and write permission for **Deployments** to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReviewCustomGatesForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest = null;
        api.actionsReviewCustomGatesForRun(owner, repo, runId, actionsReviewCustomGatesForRunRequest);
        // TODO: test validations
    }

    /**
     * Review pending deployments for a workflow run
     *
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReviewPendingDeploymentsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest = null;
        List<Deployment> response = api.actionsReviewPendingDeploymentsForRun(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest);
        // TODO: test validations
    }

    /**
     * Set allowed actions and reusable workflows for an organization
     *
     * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetAllowedActionsOrganizationTest() throws ApiException {
        String org = null;
        SelectedActions selectedActions = null;
        api.actionsSetAllowedActionsOrganization(org, selectedActions);
        // TODO: test validations
    }

    /**
     * Set allowed actions and reusable workflows for a repository
     *
     * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetAllowedActionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        SelectedActions selectedActions = null;
        api.actionsSetAllowedActionsRepository(owner, repo, selectedActions);
        // TODO: test validations
    }

    /**
     * Set custom labels for a self-hosted runner for an organization
     *
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetCustomLabelsForSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsSetCustomLabelsForSelfHostedRunnerForOrg(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest);
        // TODO: test validations
    }

    /**
     * Set custom labels for a self-hosted runner for a repository
     *
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetCustomLabelsForSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest = null;
        ActionsListLabelsForSelfHostedRunnerForOrg200Response response = api.actionsSetCustomLabelsForSelfHostedRunnerForRepo(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest);
        // TODO: test validations
    }

    /**
     * Set the customization template for an OIDC subject claim for a repository
     *
     * Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetCustomOidcSubClaimForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository = null;
        Object response = api.actionsSetCustomOidcSubClaimForRepo(owner, repo, actionsOIDCSubjectCustomizationForARepository);
        // TODO: test validations
    }

    /**
     * Set default workflow permissions for an organization
     *
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions = null;
        api.actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(org, actionsSetDefaultWorkflowPermissions);
        // TODO: test validations
    }

    /**
     * Set default workflow permissions for a repository
     *
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions = null;
        api.actionsSetGithubActionsDefaultWorkflowPermissionsRepository(owner, repo, actionsSetDefaultWorkflowPermissions);
        // TODO: test validations
    }

    /**
     * Set GitHub Actions permissions for an organization
     *
     * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest = null;
        api.actionsSetGithubActionsPermissionsOrganization(org, actionsSetGithubActionsPermissionsOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Set GitHub Actions permissions for a repository
     *
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest = null;
        api.actionsSetGithubActionsPermissionsRepository(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Set selected repositories for an organization secret
     *
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedReposForOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest = null;
        api.actionsSetSelectedReposForOrgSecret(org, secretName, actionsSetSelectedReposForOrgSecretRequest);
        // TODO: test validations
    }

    /**
     * Set selected repositories for an organization variable
     *
     * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedReposForOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest = null;
        api.actionsSetSelectedReposForOrgVariable(org, name, actionsSetSelectedReposForOrgVariableRequest);
        // TODO: test validations
    }

    /**
     * Sets repositories for a required workflow
     *
     * Sets the repositories for a required workflow that is required for selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedReposToRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest = null;
        api.actionsSetSelectedReposToRequiredWorkflow(org, requiredWorkflowId, actionsSetSelectedReposToRequiredWorkflowRequest);
        // TODO: test validations
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     *
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest = null;
        api.actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Set the level of access for workflows outside of the repository
     *
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetWorkflowAccessToRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository = null;
        api.actionsSetWorkflowAccessToRepository(owner, repo, actionsWorkflowAccessToRepository);
        // TODO: test validations
    }

    /**
     * Update an environment variable
     *
     * Updates an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsUpdateEnvironmentVariableTest() throws ApiException {
        Integer repositoryId = null;
        String name = null;
        String environmentName = null;
        ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest = null;
        api.actionsUpdateEnvironmentVariable(repositoryId, name, environmentName, actionsUpdateRepoVariableRequest);
        // TODO: test validations
    }

    /**
     * Update an organization variable
     *
     * Updates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsUpdateOrgVariableTest() throws ApiException {
        String org = null;
        String name = null;
        ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest = null;
        api.actionsUpdateOrgVariable(org, name, actionsUpdateOrgVariableRequest);
        // TODO: test validations
    }

    /**
     * Update a repository variable
     *
     * Updates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsUpdateRepoVariableTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest = null;
        api.actionsUpdateRepoVariable(owner, repo, name, actionsUpdateRepoVariableRequest);
        // TODO: test validations
    }

    /**
     * Update a required workflow
     *
     * Update a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsUpdateRequiredWorkflowTest() throws ApiException {
        String org = null;
        Integer requiredWorkflowId = null;
        ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest = null;
        RequiredWorkflow response = api.actionsUpdateRequiredWorkflow(org, requiredWorkflowId, actionsUpdateRequiredWorkflowRequest);
        // TODO: test validations
    }

}
