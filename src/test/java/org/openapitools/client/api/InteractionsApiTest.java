/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InteractionLimit;
import org.openapitools.client.model.InteractionLimitResponse;
import org.openapitools.client.model.InteractionsGetRestrictionsForOrg200Response;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InteractionsApi
 */
@Disabled
public class InteractionsApiTest {

    private final InteractionsApi api = new InteractionsApi();

    /**
     * Get interaction restrictions for your public repositories
     *
     * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsGetRestrictionsForAuthenticatedUserTest() throws ApiException {
        InteractionsGetRestrictionsForOrg200Response response = api.interactionsGetRestrictionsForAuthenticatedUser();
        // TODO: test validations
    }

    /**
     * Get interaction restrictions for an organization
     *
     * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsGetRestrictionsForOrgTest() throws ApiException {
        String org = null;
        InteractionsGetRestrictionsForOrg200Response response = api.interactionsGetRestrictionsForOrg(org);
        // TODO: test validations
    }

    /**
     * Get interaction restrictions for a repository
     *
     * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsGetRestrictionsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        InteractionsGetRestrictionsForOrg200Response response = api.interactionsGetRestrictionsForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Remove interaction restrictions from your public repositories
     *
     * Removes any interaction restrictions from your public repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsRemoveRestrictionsForAuthenticatedUserTest() throws ApiException {
        api.interactionsRemoveRestrictionsForAuthenticatedUser();
        // TODO: test validations
    }

    /**
     * Remove interaction restrictions for an organization
     *
     * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsRemoveRestrictionsForOrgTest() throws ApiException {
        String org = null;
        api.interactionsRemoveRestrictionsForOrg(org);
        // TODO: test validations
    }

    /**
     * Remove interaction restrictions for a repository
     *
     * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsRemoveRestrictionsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.interactionsRemoveRestrictionsForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Set interaction restrictions for your public repositories
     *
     * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsSetRestrictionsForAuthenticatedUserTest() throws ApiException {
        InteractionLimit interactionLimit = null;
        InteractionLimitResponse response = api.interactionsSetRestrictionsForAuthenticatedUser(interactionLimit);
        // TODO: test validations
    }

    /**
     * Set interaction restrictions for an organization
     *
     * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsSetRestrictionsForOrgTest() throws ApiException {
        String org = null;
        InteractionLimit interactionLimit = null;
        InteractionLimitResponse response = api.interactionsSetRestrictionsForOrg(org, interactionLimit);
        // TODO: test validations
    }

    /**
     * Set interaction restrictions for a repository
     *
     * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void interactionsSetRestrictionsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        InteractionLimit interactionLimit = null;
        InteractionLimitResponse response = api.interactionsSetRestrictionsForRepo(owner, repo, interactionLimit);
        // TODO: test validations
    }

}
