/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.PackageVersion;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackagesApi
 */
@Disabled
public class PackagesApiTest {

    private final PackagesApi api = new PackagesApi();

    /**
     * Delete a package for the authenticated user
     *
     * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        api.packagesDeletePackageForAuthenticatedUser(packageType, packageName);
        // TODO: test validations
    }

    /**
     * Delete a package for an organization
     *
     * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageForOrgTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        api.packagesDeletePackageForOrg(packageType, packageName, org);
        // TODO: test validations
    }

    /**
     * Delete a package for a user
     *
     * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        api.packagesDeletePackageForUser(packageType, packageName, username);
        // TODO: test validations
    }

    /**
     * Delete a package version for the authenticated user
     *
     * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageVersionForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        Integer packageVersionId = null;
        api.packagesDeletePackageVersionForAuthenticatedUser(packageType, packageName, packageVersionId);
        // TODO: test validations
    }

    /**
     * Delete package version for an organization
     *
     * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageVersionForOrgTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        Integer packageVersionId = null;
        api.packagesDeletePackageVersionForOrg(packageType, packageName, org, packageVersionId);
        // TODO: test validations
    }

    /**
     * Delete package version for a user
     *
     * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesDeletePackageVersionForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        Integer packageVersionId = null;
        api.packagesDeletePackageVersionForUser(packageType, packageName, username, packageVersionId);
        // TODO: test validations
    }

    /**
     * List package versions for a package owned by the authenticated user
     *
     * Lists package versions for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        Integer page = null;
        Integer perPage = null;
        String state = null;
        List<PackageVersion> response = api.packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(packageType, packageName, page, perPage, state);
        // TODO: test validations
    }

    /**
     * List package versions for a package owned by an organization
     *
     * Lists package versions for a package owned by an organization.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetAllPackageVersionsForPackageOwnedByOrgTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        Integer page = null;
        Integer perPage = null;
        String state = null;
        List<PackageVersion> response = api.packagesGetAllPackageVersionsForPackageOwnedByOrg(packageType, packageName, org, page, perPage, state);
        // TODO: test validations
    }

    /**
     * List package versions for a package owned by a user
     *
     * Lists package versions for a public package owned by a specified user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetAllPackageVersionsForPackageOwnedByUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        List<PackageVersion> response = api.packagesGetAllPackageVersionsForPackageOwnedByUser(packageType, packageName, username);
        // TODO: test validations
    }

    /**
     * Get a package for the authenticated user
     *
     * Gets a specific package for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        ModelPackage response = api.packagesGetPackageForAuthenticatedUser(packageType, packageName);
        // TODO: test validations
    }

    /**
     * Get a package for an organization
     *
     * Gets a specific package in an organization.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageForOrganizationTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        ModelPackage response = api.packagesGetPackageForOrganization(packageType, packageName, org);
        // TODO: test validations
    }

    /**
     * Get a package for a user
     *
     * Gets a specific package metadata for a public package owned by a user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        ModelPackage response = api.packagesGetPackageForUser(packageType, packageName, username);
        // TODO: test validations
    }

    /**
     * Get a package version for the authenticated user
     *
     * Gets a specific package version for a package owned by the authenticated user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageVersionForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        Integer packageVersionId = null;
        PackageVersion response = api.packagesGetPackageVersionForAuthenticatedUser(packageType, packageName, packageVersionId);
        // TODO: test validations
    }

    /**
     * Get a package version for an organization
     *
     * Gets a specific package version in an organization.  You must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageVersionForOrganizationTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        Integer packageVersionId = null;
        PackageVersion response = api.packagesGetPackageVersionForOrganization(packageType, packageName, org, packageVersionId);
        // TODO: test validations
    }

    /**
     * Get a package version for a user
     *
     * Gets a specific package version for a public package owned by a specified user.  At this time, to use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesGetPackageVersionForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        Integer packageVersionId = null;
        String username = null;
        PackageVersion response = api.packagesGetPackageVersionForUser(packageType, packageName, packageVersionId, username);
        // TODO: test validations
    }

    /**
     * Get list of conflicting packages during Docker migration for authenticated-user
     *
     * Lists all packages that are owned by the authenticated user within the user&#39;s namespace, and that encountered a conflict during a Docker migration. To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListDockerMigrationConflictingPackagesForAuthenticatedUserTest() throws ApiException {
        List<ModelPackage> response = api.packagesListDockerMigrationConflictingPackagesForAuthenticatedUser();
        // TODO: test validations
    }

    /**
     * Get list of conflicting packages during Docker migration for organization
     *
     * Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration. To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListDockerMigrationConflictingPackagesForOrganizationTest() throws ApiException {
        String org = null;
        List<ModelPackage> response = api.packagesListDockerMigrationConflictingPackagesForOrganization(org);
        // TODO: test validations
    }

    /**
     * Get list of conflicting packages during Docker migration for user
     *
     * Lists all packages that are in a specific user&#39;s namespace, that the requesting user has access to, and that encountered a conflict during Docker migration. To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListDockerMigrationConflictingPackagesForUserTest() throws ApiException {
        String username = null;
        List<ModelPackage> response = api.packagesListDockerMigrationConflictingPackagesForUser(username);
        // TODO: test validations
    }

    /**
     * List packages for the authenticated user&#39;s namespace
     *
     * Lists packages owned by the authenticated user within the user&#39;s namespace.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListPackagesForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String visibility = null;
        Integer page = null;
        Integer perPage = null;
        List<ModelPackage> response = api.packagesListPackagesForAuthenticatedUser(packageType, visibility, page, perPage);
        // TODO: test validations
    }

    /**
     * List packages for an organization
     *
     * Lists packages in an organization readable by the user.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListPackagesForOrganizationTest() throws ApiException {
        String packageType = null;
        String org = null;
        String visibility = null;
        Integer page = null;
        Integer perPage = null;
        List<ModelPackage> response = api.packagesListPackagesForOrganization(packageType, org, visibility, page, perPage);
        // TODO: test validations
    }

    /**
     * List packages for a user
     *
     * Lists all packages in a user&#39;s namespace for which the requesting user has access.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; scope. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesListPackagesForUserTest() throws ApiException {
        String packageType = null;
        String username = null;
        String visibility = null;
        Integer page = null;
        Integer perPage = null;
        List<ModelPackage> response = api.packagesListPackagesForUser(packageType, username, visibility, page, perPage);
        // TODO: test validations
    }

    /**
     * Restore a package for the authenticated user
     *
     * Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String token = null;
        api.packagesRestorePackageForAuthenticatedUser(packageType, packageName, token);
        // TODO: test validations
    }

    /**
     * Restore a package for an organization
     *
     * Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageForOrgTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        String token = null;
        api.packagesRestorePackageForOrg(packageType, packageName, org, token);
        // TODO: test validations
    }

    /**
     * Restore a package for a user
     *
     * Restores an entire package for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        String token = null;
        api.packagesRestorePackageForUser(packageType, packageName, username, token);
        // TODO: test validations
    }

    /**
     * Restore a package version for the authenticated user
     *
     * Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageVersionForAuthenticatedUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        Integer packageVersionId = null;
        api.packagesRestorePackageVersionForAuthenticatedUser(packageType, packageName, packageVersionId);
        // TODO: test validations
    }

    /**
     * Restore package version for an organization
     *
     * Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageVersionForOrgTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String org = null;
        Integer packageVersionId = null;
        api.packagesRestorePackageVersionForOrg(packageType, packageName, org, packageVersionId);
        // TODO: test validations
    }

    /**
     * Restore package version for a user
     *
     * Restores a specific package version for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  To use this endpoint, you must authenticate using an access token with the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes. In addition: - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the &#x60;repo&#x60; scope. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot; - If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packagesRestorePackageVersionForUserTest() throws ApiException {
        String packageType = null;
        String packageName = null;
        String username = null;
        Integer packageVersionId = null;
        api.packagesRestorePackageVersionForUser(packageType, packageName, username, packageVersionId);
        // TODO: test validations
    }

}
