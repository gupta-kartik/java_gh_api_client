/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.GpgKey;
import org.openapitools.client.model.Hovercard;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.KeySimple;
import org.openapitools.client.model.PrivateUser;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.SocialAccount;
import org.openapitools.client.model.SshSigningKey;
import org.openapitools.client.model.UsersAddEmailForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersAddSocialAccountForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersCreateGpgKeyForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersCreatePublicSshKeyForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersCreateSshSigningKeyForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersDeleteEmailForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersDeleteSocialAccountForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersGetAuthenticated200Response;
import org.openapitools.client.model.UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest;
import org.openapitools.client.model.UsersUpdateAuthenticatedRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersAddEmailForAuthenticatedUser
     * @param usersAddEmailForAuthenticatedUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user">Add an email address for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersAddEmailForAuthenticatedUserCall(UsersAddEmailForAuthenticatedUserRequest usersAddEmailForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersAddEmailForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersAddEmailForAuthenticatedUserValidateBeforeCall(UsersAddEmailForAuthenticatedUserRequest usersAddEmailForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        return usersAddEmailForAuthenticatedUserCall(usersAddEmailForAuthenticatedUserRequest, _callback);

    }

    /**
     * Add an email address for the authenticated user
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddEmailForAuthenticatedUserRequest  (optional)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user">Add an email address for the authenticated user Documentation</a>
     */
    public List<Email> usersAddEmailForAuthenticatedUser(UsersAddEmailForAuthenticatedUserRequest usersAddEmailForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<List<Email>> localVarResp = usersAddEmailForAuthenticatedUserWithHttpInfo(usersAddEmailForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Add an email address for the authenticated user
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddEmailForAuthenticatedUserRequest  (optional)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user">Add an email address for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Email>> usersAddEmailForAuthenticatedUserWithHttpInfo(UsersAddEmailForAuthenticatedUserRequest usersAddEmailForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersAddEmailForAuthenticatedUserValidateBeforeCall(usersAddEmailForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an email address for the authenticated user (asynchronously)
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddEmailForAuthenticatedUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user">Add an email address for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersAddEmailForAuthenticatedUserAsync(UsersAddEmailForAuthenticatedUserRequest usersAddEmailForAuthenticatedUserRequest, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersAddEmailForAuthenticatedUserValidateBeforeCall(usersAddEmailForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersAddSocialAccountForAuthenticatedUser
     * @param usersAddSocialAccountForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#add-social-account-for-authenticated-user">Add social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersAddSocialAccountForAuthenticatedUserCall(UsersAddSocialAccountForAuthenticatedUserRequest usersAddSocialAccountForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersAddSocialAccountForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/social_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersAddSocialAccountForAuthenticatedUserValidateBeforeCall(UsersAddSocialAccountForAuthenticatedUserRequest usersAddSocialAccountForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersAddSocialAccountForAuthenticatedUserRequest' is set
        if (usersAddSocialAccountForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersAddSocialAccountForAuthenticatedUserRequest' when calling usersAddSocialAccountForAuthenticatedUser(Async)");
        }

        return usersAddSocialAccountForAuthenticatedUserCall(usersAddSocialAccountForAuthenticatedUserRequest, _callback);

    }

    /**
     * Add social accounts for the authenticated user
     * Add one or more social accounts to the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddSocialAccountForAuthenticatedUserRequest  (required)
     * @return List&lt;SocialAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#add-social-account-for-authenticated-user">Add social accounts for the authenticated user Documentation</a>
     */
    public List<SocialAccount> usersAddSocialAccountForAuthenticatedUser(UsersAddSocialAccountForAuthenticatedUserRequest usersAddSocialAccountForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<List<SocialAccount>> localVarResp = usersAddSocialAccountForAuthenticatedUserWithHttpInfo(usersAddSocialAccountForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Add social accounts for the authenticated user
     * Add one or more social accounts to the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddSocialAccountForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;List&lt;SocialAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#add-social-account-for-authenticated-user">Add social accounts for the authenticated user Documentation</a>
     */
    public ApiResponse<List<SocialAccount>> usersAddSocialAccountForAuthenticatedUserWithHttpInfo(UsersAddSocialAccountForAuthenticatedUserRequest usersAddSocialAccountForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersAddSocialAccountForAuthenticatedUserValidateBeforeCall(usersAddSocialAccountForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add social accounts for the authenticated user (asynchronously)
     * Add one or more social accounts to the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersAddSocialAccountForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#add-social-account-for-authenticated-user">Add social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersAddSocialAccountForAuthenticatedUserAsync(UsersAddSocialAccountForAuthenticatedUserRequest usersAddSocialAccountForAuthenticatedUserRequest, final ApiCallback<List<SocialAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersAddSocialAccountForAuthenticatedUserValidateBeforeCall(usersAddSocialAccountForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersBlock
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#block-a-user">Block a user Documentation</a>
     */
    public okhttp3.Call usersBlockCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/blocks/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersBlockValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersBlock(Async)");
        }

        return usersBlockCall(username, _callback);

    }

    /**
     * Block a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#block-a-user">Block a user Documentation</a>
     */
    public void usersBlock(String username) throws ApiException {
        usersBlockWithHttpInfo(username);
    }

    /**
     * Block a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#block-a-user">Block a user Documentation</a>
     */
    public ApiResponse<Void> usersBlockWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersBlockValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Block a user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#block-a-user">Block a user Documentation</a>
     */
    public okhttp3.Call usersBlockAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersBlockValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCheckBlocked
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the user is blocked </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the user is not blocked </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user">Check if a user is blocked by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCheckBlockedCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/blocks/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCheckBlockedValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersCheckBlocked(Async)");
        }

        return usersCheckBlockedCall(username, _callback);

    }

    /**
     * Check if a user is blocked by the authenticated user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the user is blocked </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the user is not blocked </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user">Check if a user is blocked by the authenticated user Documentation</a>
     */
    public void usersCheckBlocked(String username) throws ApiException {
        usersCheckBlockedWithHttpInfo(username);
    }

    /**
     * Check if a user is blocked by the authenticated user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the user is blocked </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the user is not blocked </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user">Check if a user is blocked by the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersCheckBlockedWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersCheckBlockedValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is blocked by the authenticated user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the user is blocked </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the user is not blocked </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user">Check if a user is blocked by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCheckBlockedAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCheckBlockedValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCheckFollowingForUser
     * @param username The handle for the GitHub user account. (required)
     * @param targetUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the user follows the target user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the user does not follow the target user </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user">Check if a user follows another user Documentation</a>
     */
    public okhttp3.Call usersCheckFollowingForUserCall(String username, String targetUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/following/{target_user}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "target_user" + "}", localVarApiClient.escapeString(targetUser.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCheckFollowingForUserValidateBeforeCall(String username, String targetUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersCheckFollowingForUser(Async)");
        }

        // verify the required parameter 'targetUser' is set
        if (targetUser == null) {
            throw new ApiException("Missing the required parameter 'targetUser' when calling usersCheckFollowingForUser(Async)");
        }

        return usersCheckFollowingForUserCall(username, targetUser, _callback);

    }

    /**
     * Check if a user follows another user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param targetUser  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the user follows the target user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the user does not follow the target user </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user">Check if a user follows another user Documentation</a>
     */
    public void usersCheckFollowingForUser(String username, String targetUser) throws ApiException {
        usersCheckFollowingForUserWithHttpInfo(username, targetUser);
    }

    /**
     * Check if a user follows another user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param targetUser  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the user follows the target user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the user does not follow the target user </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user">Check if a user follows another user Documentation</a>
     */
    public ApiResponse<Void> usersCheckFollowingForUserWithHttpInfo(String username, String targetUser) throws ApiException {
        okhttp3.Call localVarCall = usersCheckFollowingForUserValidateBeforeCall(username, targetUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user follows another user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param targetUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the user follows the target user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the user does not follow the target user </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user">Check if a user follows another user Documentation</a>
     */
    public okhttp3.Call usersCheckFollowingForUserAsync(String username, String targetUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCheckFollowingForUserValidateBeforeCall(username, targetUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCheckPersonIsFollowedByAuthenticated
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the person is followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the person is not followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user">Check if a person is followed by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCheckPersonIsFollowedByAuthenticatedCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCheckPersonIsFollowedByAuthenticatedValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersCheckPersonIsFollowedByAuthenticated(Async)");
        }

        return usersCheckPersonIsFollowedByAuthenticatedCall(username, _callback);

    }

    /**
     * Check if a person is followed by the authenticated user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the person is followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the person is not followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user">Check if a person is followed by the authenticated user Documentation</a>
     */
    public void usersCheckPersonIsFollowedByAuthenticated(String username) throws ApiException {
        usersCheckPersonIsFollowedByAuthenticatedWithHttpInfo(username);
    }

    /**
     * Check if a person is followed by the authenticated user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the person is followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the person is not followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user">Check if a person is followed by the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersCheckPersonIsFollowedByAuthenticatedWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersCheckPersonIsFollowedByAuthenticatedValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a person is followed by the authenticated user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if the person is followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if the person is not followed by the authenticated user </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user">Check if a person is followed by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCheckPersonIsFollowedByAuthenticatedAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCheckPersonIsFollowedByAuthenticatedValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCreateGpgKeyForAuthenticatedUser
     * @param usersCreateGpgKeyForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user">Create a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreateGpgKeyForAuthenticatedUserCall(UsersCreateGpgKeyForAuthenticatedUserRequest usersCreateGpgKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreateGpgKeyForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/gpg_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateGpgKeyForAuthenticatedUserValidateBeforeCall(UsersCreateGpgKeyForAuthenticatedUserRequest usersCreateGpgKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersCreateGpgKeyForAuthenticatedUserRequest' is set
        if (usersCreateGpgKeyForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersCreateGpgKeyForAuthenticatedUserRequest' when calling usersCreateGpgKeyForAuthenticatedUser(Async)");
        }

        return usersCreateGpgKeyForAuthenticatedUserCall(usersCreateGpgKeyForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a GPG key for the authenticated user
     * Adds a GPG key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreateGpgKeyForAuthenticatedUserRequest  (required)
     * @return GpgKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user">Create a GPG key for the authenticated user Documentation</a>
     */
    public GpgKey usersCreateGpgKeyForAuthenticatedUser(UsersCreateGpgKeyForAuthenticatedUserRequest usersCreateGpgKeyForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<GpgKey> localVarResp = usersCreateGpgKeyForAuthenticatedUserWithHttpInfo(usersCreateGpgKeyForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a GPG key for the authenticated user
     * Adds a GPG key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreateGpgKeyForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;GpgKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user">Create a GPG key for the authenticated user Documentation</a>
     */
    public ApiResponse<GpgKey> usersCreateGpgKeyForAuthenticatedUserWithHttpInfo(UsersCreateGpgKeyForAuthenticatedUserRequest usersCreateGpgKeyForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersCreateGpgKeyForAuthenticatedUserValidateBeforeCall(usersCreateGpgKeyForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<GpgKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a GPG key for the authenticated user (asynchronously)
     * Adds a GPG key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreateGpgKeyForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user">Create a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreateGpgKeyForAuthenticatedUserAsync(UsersCreateGpgKeyForAuthenticatedUserRequest usersCreateGpgKeyForAuthenticatedUserRequest, final ApiCallback<GpgKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateGpgKeyForAuthenticatedUserValidateBeforeCall(usersCreateGpgKeyForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GpgKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCreatePublicSshKeyForAuthenticatedUser
     * @param usersCreatePublicSshKeyForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user">Create a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreatePublicSshKeyForAuthenticatedUserCall(UsersCreatePublicSshKeyForAuthenticatedUserRequest usersCreatePublicSshKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreatePublicSshKeyForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreatePublicSshKeyForAuthenticatedUserValidateBeforeCall(UsersCreatePublicSshKeyForAuthenticatedUserRequest usersCreatePublicSshKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersCreatePublicSshKeyForAuthenticatedUserRequest' is set
        if (usersCreatePublicSshKeyForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersCreatePublicSshKeyForAuthenticatedUserRequest' when calling usersCreatePublicSshKeyForAuthenticatedUser(Async)");
        }

        return usersCreatePublicSshKeyForAuthenticatedUserCall(usersCreatePublicSshKeyForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a public SSH key for the authenticated user
     * Adds a public SSH key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreatePublicSshKeyForAuthenticatedUserRequest  (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user">Create a public SSH key for the authenticated user Documentation</a>
     */
    public Key usersCreatePublicSshKeyForAuthenticatedUser(UsersCreatePublicSshKeyForAuthenticatedUserRequest usersCreatePublicSshKeyForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Key> localVarResp = usersCreatePublicSshKeyForAuthenticatedUserWithHttpInfo(usersCreatePublicSshKeyForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a public SSH key for the authenticated user
     * Adds a public SSH key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreatePublicSshKeyForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user">Create a public SSH key for the authenticated user Documentation</a>
     */
    public ApiResponse<Key> usersCreatePublicSshKeyForAuthenticatedUserWithHttpInfo(UsersCreatePublicSshKeyForAuthenticatedUserRequest usersCreatePublicSshKeyForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersCreatePublicSshKeyForAuthenticatedUserValidateBeforeCall(usersCreatePublicSshKeyForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a public SSH key for the authenticated user (asynchronously)
     * Adds a public SSH key to the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least &#x60;write:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param usersCreatePublicSshKeyForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user">Create a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreatePublicSshKeyForAuthenticatedUserAsync(UsersCreatePublicSshKeyForAuthenticatedUserRequest usersCreatePublicSshKeyForAuthenticatedUserRequest, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreatePublicSshKeyForAuthenticatedUserValidateBeforeCall(usersCreatePublicSshKeyForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCreateSshSigningKeyForAuthenticatedUser
     * @param usersCreateSshSigningKeyForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user">Create a SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreateSshSigningKeyForAuthenticatedUserCall(UsersCreateSshSigningKeyForAuthenticatedUserRequest usersCreateSshSigningKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreateSshSigningKeyForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/ssh_signing_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateSshSigningKeyForAuthenticatedUserValidateBeforeCall(UsersCreateSshSigningKeyForAuthenticatedUserRequest usersCreateSshSigningKeyForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersCreateSshSigningKeyForAuthenticatedUserRequest' is set
        if (usersCreateSshSigningKeyForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersCreateSshSigningKeyForAuthenticatedUserRequest' when calling usersCreateSshSigningKeyForAuthenticatedUser(Async)");
        }

        return usersCreateSshSigningKeyForAuthenticatedUserCall(usersCreateSshSigningKeyForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a SSH signing key for the authenticated user
     * Creates an SSH signing key for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;write:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param usersCreateSshSigningKeyForAuthenticatedUserRequest  (required)
     * @return SshSigningKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user">Create a SSH signing key for the authenticated user Documentation</a>
     */
    public SshSigningKey usersCreateSshSigningKeyForAuthenticatedUser(UsersCreateSshSigningKeyForAuthenticatedUserRequest usersCreateSshSigningKeyForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<SshSigningKey> localVarResp = usersCreateSshSigningKeyForAuthenticatedUserWithHttpInfo(usersCreateSshSigningKeyForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a SSH signing key for the authenticated user
     * Creates an SSH signing key for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;write:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param usersCreateSshSigningKeyForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;SshSigningKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user">Create a SSH signing key for the authenticated user Documentation</a>
     */
    public ApiResponse<SshSigningKey> usersCreateSshSigningKeyForAuthenticatedUserWithHttpInfo(UsersCreateSshSigningKeyForAuthenticatedUserRequest usersCreateSshSigningKeyForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersCreateSshSigningKeyForAuthenticatedUserValidateBeforeCall(usersCreateSshSigningKeyForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<SshSigningKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a SSH signing key for the authenticated user (asynchronously)
     * Creates an SSH signing key for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;write:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param usersCreateSshSigningKeyForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user">Create a SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersCreateSshSigningKeyForAuthenticatedUserAsync(UsersCreateSshSigningKeyForAuthenticatedUserRequest usersCreateSshSigningKeyForAuthenticatedUserRequest, final ApiCallback<SshSigningKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateSshSigningKeyForAuthenticatedUserValidateBeforeCall(usersCreateSshSigningKeyForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SshSigningKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeleteEmailForAuthenticatedUser
     * @param usersDeleteEmailForAuthenticatedUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user">Delete an email address for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteEmailForAuthenticatedUserCall(UsersDeleteEmailForAuthenticatedUserRequest usersDeleteEmailForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeleteEmailForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteEmailForAuthenticatedUserValidateBeforeCall(UsersDeleteEmailForAuthenticatedUserRequest usersDeleteEmailForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        return usersDeleteEmailForAuthenticatedUserCall(usersDeleteEmailForAuthenticatedUserRequest, _callback);

    }

    /**
     * Delete an email address for the authenticated user
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteEmailForAuthenticatedUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user">Delete an email address for the authenticated user Documentation</a>
     */
    public void usersDeleteEmailForAuthenticatedUser(UsersDeleteEmailForAuthenticatedUserRequest usersDeleteEmailForAuthenticatedUserRequest) throws ApiException {
        usersDeleteEmailForAuthenticatedUserWithHttpInfo(usersDeleteEmailForAuthenticatedUserRequest);
    }

    /**
     * Delete an email address for the authenticated user
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteEmailForAuthenticatedUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user">Delete an email address for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersDeleteEmailForAuthenticatedUserWithHttpInfo(UsersDeleteEmailForAuthenticatedUserRequest usersDeleteEmailForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteEmailForAuthenticatedUserValidateBeforeCall(usersDeleteEmailForAuthenticatedUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an email address for the authenticated user (asynchronously)
     * This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteEmailForAuthenticatedUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user">Delete an email address for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteEmailForAuthenticatedUserAsync(UsersDeleteEmailForAuthenticatedUserRequest usersDeleteEmailForAuthenticatedUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteEmailForAuthenticatedUserValidateBeforeCall(usersDeleteEmailForAuthenticatedUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeleteGpgKeyForAuthenticatedUser
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user">Delete a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteGpgKeyForAuthenticatedUserCall(Integer gpgKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys/{gpg_key_id}"
            .replace("{" + "gpg_key_id" + "}", localVarApiClient.escapeString(gpgKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteGpgKeyForAuthenticatedUserValidateBeforeCall(Integer gpgKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpgKeyId' is set
        if (gpgKeyId == null) {
            throw new ApiException("Missing the required parameter 'gpgKeyId' when calling usersDeleteGpgKeyForAuthenticatedUser(Async)");
        }

        return usersDeleteGpgKeyForAuthenticatedUserCall(gpgKeyId, _callback);

    }

    /**
     * Delete a GPG key for the authenticated user
     * Removes a GPG key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user">Delete a GPG key for the authenticated user Documentation</a>
     */
    public void usersDeleteGpgKeyForAuthenticatedUser(Integer gpgKeyId) throws ApiException {
        usersDeleteGpgKeyForAuthenticatedUserWithHttpInfo(gpgKeyId);
    }

    /**
     * Delete a GPG key for the authenticated user
     * Removes a GPG key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user">Delete a GPG key for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersDeleteGpgKeyForAuthenticatedUserWithHttpInfo(Integer gpgKeyId) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteGpgKeyForAuthenticatedUserValidateBeforeCall(gpgKeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a GPG key for the authenticated user (asynchronously)
     * Removes a GPG key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user">Delete a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteGpgKeyForAuthenticatedUserAsync(Integer gpgKeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteGpgKeyForAuthenticatedUserValidateBeforeCall(gpgKeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeletePublicSshKeyForAuthenticatedUser
     * @param keyId The unique identifier of the key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user">Delete a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeletePublicSshKeyForAuthenticatedUserCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys/{key_id}"
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeletePublicSshKeyForAuthenticatedUserValidateBeforeCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling usersDeletePublicSshKeyForAuthenticatedUser(Async)");
        }

        return usersDeletePublicSshKeyForAuthenticatedUserCall(keyId, _callback);

    }

    /**
     * Delete a public SSH key for the authenticated user
     * Removes a public SSH key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user">Delete a public SSH key for the authenticated user Documentation</a>
     */
    public void usersDeletePublicSshKeyForAuthenticatedUser(Integer keyId) throws ApiException {
        usersDeletePublicSshKeyForAuthenticatedUserWithHttpInfo(keyId);
    }

    /**
     * Delete a public SSH key for the authenticated user
     * Removes a public SSH key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user">Delete a public SSH key for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersDeletePublicSshKeyForAuthenticatedUserWithHttpInfo(Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = usersDeletePublicSshKeyForAuthenticatedUserValidateBeforeCall(keyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a public SSH key for the authenticated user (asynchronously)
     * Removes a public SSH key from the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;admin:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user">Delete a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeletePublicSshKeyForAuthenticatedUserAsync(Integer keyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeletePublicSshKeyForAuthenticatedUserValidateBeforeCall(keyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeleteSocialAccountForAuthenticatedUser
     * @param usersDeleteSocialAccountForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#delete-social-account-for-authenticated-user">Delete social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteSocialAccountForAuthenticatedUserCall(UsersDeleteSocialAccountForAuthenticatedUserRequest usersDeleteSocialAccountForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeleteSocialAccountForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/social_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteSocialAccountForAuthenticatedUserValidateBeforeCall(UsersDeleteSocialAccountForAuthenticatedUserRequest usersDeleteSocialAccountForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersDeleteSocialAccountForAuthenticatedUserRequest' is set
        if (usersDeleteSocialAccountForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersDeleteSocialAccountForAuthenticatedUserRequest' when calling usersDeleteSocialAccountForAuthenticatedUser(Async)");
        }

        return usersDeleteSocialAccountForAuthenticatedUserCall(usersDeleteSocialAccountForAuthenticatedUserRequest, _callback);

    }

    /**
     * Delete social accounts for the authenticated user
     * Deletes one or more social accounts from the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteSocialAccountForAuthenticatedUserRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#delete-social-account-for-authenticated-user">Delete social accounts for the authenticated user Documentation</a>
     */
    public void usersDeleteSocialAccountForAuthenticatedUser(UsersDeleteSocialAccountForAuthenticatedUserRequest usersDeleteSocialAccountForAuthenticatedUserRequest) throws ApiException {
        usersDeleteSocialAccountForAuthenticatedUserWithHttpInfo(usersDeleteSocialAccountForAuthenticatedUserRequest);
    }

    /**
     * Delete social accounts for the authenticated user
     * Deletes one or more social accounts from the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteSocialAccountForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#delete-social-account-for-authenticated-user">Delete social accounts for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersDeleteSocialAccountForAuthenticatedUserWithHttpInfo(UsersDeleteSocialAccountForAuthenticatedUserRequest usersDeleteSocialAccountForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteSocialAccountForAuthenticatedUserValidateBeforeCall(usersDeleteSocialAccountForAuthenticatedUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete social accounts for the authenticated user (asynchronously)
     * Deletes one or more social accounts from the authenticated user&#39;s profile. This endpoint is accessible with the &#x60;user&#x60; scope.
     * @param usersDeleteSocialAccountForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#delete-social-account-for-authenticated-user">Delete social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteSocialAccountForAuthenticatedUserAsync(UsersDeleteSocialAccountForAuthenticatedUserRequest usersDeleteSocialAccountForAuthenticatedUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteSocialAccountForAuthenticatedUserValidateBeforeCall(usersDeleteSocialAccountForAuthenticatedUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeleteSshSigningKeyForAuthenticatedUser
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user">Delete an SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteSshSigningKeyForAuthenticatedUserCall(Integer sshSigningKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/ssh_signing_keys/{ssh_signing_key_id}"
            .replace("{" + "ssh_signing_key_id" + "}", localVarApiClient.escapeString(sshSigningKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeleteSshSigningKeyForAuthenticatedUserValidateBeforeCall(Integer sshSigningKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sshSigningKeyId' is set
        if (sshSigningKeyId == null) {
            throw new ApiException("Missing the required parameter 'sshSigningKeyId' when calling usersDeleteSshSigningKeyForAuthenticatedUser(Async)");
        }

        return usersDeleteSshSigningKeyForAuthenticatedUserCall(sshSigningKeyId, _callback);

    }

    /**
     * Delete an SSH signing key for the authenticated user
     * Deletes an SSH signing key from the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;admin:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user">Delete an SSH signing key for the authenticated user Documentation</a>
     */
    public void usersDeleteSshSigningKeyForAuthenticatedUser(Integer sshSigningKeyId) throws ApiException {
        usersDeleteSshSigningKeyForAuthenticatedUserWithHttpInfo(sshSigningKeyId);
    }

    /**
     * Delete an SSH signing key for the authenticated user
     * Deletes an SSH signing key from the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;admin:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user">Delete an SSH signing key for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> usersDeleteSshSigningKeyForAuthenticatedUserWithHttpInfo(Integer sshSigningKeyId) throws ApiException {
        okhttp3.Call localVarCall = usersDeleteSshSigningKeyForAuthenticatedUserValidateBeforeCall(sshSigningKeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an SSH signing key for the authenticated user (asynchronously)
     * Deletes an SSH signing key from the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;admin:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user">Delete an SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersDeleteSshSigningKeyForAuthenticatedUserAsync(Integer sshSigningKeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeleteSshSigningKeyForAuthenticatedUserValidateBeforeCall(sshSigningKeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersFollow
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#follow-a-user">Follow a user Documentation</a>
     */
    public okhttp3.Call usersFollowCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersFollowValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersFollow(Async)");
        }

        return usersFollowCall(username, _callback);

    }

    /**
     * Follow a user
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#follow-a-user">Follow a user Documentation</a>
     */
    public void usersFollow(String username) throws ApiException {
        usersFollowWithHttpInfo(username);
    }

    /**
     * Follow a user
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#follow-a-user">Follow a user Documentation</a>
     */
    public ApiResponse<Void> usersFollowWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersFollowValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a user (asynchronously)
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#follow-a-user">Follow a user Documentation</a>
     */
    public okhttp3.Call usersFollowAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersFollowValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetAuthenticated
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-the-authenticated-user">Get the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetAuthenticatedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetAuthenticatedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersGetAuthenticatedCall(_callback);

    }

    /**
     * Get the authenticated user
     * If the authenticated user is authenticated with an OAuth token with the &#x60;user&#x60; scope, then the response lists public and private profile information.  If the authenticated user is authenticated through OAuth without the &#x60;user&#x60; scope, then the response lists only public profile information.
     * @return UsersGetAuthenticated200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-the-authenticated-user">Get the authenticated user Documentation</a>
     */
    public UsersGetAuthenticated200Response usersGetAuthenticated() throws ApiException {
        ApiResponse<UsersGetAuthenticated200Response> localVarResp = usersGetAuthenticatedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the authenticated user
     * If the authenticated user is authenticated with an OAuth token with the &#x60;user&#x60; scope, then the response lists public and private profile information.  If the authenticated user is authenticated through OAuth without the &#x60;user&#x60; scope, then the response lists only public profile information.
     * @return ApiResponse&lt;UsersGetAuthenticated200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-the-authenticated-user">Get the authenticated user Documentation</a>
     */
    public ApiResponse<UsersGetAuthenticated200Response> usersGetAuthenticatedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetAuthenticatedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UsersGetAuthenticated200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the authenticated user (asynchronously)
     * If the authenticated user is authenticated with an OAuth token with the &#x60;user&#x60; scope, then the response lists public and private profile information.  If the authenticated user is authenticated through OAuth without the &#x60;user&#x60; scope, then the response lists only public profile information.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-the-authenticated-user">Get the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetAuthenticatedAsync(final ApiCallback<UsersGetAuthenticated200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetAuthenticatedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UsersGetAuthenticated200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetByUsername
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-user">Get a user Documentation</a>
     */
    public okhttp3.Call usersGetByUsernameCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetByUsernameValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersGetByUsername(Async)");
        }

        return usersGetByUsernameCall(username, _callback);

    }

    /**
     * Get a user
     * Provides publicly available information about someone with a GitHub account.  GitHub Apps with the &#x60;Plan&#x60; user permission can use this endpoint to retrieve information about a user&#39;s GitHub plan. The GitHub App must be authenticated as a user. See \&quot;[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\&quot; for details about authentication. For an example response, see &#39;Response with GitHub plan information&#39; below\&quot;  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/reference/users#emails)\&quot;.
     * @param username The handle for the GitHub user account. (required)
     * @return UsersGetAuthenticated200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-user">Get a user Documentation</a>
     */
    public UsersGetAuthenticated200Response usersGetByUsername(String username) throws ApiException {
        ApiResponse<UsersGetAuthenticated200Response> localVarResp = usersGetByUsernameWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Get a user
     * Provides publicly available information about someone with a GitHub account.  GitHub Apps with the &#x60;Plan&#x60; user permission can use this endpoint to retrieve information about a user&#39;s GitHub plan. The GitHub App must be authenticated as a user. See \&quot;[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\&quot; for details about authentication. For an example response, see &#39;Response with GitHub plan information&#39; below\&quot;  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/reference/users#emails)\&quot;.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;UsersGetAuthenticated200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-user">Get a user Documentation</a>
     */
    public ApiResponse<UsersGetAuthenticated200Response> usersGetByUsernameWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersGetByUsernameValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<UsersGetAuthenticated200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user (asynchronously)
     * Provides publicly available information about someone with a GitHub account.  GitHub Apps with the &#x60;Plan&#x60; user permission can use this endpoint to retrieve information about a user&#39;s GitHub plan. The GitHub App must be authenticated as a user. See \&quot;[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\&quot; for details about authentication. For an example response, see &#39;Response with GitHub plan information&#39; below\&quot;  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/reference/users#emails)\&quot;.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-user">Get a user Documentation</a>
     */
    public okhttp3.Call usersGetByUsernameAsync(String username, final ApiCallback<UsersGetAuthenticated200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetByUsernameValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<UsersGetAuthenticated200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetContextForUser
     * @param username The handle for the GitHub user account. (required)
     * @param subjectType Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;. (optional)
     * @param subjectId Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user">Get contextual information for a user Documentation</a>
     */
    public okhttp3.Call usersGetContextForUserCall(String username, String subjectType, String subjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/hovercard"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subjectType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_type", subjectType));
        }

        if (subjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject_id", subjectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetContextForUserValidateBeforeCall(String username, String subjectType, String subjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersGetContextForUser(Async)");
        }

        return usersGetContextForUserCall(username, subjectType, subjectId, _callback);

    }

    /**
     * Get contextual information for a user
     * Provides hovercard information when authenticated through basic auth or OAuth with the &#x60;repo&#x60; scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.  The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#39;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository via cURL, it would look like this:  &#x60;&#x60;&#x60;shell  curl -u username:token   https://api.github.com/users/octocat/hovercard?subject_type&#x3D;repository&amp;subject_id&#x3D;1300192 &#x60;&#x60;&#x60;
     * @param username The handle for the GitHub user account. (required)
     * @param subjectType Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;. (optional)
     * @param subjectId Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;. (optional)
     * @return Hovercard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user">Get contextual information for a user Documentation</a>
     */
    public Hovercard usersGetContextForUser(String username, String subjectType, String subjectId) throws ApiException {
        ApiResponse<Hovercard> localVarResp = usersGetContextForUserWithHttpInfo(username, subjectType, subjectId);
        return localVarResp.getData();
    }

    /**
     * Get contextual information for a user
     * Provides hovercard information when authenticated through basic auth or OAuth with the &#x60;repo&#x60; scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.  The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#39;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository via cURL, it would look like this:  &#x60;&#x60;&#x60;shell  curl -u username:token   https://api.github.com/users/octocat/hovercard?subject_type&#x3D;repository&amp;subject_id&#x3D;1300192 &#x60;&#x60;&#x60;
     * @param username The handle for the GitHub user account. (required)
     * @param subjectType Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;. (optional)
     * @param subjectId Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;. (optional)
     * @return ApiResponse&lt;Hovercard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user">Get contextual information for a user Documentation</a>
     */
    public ApiResponse<Hovercard> usersGetContextForUserWithHttpInfo(String username, String subjectType, String subjectId) throws ApiException {
        okhttp3.Call localVarCall = usersGetContextForUserValidateBeforeCall(username, subjectType, subjectId, null);
        Type localVarReturnType = new TypeToken<Hovercard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contextual information for a user (asynchronously)
     * Provides hovercard information when authenticated through basic auth or OAuth with the &#x60;repo&#x60; scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.  The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#39;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository via cURL, it would look like this:  &#x60;&#x60;&#x60;shell  curl -u username:token   https://api.github.com/users/octocat/hovercard?subject_type&#x3D;repository&amp;subject_id&#x3D;1300192 &#x60;&#x60;&#x60;
     * @param username The handle for the GitHub user account. (required)
     * @param subjectType Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;. (optional)
     * @param subjectId Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user">Get contextual information for a user Documentation</a>
     */
    public okhttp3.Call usersGetContextForUserAsync(String username, String subjectType, String subjectId, final ApiCallback<Hovercard> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetContextForUserValidateBeforeCall(username, subjectType, subjectId, _callback);
        Type localVarReturnType = new TypeToken<Hovercard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetGpgKeyForAuthenticatedUser
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user">Get a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetGpgKeyForAuthenticatedUserCall(Integer gpgKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys/{gpg_key_id}"
            .replace("{" + "gpg_key_id" + "}", localVarApiClient.escapeString(gpgKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetGpgKeyForAuthenticatedUserValidateBeforeCall(Integer gpgKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gpgKeyId' is set
        if (gpgKeyId == null) {
            throw new ApiException("Missing the required parameter 'gpgKeyId' when calling usersGetGpgKeyForAuthenticatedUser(Async)");
        }

        return usersGetGpgKeyForAuthenticatedUserCall(gpgKeyId, _callback);

    }

    /**
     * Get a GPG key for the authenticated user
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @return GpgKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user">Get a GPG key for the authenticated user Documentation</a>
     */
    public GpgKey usersGetGpgKeyForAuthenticatedUser(Integer gpgKeyId) throws ApiException {
        ApiResponse<GpgKey> localVarResp = usersGetGpgKeyForAuthenticatedUserWithHttpInfo(gpgKeyId);
        return localVarResp.getData();
    }

    /**
     * Get a GPG key for the authenticated user
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @return ApiResponse&lt;GpgKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user">Get a GPG key for the authenticated user Documentation</a>
     */
    public ApiResponse<GpgKey> usersGetGpgKeyForAuthenticatedUserWithHttpInfo(Integer gpgKeyId) throws ApiException {
        okhttp3.Call localVarCall = usersGetGpgKeyForAuthenticatedUserValidateBeforeCall(gpgKeyId, null);
        Type localVarReturnType = new TypeToken<GpgKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a GPG key for the authenticated user (asynchronously)
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param gpgKeyId The unique identifier of the GPG key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user">Get a GPG key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetGpgKeyForAuthenticatedUserAsync(Integer gpgKeyId, final ApiCallback<GpgKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetGpgKeyForAuthenticatedUserValidateBeforeCall(gpgKeyId, _callback);
        Type localVarReturnType = new TypeToken<GpgKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetPublicSshKeyForAuthenticatedUser
     * @param keyId The unique identifier of the key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user">Get a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetPublicSshKeyForAuthenticatedUserCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys/{key_id}"
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetPublicSshKeyForAuthenticatedUserValidateBeforeCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling usersGetPublicSshKeyForAuthenticatedUser(Async)");
        }

        return usersGetPublicSshKeyForAuthenticatedUserCall(keyId, _callback);

    }

    /**
     * Get a public SSH key for the authenticated user
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user">Get a public SSH key for the authenticated user Documentation</a>
     */
    public Key usersGetPublicSshKeyForAuthenticatedUser(Integer keyId) throws ApiException {
        ApiResponse<Key> localVarResp = usersGetPublicSshKeyForAuthenticatedUserWithHttpInfo(keyId);
        return localVarResp.getData();
    }

    /**
     * Get a public SSH key for the authenticated user
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user">Get a public SSH key for the authenticated user Documentation</a>
     */
    public ApiResponse<Key> usersGetPublicSshKeyForAuthenticatedUserWithHttpInfo(Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = usersGetPublicSshKeyForAuthenticatedUserValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a public SSH key for the authenticated user (asynchronously)
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param keyId The unique identifier of the key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user">Get a public SSH key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetPublicSshKeyForAuthenticatedUserAsync(Integer keyId, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetPublicSshKeyForAuthenticatedUserValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetSshSigningKeyForAuthenticatedUser
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user">Get an SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetSshSigningKeyForAuthenticatedUserCall(Integer sshSigningKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/ssh_signing_keys/{ssh_signing_key_id}"
            .replace("{" + "ssh_signing_key_id" + "}", localVarApiClient.escapeString(sshSigningKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetSshSigningKeyForAuthenticatedUserValidateBeforeCall(Integer sshSigningKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sshSigningKeyId' is set
        if (sshSigningKeyId == null) {
            throw new ApiException("Missing the required parameter 'sshSigningKeyId' when calling usersGetSshSigningKeyForAuthenticatedUser(Async)");
        }

        return usersGetSshSigningKeyForAuthenticatedUserCall(sshSigningKeyId, _callback);

    }

    /**
     * Get an SSH signing key for the authenticated user
     * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @return SshSigningKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user">Get an SSH signing key for the authenticated user Documentation</a>
     */
    public SshSigningKey usersGetSshSigningKeyForAuthenticatedUser(Integer sshSigningKeyId) throws ApiException {
        ApiResponse<SshSigningKey> localVarResp = usersGetSshSigningKeyForAuthenticatedUserWithHttpInfo(sshSigningKeyId);
        return localVarResp.getData();
    }

    /**
     * Get an SSH signing key for the authenticated user
     * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @return ApiResponse&lt;SshSigningKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user">Get an SSH signing key for the authenticated user Documentation</a>
     */
    public ApiResponse<SshSigningKey> usersGetSshSigningKeyForAuthenticatedUserWithHttpInfo(Integer sshSigningKeyId) throws ApiException {
        okhttp3.Call localVarCall = usersGetSshSigningKeyForAuthenticatedUserValidateBeforeCall(sshSigningKeyId, null);
        Type localVarReturnType = new TypeToken<SshSigningKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an SSH signing key for the authenticated user (asynchronously)
     * Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param sshSigningKeyId The unique identifier of the SSH signing key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user">Get an SSH signing key for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersGetSshSigningKeyForAuthenticatedUserAsync(Integer sshSigningKeyId, final ApiCallback<SshSigningKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetSshSigningKeyForAuthenticatedUserValidateBeforeCall(sshSigningKeyId, _callback);
        Type localVarReturnType = new TypeToken<SshSigningKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersList
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users">List users Documentation</a>
     */
    public okhttp3.Call usersListCall(Integer since, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListValidateBeforeCall(Integer since, Integer perPage, final ApiCallback _callback) throws ApiException {
        return usersListCall(since, perPage, _callback);

    }

    /**
     * List users
     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users">List users Documentation</a>
     */
    public List<SimpleUser> usersList(Integer since, Integer perPage) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListWithHttpInfo(since, perPage);
        return localVarResp.getData();
    }

    /**
     * List users
     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users">List users Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListWithHttpInfo(Integer since, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = usersListValidateBeforeCall(since, perPage, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users (asynchronously)
     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users">List users Documentation</a>
     */
    public okhttp3.Call usersListAsync(Integer since, Integer perPage, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListValidateBeforeCall(since, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListBlockedByAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user">List users blocked by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListBlockedByAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListBlockedByAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListBlockedByAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List users blocked by the authenticated user
     * List the users you&#39;ve blocked on your personal account.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user">List users blocked by the authenticated user Documentation</a>
     */
    public List<SimpleUser> usersListBlockedByAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListBlockedByAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List users blocked by the authenticated user
     * List the users you&#39;ve blocked on your personal account.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user">List users blocked by the authenticated user Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListBlockedByAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListBlockedByAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users blocked by the authenticated user (asynchronously)
     * List the users you&#39;ve blocked on your personal account.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user">List users blocked by the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListBlockedByAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListBlockedByAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListEmailsForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user">List email addresses for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListEmailsForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListEmailsForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListEmailsForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List email addresses for the authenticated user
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user">List email addresses for the authenticated user Documentation</a>
     */
    public List<Email> usersListEmailsForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Email>> localVarResp = usersListEmailsForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List email addresses for the authenticated user
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user">List email addresses for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Email>> usersListEmailsForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListEmailsForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List email addresses for the authenticated user (asynchronously)
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user">List email addresses for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListEmailsForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListEmailsForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListFollowedByAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows">List the people the authenticated user follows Documentation</a>
     */
    public okhttp3.Call usersListFollowedByAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListFollowedByAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListFollowedByAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List the people the authenticated user follows
     * Lists the people who the authenticated user follows.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows">List the people the authenticated user follows Documentation</a>
     */
    public List<SimpleUser> usersListFollowedByAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListFollowedByAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List the people the authenticated user follows
     * Lists the people who the authenticated user follows.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows">List the people the authenticated user follows Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListFollowedByAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListFollowedByAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the people the authenticated user follows (asynchronously)
     * Lists the people who the authenticated user follows.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows">List the people the authenticated user follows Documentation</a>
     */
    public okhttp3.Call usersListFollowedByAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListFollowedByAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListFollowersForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user">List followers of the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListFollowersForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/followers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListFollowersForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListFollowersForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List followers of the authenticated user
     * Lists the people following the authenticated user.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user">List followers of the authenticated user Documentation</a>
     */
    public List<SimpleUser> usersListFollowersForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListFollowersForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List followers of the authenticated user
     * Lists the people following the authenticated user.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user">List followers of the authenticated user Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListFollowersForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListFollowersForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List followers of the authenticated user (asynchronously)
     * Lists the people following the authenticated user.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user">List followers of the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListFollowersForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListFollowersForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListFollowersForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-a-user">List followers of a user Documentation</a>
     */
    public okhttp3.Call usersListFollowersForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/followers"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListFollowersForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListFollowersForUser(Async)");
        }

        return usersListFollowersForUserCall(username, perPage, page, _callback);

    }

    /**
     * List followers of a user
     * Lists the people following the specified user.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-a-user">List followers of a user Documentation</a>
     */
    public List<SimpleUser> usersListFollowersForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListFollowersForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List followers of a user
     * Lists the people following the specified user.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-a-user">List followers of a user Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListFollowersForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListFollowersForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List followers of a user (asynchronously)
     * Lists the people following the specified user.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-followers-of-a-user">List followers of a user Documentation</a>
     */
    public okhttp3.Call usersListFollowersForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListFollowersForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListFollowingForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-a-user-follows">List the people a user follows Documentation</a>
     */
    public okhttp3.Call usersListFollowingForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/following"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListFollowingForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListFollowingForUser(Async)");
        }

        return usersListFollowingForUserCall(username, perPage, page, _callback);

    }

    /**
     * List the people a user follows
     * Lists the people who the specified user follows.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-a-user-follows">List the people a user follows Documentation</a>
     */
    public List<SimpleUser> usersListFollowingForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = usersListFollowingForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List the people a user follows
     * Lists the people who the specified user follows.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-a-user-follows">List the people a user follows Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> usersListFollowingForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListFollowingForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the people a user follows (asynchronously)
     * Lists the people who the specified user follows.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-the-people-a-user-follows">List the people a user follows Documentation</a>
     */
    public okhttp3.Call usersListFollowingForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListFollowingForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListGpgKeysForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user">List GPG keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListGpgKeysForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListGpgKeysForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListGpgKeysForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List GPG keys for the authenticated user
     * Lists the current user&#39;s GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;GpgKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user">List GPG keys for the authenticated user Documentation</a>
     */
    public List<GpgKey> usersListGpgKeysForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<GpgKey>> localVarResp = usersListGpgKeysForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List GPG keys for the authenticated user
     * Lists the current user&#39;s GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;GpgKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user">List GPG keys for the authenticated user Documentation</a>
     */
    public ApiResponse<List<GpgKey>> usersListGpgKeysForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListGpgKeysForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<GpgKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GPG keys for the authenticated user (asynchronously)
     * Lists the current user&#39;s GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:gpg_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user">List GPG keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListGpgKeysForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<GpgKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListGpgKeysForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<GpgKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListGpgKeysForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user">List GPG keys for a user Documentation</a>
     */
    public okhttp3.Call usersListGpgKeysForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/gpg_keys"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListGpgKeysForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListGpgKeysForUser(Async)");
        }

        return usersListGpgKeysForUserCall(username, perPage, page, _callback);

    }

    /**
     * List GPG keys for a user
     * Lists the GPG keys for a user. This information is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;GpgKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user">List GPG keys for a user Documentation</a>
     */
    public List<GpgKey> usersListGpgKeysForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<GpgKey>> localVarResp = usersListGpgKeysForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List GPG keys for a user
     * Lists the GPG keys for a user. This information is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;GpgKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user">List GPG keys for a user Documentation</a>
     */
    public ApiResponse<List<GpgKey>> usersListGpgKeysForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListGpgKeysForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<GpgKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GPG keys for a user (asynchronously)
     * Lists the GPG keys for a user. This information is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user">List GPG keys for a user Documentation</a>
     */
    public okhttp3.Call usersListGpgKeysForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<GpgKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListGpgKeysForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<GpgKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListPublicEmailsForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user">List public email addresses for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListPublicEmailsForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/public_emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListPublicEmailsForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListPublicEmailsForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List public email addresses for the authenticated user
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user">List public email addresses for the authenticated user Documentation</a>
     */
    public List<Email> usersListPublicEmailsForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Email>> localVarResp = usersListPublicEmailsForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public email addresses for the authenticated user
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user">List public email addresses for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Email>> usersListPublicEmailsForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListPublicEmailsForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public email addresses for the authenticated user (asynchronously)
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the &#x60;user:email&#x60; scope.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user">List public email addresses for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListPublicEmailsForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListPublicEmailsForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListPublicKeysForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-keys-for-a-user">List public keys for a user Documentation</a>
     */
    public okhttp3.Call usersListPublicKeysForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/keys"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListPublicKeysForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListPublicKeysForUser(Async)");
        }

        return usersListPublicKeysForUserCall(username, perPage, page, _callback);

    }

    /**
     * List public keys for a user
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;KeySimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-keys-for-a-user">List public keys for a user Documentation</a>
     */
    public List<KeySimple> usersListPublicKeysForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<KeySimple>> localVarResp = usersListPublicKeysForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public keys for a user
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;KeySimple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-keys-for-a-user">List public keys for a user Documentation</a>
     */
    public ApiResponse<List<KeySimple>> usersListPublicKeysForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListPublicKeysForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<KeySimple>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public keys for a user (asynchronously)
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-keys-for-a-user">List public keys for a user Documentation</a>
     */
    public okhttp3.Call usersListPublicKeysForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<KeySimple>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListPublicKeysForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<KeySimple>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListPublicSshKeysForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user">List public SSH keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListPublicSshKeysForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListPublicSshKeysForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListPublicSshKeysForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List public SSH keys for the authenticated user
     * Lists the public SSH keys for the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user">List public SSH keys for the authenticated user Documentation</a>
     */
    public List<Key> usersListPublicSshKeysForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Key>> localVarResp = usersListPublicSshKeysForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public SSH keys for the authenticated user
     * Lists the public SSH keys for the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Key&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user">List public SSH keys for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Key>> usersListPublicSshKeysForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListPublicSshKeysForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public SSH keys for the authenticated user (asynchronously)
     * Lists the public SSH keys for the authenticated user&#39;s GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least &#x60;read:public_key&#x60; [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user">List public SSH keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListPublicSshKeysForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<Key>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListPublicSshKeysForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListSocialAccountsForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user">List social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListSocialAccountsForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/social_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListSocialAccountsForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListSocialAccountsForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List social accounts for the authenticated user
     * Lists all of your social accounts.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SocialAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user">List social accounts for the authenticated user Documentation</a>
     */
    public List<SocialAccount> usersListSocialAccountsForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SocialAccount>> localVarResp = usersListSocialAccountsForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List social accounts for the authenticated user
     * Lists all of your social accounts.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SocialAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user">List social accounts for the authenticated user Documentation</a>
     */
    public ApiResponse<List<SocialAccount>> usersListSocialAccountsForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListSocialAccountsForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List social accounts for the authenticated user (asynchronously)
     * Lists all of your social accounts.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user">List social accounts for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListSocialAccountsForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<SocialAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListSocialAccountsForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListSocialAccountsForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user">List social accounts for a user Documentation</a>
     */
    public okhttp3.Call usersListSocialAccountsForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/social_accounts"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListSocialAccountsForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListSocialAccountsForUser(Async)");
        }

        return usersListSocialAccountsForUserCall(username, perPage, page, _callback);

    }

    /**
     * List social accounts for a user
     * Lists social media accounts for a user. This endpoint is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SocialAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user">List social accounts for a user Documentation</a>
     */
    public List<SocialAccount> usersListSocialAccountsForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SocialAccount>> localVarResp = usersListSocialAccountsForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List social accounts for a user
     * Lists social media accounts for a user. This endpoint is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SocialAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user">List social accounts for a user Documentation</a>
     */
    public ApiResponse<List<SocialAccount>> usersListSocialAccountsForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListSocialAccountsForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List social accounts for a user (asynchronously)
     * Lists social media accounts for a user. This endpoint is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user">List social accounts for a user Documentation</a>
     */
    public okhttp3.Call usersListSocialAccountsForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<SocialAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListSocialAccountsForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SocialAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListSshSigningKeysForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user">List SSH signing keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListSshSigningKeysForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/ssh_signing_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListSshSigningKeysForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return usersListSshSigningKeysForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List SSH signing keys for the authenticated user
     * Lists the SSH signing keys for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SshSigningKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user">List SSH signing keys for the authenticated user Documentation</a>
     */
    public List<SshSigningKey> usersListSshSigningKeysForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SshSigningKey>> localVarResp = usersListSshSigningKeysForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List SSH signing keys for the authenticated user
     * Lists the SSH signing keys for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SshSigningKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user">List SSH signing keys for the authenticated user Documentation</a>
     */
    public ApiResponse<List<SshSigningKey>> usersListSshSigningKeysForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListSshSigningKeysForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SshSigningKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List SSH signing keys for the authenticated user (asynchronously)
     * Lists the SSH signing keys for the authenticated user&#39;s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least &#x60;read:ssh_signing_key&#x60; scope. For more information, see \&quot;[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\&quot;
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user">List SSH signing keys for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersListSshSigningKeysForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<SshSigningKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListSshSigningKeysForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SshSigningKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListSshSigningKeysForUser
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user">List SSH signing keys for a user Documentation</a>
     */
    public okhttp3.Call usersListSshSigningKeysForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/ssh_signing_keys"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListSshSigningKeysForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersListSshSigningKeysForUser(Async)");
        }

        return usersListSshSigningKeysForUserCall(username, perPage, page, _callback);

    }

    /**
     * List SSH signing keys for a user
     * Lists the SSH signing keys for a user. This operation is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SshSigningKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user">List SSH signing keys for a user Documentation</a>
     */
    public List<SshSigningKey> usersListSshSigningKeysForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SshSigningKey>> localVarResp = usersListSshSigningKeysForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List SSH signing keys for a user
     * Lists the SSH signing keys for a user. This operation is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SshSigningKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user">List SSH signing keys for a user Documentation</a>
     */
    public ApiResponse<List<SshSigningKey>> usersListSshSigningKeysForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersListSshSigningKeysForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SshSigningKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List SSH signing keys for a user (asynchronously)
     * Lists the SSH signing keys for a user. This operation is accessible by anyone.
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user">List SSH signing keys for a user Documentation</a>
     */
    public okhttp3.Call usersListSshSigningKeysForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<SshSigningKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListSshSigningKeysForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SshSigningKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSetPrimaryEmailVisibilityForAuthenticatedUser
     * @param usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user">Set primary email visibility for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersSetPrimaryEmailVisibilityForAuthenticatedUserCall(UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/email/visibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSetPrimaryEmailVisibilityForAuthenticatedUserValidateBeforeCall(UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest' is set
        if (usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest' when calling usersSetPrimaryEmailVisibilityForAuthenticatedUser(Async)");
        }

        return usersSetPrimaryEmailVisibilityForAuthenticatedUserCall(usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, _callback);

    }

    /**
     * Set primary email visibility for the authenticated user
     * Sets the visibility for your primary email addresses.
     * @param usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest  (required)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user">Set primary email visibility for the authenticated user Documentation</a>
     */
    public List<Email> usersSetPrimaryEmailVisibilityForAuthenticatedUser(UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<List<Email>> localVarResp = usersSetPrimaryEmailVisibilityForAuthenticatedUserWithHttpInfo(usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Set primary email visibility for the authenticated user
     * Sets the visibility for your primary email addresses.
     * @param usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user">Set primary email visibility for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Email>> usersSetPrimaryEmailVisibilityForAuthenticatedUserWithHttpInfo(UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersSetPrimaryEmailVisibilityForAuthenticatedUserValidateBeforeCall(usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set primary email visibility for the authenticated user (asynchronously)
     * Sets the visibility for your primary email addresses.
     * @param usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user">Set primary email visibility for the authenticated user Documentation</a>
     */
    public okhttp3.Call usersSetPrimaryEmailVisibilityForAuthenticatedUserAsync(UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSetPrimaryEmailVisibilityForAuthenticatedUserValidateBeforeCall(usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUnblock
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unblock-a-user">Unblock a user Documentation</a>
     */
    public okhttp3.Call usersUnblockCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/blocks/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUnblockValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersUnblock(Async)");
        }

        return usersUnblockCall(username, _callback);

    }

    /**
     * Unblock a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unblock-a-user">Unblock a user Documentation</a>
     */
    public void usersUnblock(String username) throws ApiException {
        usersUnblockWithHttpInfo(username);
    }

    /**
     * Unblock a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unblock-a-user">Unblock a user Documentation</a>
     */
    public ApiResponse<Void> usersUnblockWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersUnblockValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock a user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unblock-a-user">Unblock a user Documentation</a>
     */
    public okhttp3.Call usersUnblockAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUnblockValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUnfollow
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unfollow-a-user">Unfollow a user Documentation</a>
     */
    public okhttp3.Call usersUnfollowCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUnfollowValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersUnfollow(Async)");
        }

        return usersUnfollowCall(username, _callback);

    }

    /**
     * Unfollow a user
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unfollow-a-user">Unfollow a user Documentation</a>
     */
    public void usersUnfollow(String username) throws ApiException {
        usersUnfollowWithHttpInfo(username);
    }

    /**
     * Unfollow a user
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unfollow-a-user">Unfollow a user Documentation</a>
     */
    public ApiResponse<Void> usersUnfollowWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = usersUnfollowValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unfollow a user (asynchronously)
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the &#x60;user:follow&#x60; scope.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users#unfollow-a-user">Unfollow a user Documentation</a>
     */
    public okhttp3.Call usersUnfollowAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUnfollowValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdateAuthenticated
     * @param usersUpdateAuthenticatedRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users/#update-the-authenticated-user">Update the authenticated user Documentation</a>
     */
    public okhttp3.Call usersUpdateAuthenticatedCall(UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateAuthenticatedRequest;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateAuthenticatedValidateBeforeCall(UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest, final ApiCallback _callback) throws ApiException {
        return usersUpdateAuthenticatedCall(usersUpdateAuthenticatedRequest, _callback);

    }

    /**
     * Update the authenticated user
     * **Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     * @param usersUpdateAuthenticatedRequest  (optional)
     * @return PrivateUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users/#update-the-authenticated-user">Update the authenticated user Documentation</a>
     */
    public PrivateUser usersUpdateAuthenticated(UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest) throws ApiException {
        ApiResponse<PrivateUser> localVarResp = usersUpdateAuthenticatedWithHttpInfo(usersUpdateAuthenticatedRequest);
        return localVarResp.getData();
    }

    /**
     * Update the authenticated user
     * **Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     * @param usersUpdateAuthenticatedRequest  (optional)
     * @return ApiResponse&lt;PrivateUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users/#update-the-authenticated-user">Update the authenticated user Documentation</a>
     */
    public ApiResponse<PrivateUser> usersUpdateAuthenticatedWithHttpInfo(UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateAuthenticatedValidateBeforeCall(usersUpdateAuthenticatedRequest, null);
        Type localVarReturnType = new TypeToken<PrivateUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the authenticated user (asynchronously)
     * **Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     * @param usersUpdateAuthenticatedRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/users/#update-the-authenticated-user">Update the authenticated user Documentation</a>
     */
    public okhttp3.Call usersUpdateAuthenticatedAsync(UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest, final ApiCallback<PrivateUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateAuthenticatedValidateBeforeCall(usersUpdateAuthenticatedRequest, _callback);
        Type localVarReturnType = new TypeToken<PrivateUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
