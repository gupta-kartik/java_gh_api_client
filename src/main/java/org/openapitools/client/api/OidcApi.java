/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.OidcCustomSub;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OidcApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OidcApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OidcApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for oidcGetOidcCustomSubTemplateForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON serialized template for OIDC subject claim customization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Get the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public okhttp3.Call oidcGetOidcCustomSubTemplateForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/oidc/customization/sub"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oidcGetOidcCustomSubTemplateForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling oidcGetOidcCustomSubTemplateForOrg(Async)");
        }

        return oidcGetOidcCustomSubTemplateForOrgCall(org, _callback);

    }

    /**
     * Get the customization template for an OIDC subject claim for an organization
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:write&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return OidcCustomSub
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON serialized template for OIDC subject claim customization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Get the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public OidcCustomSub oidcGetOidcCustomSubTemplateForOrg(String org) throws ApiException {
        ApiResponse<OidcCustomSub> localVarResp = oidcGetOidcCustomSubTemplateForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get the customization template for an OIDC subject claim for an organization
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:write&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;OidcCustomSub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON serialized template for OIDC subject claim customization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Get the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public ApiResponse<OidcCustomSub> oidcGetOidcCustomSubTemplateForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = oidcGetOidcCustomSubTemplateForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<OidcCustomSub>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customization template for an OIDC subject claim for an organization (asynchronously)
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:write&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON serialized template for OIDC subject claim customization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Get the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public okhttp3.Call oidcGetOidcCustomSubTemplateForOrgAsync(String org, final ApiCallback<OidcCustomSub> _callback) throws ApiException {

        okhttp3.Call localVarCall = oidcGetOidcCustomSubTemplateForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<OidcCustomSub>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oidcUpdateOidcCustomSubTemplateForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param oidcCustomSub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Set the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public okhttp3.Call oidcUpdateOidcCustomSubTemplateForOrgCall(String org, OidcCustomSub oidcCustomSub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oidcCustomSub;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/oidc/customization/sub"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oidcUpdateOidcCustomSubTemplateForOrgValidateBeforeCall(String org, OidcCustomSub oidcCustomSub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling oidcUpdateOidcCustomSubTemplateForOrg(Async)");
        }

        // verify the required parameter 'oidcCustomSub' is set
        if (oidcCustomSub == null) {
            throw new ApiException("Missing the required parameter 'oidcCustomSub' when calling oidcUpdateOidcCustomSubTemplateForOrg(Async)");
        }

        return oidcUpdateOidcCustomSubTemplateForOrgCall(org, oidcCustomSub, _callback);

    }

    /**
     * Set the customization template for an OIDC subject claim for an organization
     * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;write:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;admin:org&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param oidcCustomSub  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Set the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public Object oidcUpdateOidcCustomSubTemplateForOrg(String org, OidcCustomSub oidcCustomSub) throws ApiException {
        ApiResponse<Object> localVarResp = oidcUpdateOidcCustomSubTemplateForOrgWithHttpInfo(org, oidcCustomSub);
        return localVarResp.getData();
    }

    /**
     * Set the customization template for an OIDC subject claim for an organization
     * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;write:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;admin:org&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param oidcCustomSub  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Set the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public ApiResponse<Object> oidcUpdateOidcCustomSubTemplateForOrgWithHttpInfo(String org, OidcCustomSub oidcCustomSub) throws ApiException {
        okhttp3.Call localVarCall = oidcUpdateOidcCustomSubTemplateForOrgValidateBeforeCall(org, oidcCustomSub, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the customization template for an OIDC subject claim for an organization (asynchronously)
     * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;write:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;admin:org&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param oidcCustomSub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization">Set the customization template for an OIDC subject claim for an organization Documentation</a>
     */
    public okhttp3.Call oidcUpdateOidcCustomSubTemplateForOrgAsync(String org, OidcCustomSub oidcCustomSub, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = oidcUpdateOidcCustomSubTemplateForOrgValidateBeforeCall(org, oidcCustomSub, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
