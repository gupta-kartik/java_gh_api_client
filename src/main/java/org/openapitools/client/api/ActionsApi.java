/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;
import org.openapitools.client.model.ActionsCacheList;
import org.openapitools.client.model.ActionsCacheUsageByRepository;
import org.openapitools.client.model.ActionsCacheUsageOrgEnterprise;
import org.openapitools.client.model.ActionsCreateOrUpdateEnvironmentSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateOrgSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateRepoSecretRequest;
import org.openapitools.client.model.ActionsCreateOrgVariableRequest;
import org.openapitools.client.model.ActionsCreateRepoVariableRequest;
import org.openapitools.client.model.ActionsCreateRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsCreateWorkflowDispatchRequest;
import org.openapitools.client.model.ActionsGetActionsCacheUsageByRepoForOrg200Response;
import org.openapitools.client.model.ActionsGetDefaultWorkflowPermissions;
import org.openapitools.client.model.ActionsGetWorkflowWorkflowIdParameter;
import org.openapitools.client.model.ActionsListArtifactsForRepo200Response;
import org.openapitools.client.model.ActionsListJobsForWorkflowRunAttempt200Response;
import org.openapitools.client.model.ActionsListLabelsForSelfHostedRunnerForOrg200Response;
import org.openapitools.client.model.ActionsListOrgSecrets200Response;
import org.openapitools.client.model.ActionsListOrgVariables200Response;
import org.openapitools.client.model.ActionsListRepoOrganizationSecrets200Response;
import org.openapitools.client.model.ActionsListRepoOrganizationVariables200Response;
import org.openapitools.client.model.ActionsListRepoRequiredWorkflows200Response;
import org.openapitools.client.model.ActionsListRepoWorkflows200Response;
import org.openapitools.client.model.ActionsListRequiredWorkflowRuns200Response;
import org.openapitools.client.model.ActionsListRequiredWorkflows200Response;
import org.openapitools.client.model.ActionsListSelectedReposForOrgSecret200Response;
import org.openapitools.client.model.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnersForOrg200Response;
import org.openapitools.client.model.ActionsOIDCSubjectCustomizationForARepository;
import org.openapitools.client.model.ActionsOrganizationPermissions;
import org.openapitools.client.model.ActionsPublicKey;
import org.openapitools.client.model.ActionsReRunJobForWorkflowRunRequest;
import org.openapitools.client.model.ActionsRepositoryPermissions;
import org.openapitools.client.model.ActionsReviewCustomGatesForRunRequest;
import org.openapitools.client.model.ActionsReviewPendingDeploymentsForRunRequest;
import org.openapitools.client.model.ActionsSecret;
import org.openapitools.client.model.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;
import org.openapitools.client.model.ActionsSetDefaultWorkflowPermissions;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsOrganizationRequest;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsRepositoryRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgSecretRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgVariableRequest;
import org.openapitools.client.model.ActionsSetSelectedReposToRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
import org.openapitools.client.model.ActionsUpdateOrgVariableRequest;
import org.openapitools.client.model.ActionsUpdateRepoVariableRequest;
import org.openapitools.client.model.ActionsUpdateRequiredWorkflowRequest;
import org.openapitools.client.model.ActionsVariable;
import org.openapitools.client.model.ActionsWorkflowAccessToRepository;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.AuthenticationToken;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.EnvironmentApprovals;
import org.openapitools.client.model.Job;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OidcCustomSubRepo;
import org.openapitools.client.model.OrganizationActionsSecret;
import org.openapitools.client.model.OrganizationActionsVariable;
import org.openapitools.client.model.PendingDeployment;
import org.openapitools.client.model.RepoRequiredWorkflow;
import org.openapitools.client.model.RequiredWorkflow;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerApplication;
import org.openapitools.client.model.ScimError;
import org.openapitools.client.model.SelectedActions;
import org.openapitools.client.model.ValidationErrorSimple;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowRun;
import org.openapitools.client.model.WorkflowRunUsage;
import org.openapitools.client.model.WorkflowUsage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionsAddCustomLabelsToSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization">Add custom labels to a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForOrgCall(String org, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' is set
        if (actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg(Async)");
        }

        return actionsAddCustomLabelsToSelfHostedRunnerForOrgCall(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, _callback);

    }

    /**
     * Add custom labels to a self-hosted runner for an organization
     * Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization">Add custom labels to a self-hosted runner for an organization Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsAddCustomLabelsToSelfHostedRunnerForOrg(String org, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsAddCustomLabelsToSelfHostedRunnerForOrgWithHttpInfo(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Add custom labels to a self-hosted runner for an organization
     * Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization">Add custom labels to a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsAddCustomLabelsToSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsAddCustomLabelsToSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add custom labels to a self-hosted runner for an organization (asynchronously)
     * Add custom labels to a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization">Add custom labels to a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForOrgAsync(String org, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddCustomLabelsToSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddCustomLabelsToSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository">Add custom labels to a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' is set
        if (actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo(Async)");
        }

        return actionsAddCustomLabelsToSelfHostedRunnerForRepoCall(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, _callback);

    }

    /**
     * Add custom labels to a self-hosted runner for a repository
     * Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository">Add custom labels to a self-hosted runner for a repository Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsAddCustomLabelsToSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsAddCustomLabelsToSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Add custom labels to a self-hosted runner for a repository
     * Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository">Add custom labels to a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsAddCustomLabelsToSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsAddCustomLabelsToSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add custom labels to a self-hosted runner for a repository (asynchronously)
     * Add custom labels to a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository">Add custom labels to a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsAddCustomLabelsToSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddCustomLabelsToSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddSelectedRepoToOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddSelectedRepoToOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        return actionsAddSelectedRepoToOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public void actionsAddSelectedRepoToOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        actionsAddSelectedRepoToOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsAddSelectedRepoToOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add selected repository to an organization secret (asynchronously)
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddSelectedRepoToOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable">Add selected repository to an organization variable Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgVariableCall(String org, String name, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddSelectedRepoToOrgVariableValidateBeforeCall(String org, String name, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsAddSelectedRepoToOrgVariable(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgVariable(Async)");
        }

        return actionsAddSelectedRepoToOrgVariableCall(org, name, repositoryId, _callback);

    }

    /**
     * Add selected repository to an organization variable
     * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable">Add selected repository to an organization variable Documentation</a>
     */
    public void actionsAddSelectedRepoToOrgVariable(String org, String name, Integer repositoryId) throws ApiException {
        actionsAddSelectedRepoToOrgVariableWithHttpInfo(org, name, repositoryId);
    }

    /**
     * Add selected repository to an organization variable
     * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable">Add selected repository to an organization variable Documentation</a>
     */
    public ApiResponse<Void> actionsAddSelectedRepoToOrgVariableWithHttpInfo(String org, String name, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgVariableValidateBeforeCall(org, name, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add selected repository to an organization variable (asynchronously)
     * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable">Add selected repository to an organization variable Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgVariableAsync(String org, String name, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgVariableValidateBeforeCall(org, name, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddSelectedRepoToRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow">Add a repository to a required workflow Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToRequiredWorkflowCall(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddSelectedRepoToRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddSelectedRepoToRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsAddSelectedRepoToRequiredWorkflow(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToRequiredWorkflow(Async)");
        }

        return actionsAddSelectedRepoToRequiredWorkflowCall(org, requiredWorkflowId, repositoryId, _callback);

    }

    /**
     * Add a repository to a required workflow
     * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow">Add a repository to a required workflow Documentation</a>
     */
    public void actionsAddSelectedRepoToRequiredWorkflow(String org, Integer requiredWorkflowId, Integer repositoryId) throws ApiException {
        actionsAddSelectedRepoToRequiredWorkflowWithHttpInfo(org, requiredWorkflowId, repositoryId);
    }

    /**
     * Add a repository to a required workflow
     * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow">Add a repository to a required workflow Documentation</a>
     */
    public ApiResponse<Void> actionsAddSelectedRepoToRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddSelectedRepoToRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a repository to a required workflow (asynchronously)
     * Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow">Add a repository to a required workflow Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToRequiredWorkflowAsync(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddSelectedRepoToRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsApproveWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request">Approve a workflow run for a fork pull request Documentation</a>
     */
    public okhttp3.Call actionsApproveWorkflowRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/approve"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsApproveWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsApproveWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsApproveWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsApproveWorkflowRun(Async)");
        }

        return actionsApproveWorkflowRunCall(owner, repo, runId, _callback);

    }

    /**
     * Approve a workflow run for a fork pull request
     * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request">Approve a workflow run for a fork pull request Documentation</a>
     */
    public Object actionsApproveWorkflowRun(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<Object> localVarResp = actionsApproveWorkflowRunWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Approve a workflow run for a fork pull request
     * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request">Approve a workflow run for a fork pull request Documentation</a>
     */
    public ApiResponse<Object> actionsApproveWorkflowRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsApproveWorkflowRunValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve a workflow run for a fork pull request (asynchronously)
     * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request">Approve a workflow run for a fork pull request Documentation</a>
     */
    public okhttp3.Call actionsApproveWorkflowRunAsync(String owner, String repo, Integer runId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsApproveWorkflowRunValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCancelWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public okhttp3.Call actionsCancelWorkflowRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCancelWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCancelWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCancelWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsCancelWorkflowRun(Async)");
        }

        return actionsCancelWorkflowRunCall(owner, repo, runId, _callback);

    }

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public Object actionsCancelWorkflowRun(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCancelWorkflowRunWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public ApiResponse<Object> actionsCancelWorkflowRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsCancelWorkflowRunValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a workflow run (asynchronously)
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public okhttp3.Call actionsCancelWorkflowRunAsync(String owner, String repo, Integer runId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCancelWorkflowRunValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateEnvironmentVariable
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-environment-variable">Create an environment variable Documentation</a>
     */
    public okhttp3.Call actionsCreateEnvironmentVariableCall(Integer repositoryId, String environmentName, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateRepoVariableRequest;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/variables"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateEnvironmentVariableValidateBeforeCall(Integer repositoryId, String environmentName, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsCreateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsCreateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'actionsCreateRepoVariableRequest' is set
        if (actionsCreateRepoVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateRepoVariableRequest' when calling actionsCreateEnvironmentVariable(Async)");
        }

        return actionsCreateEnvironmentVariableCall(repositoryId, environmentName, actionsCreateRepoVariableRequest, _callback);

    }

    /**
     * Create an environment variable
     * Create an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-environment-variable">Create an environment variable Documentation</a>
     */
    public Object actionsCreateEnvironmentVariable(Integer repositoryId, String environmentName, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateEnvironmentVariableWithHttpInfo(repositoryId, environmentName, actionsCreateRepoVariableRequest);
        return localVarResp.getData();
    }

    /**
     * Create an environment variable
     * Create an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-environment-variable">Create an environment variable Documentation</a>
     */
    public ApiResponse<Object> actionsCreateEnvironmentVariableWithHttpInfo(Integer repositoryId, String environmentName, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateEnvironmentVariableValidateBeforeCall(repositoryId, environmentName, actionsCreateRepoVariableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an environment variable (asynchronously)
     * Create an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-environment-variable">Create an environment variable Documentation</a>
     */
    public okhttp3.Call actionsCreateEnvironmentVariableAsync(Integer repositoryId, String environmentName, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateEnvironmentVariableValidateBeforeCall(repositoryId, environmentName, actionsCreateRepoVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrUpdateEnvironmentSecret
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateEnvironmentSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret">Create or update an environment secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateEnvironmentSecretCall(Integer repositoryId, String environmentName, String secretName, ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrUpdateEnvironmentSecretRequest;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrUpdateEnvironmentSecretValidateBeforeCall(Integer repositoryId, String environmentName, String secretName, ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsCreateOrUpdateEnvironmentSecret(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsCreateOrUpdateEnvironmentSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateEnvironmentSecret(Async)");
        }

        // verify the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' is set
        if (actionsCreateOrUpdateEnvironmentSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' when calling actionsCreateOrUpdateEnvironmentSecret(Async)");
        }

        return actionsCreateOrUpdateEnvironmentSecretCall(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest, _callback);

    }

    /**
     * Create or update an environment secret
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateEnvironmentSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret">Create or update an environment secret Documentation</a>
     */
    public Object actionsCreateOrUpdateEnvironmentSecret(Integer repositoryId, String environmentName, String secretName, ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrUpdateEnvironmentSecretWithHttpInfo(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update an environment secret
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateEnvironmentSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret">Create or update an environment secret Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrUpdateEnvironmentSecretWithHttpInfo(Integer repositoryId, String environmentName, String secretName, ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrUpdateEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an environment secret (asynchronously)
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateEnvironmentSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret">Create or update an environment secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateEnvironmentSecretAsync(Integer repositoryId, String environmentName, String secretName, ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrUpdateEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrUpdateOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateOrgSecretCall(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrUpdateOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrUpdateOrgSecretValidateBeforeCall(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'actionsCreateOrUpdateOrgSecretRequest' is set
        if (actionsCreateOrUpdateOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrUpdateOrgSecretRequest' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        return actionsCreateOrUpdateOrgSecretCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, _callback);

    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public Object actionsCreateOrUpdateOrgSecret(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrUpdateOrgSecretWithHttpInfo(org, secretName, actionsCreateOrUpdateOrgSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrUpdateOrgSecretWithHttpInfo(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an organization secret (asynchronously)
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateOrgSecretAsync(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrUpdateRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateRepoSecretCall(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrUpdateRepoSecretRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrUpdateRepoSecretValidateBeforeCall(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'actionsCreateOrUpdateRepoSecretRequest' is set
        if (actionsCreateOrUpdateRepoSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrUpdateRepoSecretRequest' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        return actionsCreateOrUpdateRepoSecretCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, _callback);

    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public Object actionsCreateOrUpdateRepoSecret(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrUpdateRepoSecretWithHttpInfo(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrUpdateRepoSecretWithHttpInfo(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a repository secret (asynchronously)
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateRepoSecretAsync(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateOrgVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a variable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-organization-variable">Create an organization variable Documentation</a>
     */
    public okhttp3.Call actionsCreateOrgVariableCall(String org, ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrgVariableRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrgVariableValidateBeforeCall(String org, ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateOrgVariable(Async)");
        }

        // verify the required parameter 'actionsCreateOrgVariableRequest' is set
        if (actionsCreateOrgVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrgVariableRequest' when calling actionsCreateOrgVariable(Async)");
        }

        return actionsCreateOrgVariableCall(org, actionsCreateOrgVariableRequest, _callback);

    }

    /**
     * Create an organization variable
     * Creates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateOrgVariableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a variable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-organization-variable">Create an organization variable Documentation</a>
     */
    public Object actionsCreateOrgVariable(String org, ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrgVariableWithHttpInfo(org, actionsCreateOrgVariableRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization variable
     * Creates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateOrgVariableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a variable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-organization-variable">Create an organization variable Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrgVariableWithHttpInfo(String org, ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrgVariableValidateBeforeCall(org, actionsCreateOrgVariableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization variable (asynchronously)
     * Creates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateOrgVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a variable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-an-organization-variable">Create an organization variable Documentation</a>
     */
    public okhttp3.Call actionsCreateOrgVariableAsync(String org, ActionsCreateOrgVariableRequest actionsCreateOrgVariableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrgVariableValidateBeforeCall(org, actionsCreateOrgVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRegistrationTokenForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/registration-token"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRegistrationTokenForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateRegistrationTokenForOrg(Async)");
        }

        return actionsCreateRegistrationTokenForOrgCall(org, _callback);

    }

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public AuthenticationToken actionsCreateRegistrationTokenForOrg(String org) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRegistrationTokenForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRegistrationTokenForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a registration token for an organization (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForOrgAsync(String org, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRegistrationTokenForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/registration-token"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRegistrationTokenForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateRegistrationTokenForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateRegistrationTokenForRepo(Async)");
        }

        return actionsCreateRegistrationTokenForRepoCall(owner, repo, _callback);

    }

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public AuthenticationToken actionsCreateRegistrationTokenForRepo(String owner, String repo) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRegistrationTokenForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRegistrationTokenForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a registration token for a repository (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForRepoAsync(String owner, String repo, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRemoveTokenForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/remove-token"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRemoveTokenForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateRemoveTokenForOrg(Async)");
        }

        return actionsCreateRemoveTokenForOrgCall(org, _callback);

    }

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public AuthenticationToken actionsCreateRemoveTokenForOrg(String org) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRemoveTokenForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRemoveTokenForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRemoveTokenForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a remove token for an organization (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForOrgAsync(String org, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRemoveTokenForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRemoveTokenForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/remove-token"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRemoveTokenForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateRemoveTokenForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateRemoveTokenForRepo(Async)");
        }

        return actionsCreateRemoveTokenForRepoCall(owner, repo, _callback);

    }

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public AuthenticationToken actionsCreateRemoveTokenForRepo(String owner, String repo) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRemoveTokenForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRemoveTokenForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRemoveTokenForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a remove token for a repository (asynchronously)
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForRepoAsync(String owner, String repo, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRemoveTokenForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRepoVariable
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-a-repository-variable">Create a repository variable Documentation</a>
     */
    public okhttp3.Call actionsCreateRepoVariableCall(String owner, String repo, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateRepoVariableRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/variables"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRepoVariableValidateBeforeCall(String owner, String repo, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateRepoVariable(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateRepoVariable(Async)");
        }

        // verify the required parameter 'actionsCreateRepoVariableRequest' is set
        if (actionsCreateRepoVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateRepoVariableRequest' when calling actionsCreateRepoVariable(Async)");
        }

        return actionsCreateRepoVariableCall(owner, repo, actionsCreateRepoVariableRequest, _callback);

    }

    /**
     * Create a repository variable
     * Creates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-a-repository-variable">Create a repository variable Documentation</a>
     */
    public Object actionsCreateRepoVariable(String owner, String repo, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateRepoVariableWithHttpInfo(owner, repo, actionsCreateRepoVariableRequest);
        return localVarResp.getData();
    }

    /**
     * Create a repository variable
     * Creates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-a-repository-variable">Create a repository variable Documentation</a>
     */
    public ApiResponse<Object> actionsCreateRepoVariableWithHttpInfo(String owner, String repo, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRepoVariableValidateBeforeCall(owner, repo, actionsCreateRepoVariableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository variable (asynchronously)
     * Creates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsCreateRepoVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#create-a-repository-variable">Create a repository variable Documentation</a>
     */
    public okhttp3.Call actionsCreateRepoVariableAsync(String owner, String repo, ActionsCreateRepoVariableRequest actionsCreateRepoVariableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRepoVariableValidateBeforeCall(owner, repo, actionsCreateRepoVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateRequiredWorkflowRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-required-workflow">Create a required workflow Documentation</a>
     */
    public okhttp3.Call actionsCreateRequiredWorkflowCall(String org, ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateRequiredWorkflowRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRequiredWorkflowValidateBeforeCall(String org, ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateRequiredWorkflow(Async)");
        }

        // verify the required parameter 'actionsCreateRequiredWorkflowRequest' is set
        if (actionsCreateRequiredWorkflowRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateRequiredWorkflowRequest' when calling actionsCreateRequiredWorkflow(Async)");
        }

        return actionsCreateRequiredWorkflowCall(org, actionsCreateRequiredWorkflowRequest, _callback);

    }

    /**
     * Create a required workflow
     * Create a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateRequiredWorkflowRequest  (required)
     * @return RequiredWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-required-workflow">Create a required workflow Documentation</a>
     */
    public RequiredWorkflow actionsCreateRequiredWorkflow(String org, ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest) throws ApiException {
        ApiResponse<RequiredWorkflow> localVarResp = actionsCreateRequiredWorkflowWithHttpInfo(org, actionsCreateRequiredWorkflowRequest);
        return localVarResp.getData();
    }

    /**
     * Create a required workflow
     * Create a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateRequiredWorkflowRequest  (required)
     * @return ApiResponse&lt;RequiredWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-required-workflow">Create a required workflow Documentation</a>
     */
    public ApiResponse<RequiredWorkflow> actionsCreateRequiredWorkflowWithHttpInfo(String org, ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRequiredWorkflowValidateBeforeCall(org, actionsCreateRequiredWorkflowRequest, null);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a required workflow (asynchronously)
     * Create a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateRequiredWorkflowRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-required-workflow">Create a required workflow Documentation</a>
     */
    public okhttp3.Call actionsCreateRequiredWorkflowAsync(String org, ActionsCreateRequiredWorkflowRequest actionsCreateRequiredWorkflowRequest, final ApiCallback<RequiredWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRequiredWorkflowValidateBeforeCall(org, actionsCreateRequiredWorkflowRequest, _callback);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateWorkflowDispatch
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public okhttp3.Call actionsCreateWorkflowDispatchCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateWorkflowDispatchRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateWorkflowDispatchValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'actionsCreateWorkflowDispatchRequest' is set
        if (actionsCreateWorkflowDispatchRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateWorkflowDispatchRequest' when calling actionsCreateWorkflowDispatch(Async)");
        }

        return actionsCreateWorkflowDispatchCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, _callback);

    }

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public void actionsCreateWorkflowDispatch(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest) throws ApiException {
        actionsCreateWorkflowDispatchWithHttpInfo(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest);
    }

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public ApiResponse<Void> actionsCreateWorkflowDispatchWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateWorkflowDispatchValidateBeforeCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a workflow dispatch event (asynchronously)
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public okhttp3.Call actionsCreateWorkflowDispatchAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateWorkflowDispatchValidateBeforeCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteActionsCacheById
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param cacheId The unique identifier of the GitHub Actions cache. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id">Delete a GitHub Actions cache for a repository (using a cache ID) Documentation</a>
     */
    public okhttp3.Call actionsDeleteActionsCacheByIdCall(String owner, String repo, Integer cacheId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/caches/{cache_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "cache_id" + "}", localVarApiClient.escapeString(cacheId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteActionsCacheByIdValidateBeforeCall(String owner, String repo, Integer cacheId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteActionsCacheById(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteActionsCacheById(Async)");
        }

        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling actionsDeleteActionsCacheById(Async)");
        }

        return actionsDeleteActionsCacheByIdCall(owner, repo, cacheId, _callback);

    }

    /**
     * Delete a GitHub Actions cache for a repository (using a cache ID)
     * Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param cacheId The unique identifier of the GitHub Actions cache. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id">Delete a GitHub Actions cache for a repository (using a cache ID) Documentation</a>
     */
    public void actionsDeleteActionsCacheById(String owner, String repo, Integer cacheId) throws ApiException {
        actionsDeleteActionsCacheByIdWithHttpInfo(owner, repo, cacheId);
    }

    /**
     * Delete a GitHub Actions cache for a repository (using a cache ID)
     * Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param cacheId The unique identifier of the GitHub Actions cache. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id">Delete a GitHub Actions cache for a repository (using a cache ID) Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteActionsCacheByIdWithHttpInfo(String owner, String repo, Integer cacheId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteActionsCacheByIdValidateBeforeCall(owner, repo, cacheId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a GitHub Actions cache for a repository (using a cache ID) (asynchronously)
     * Deletes a GitHub Actions cache for a repository, using a cache ID.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param cacheId The unique identifier of the GitHub Actions cache. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id">Delete a GitHub Actions cache for a repository (using a cache ID) Documentation</a>
     */
    public okhttp3.Call actionsDeleteActionsCacheByIdAsync(String owner, String repo, Integer cacheId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteActionsCacheByIdValidateBeforeCall(owner, repo, cacheId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteActionsCacheByKey
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param key A key for identifying the cache. (required)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key">Delete GitHub Actions caches for a repository (using a cache key) Documentation</a>
     */
    public okhttp3.Call actionsDeleteActionsCacheByKeyCall(String owner, String repo, String key, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/caches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteActionsCacheByKeyValidateBeforeCall(String owner, String repo, String key, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteActionsCacheByKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteActionsCacheByKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling actionsDeleteActionsCacheByKey(Async)");
        }

        return actionsDeleteActionsCacheByKeyCall(owner, repo, key, ref, _callback);

    }

    /**
     * Delete GitHub Actions caches for a repository (using a cache key)
     * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param key A key for identifying the cache. (required)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @return ActionsCacheList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key">Delete GitHub Actions caches for a repository (using a cache key) Documentation</a>
     */
    public ActionsCacheList actionsDeleteActionsCacheByKey(String owner, String repo, String key, String ref) throws ApiException {
        ApiResponse<ActionsCacheList> localVarResp = actionsDeleteActionsCacheByKeyWithHttpInfo(owner, repo, key, ref);
        return localVarResp.getData();
    }

    /**
     * Delete GitHub Actions caches for a repository (using a cache key)
     * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param key A key for identifying the cache. (required)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @return ApiResponse&lt;ActionsCacheList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key">Delete GitHub Actions caches for a repository (using a cache key) Documentation</a>
     */
    public ApiResponse<ActionsCacheList> actionsDeleteActionsCacheByKeyWithHttpInfo(String owner, String repo, String key, String ref) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteActionsCacheByKeyValidateBeforeCall(owner, repo, key, ref, null);
        Type localVarReturnType = new TypeToken<ActionsCacheList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete GitHub Actions caches for a repository (using a cache key) (asynchronously)
     * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param key A key for identifying the cache. (required)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key">Delete GitHub Actions caches for a repository (using a cache key) Documentation</a>
     */
    public okhttp3.Call actionsDeleteActionsCacheByKeyAsync(String owner, String repo, String key, String ref, final ApiCallback<ActionsCacheList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteActionsCacheByKeyValidateBeforeCall(owner, repo, key, ref, _callback);
        Type localVarReturnType = new TypeToken<ActionsCacheList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public okhttp3.Call actionsDeleteArtifactCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsDeleteArtifact(Async)");
        }

        return actionsDeleteArtifactCall(owner, repo, artifactId, _callback);

    }

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public void actionsDeleteArtifact(String owner, String repo, Integer artifactId) throws ApiException {
        actionsDeleteArtifactWithHttpInfo(owner, repo, artifactId);
    }

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteArtifactWithHttpInfo(String owner, String repo, Integer artifactId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteArtifactValidateBeforeCall(owner, repo, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an artifact (asynchronously)
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public okhttp3.Call actionsDeleteArtifactAsync(String owner, String repo, Integer artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteArtifactValidateBeforeCall(owner, repo, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteEnvironmentSecret
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-environment-secret">Delete an environment secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteEnvironmentSecretCall(Integer repositoryId, String environmentName, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteEnvironmentSecretValidateBeforeCall(Integer repositoryId, String environmentName, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsDeleteEnvironmentSecret(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsDeleteEnvironmentSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsDeleteEnvironmentSecret(Async)");
        }

        return actionsDeleteEnvironmentSecretCall(repositoryId, environmentName, secretName, _callback);

    }

    /**
     * Delete an environment secret
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-environment-secret">Delete an environment secret Documentation</a>
     */
    public void actionsDeleteEnvironmentSecret(Integer repositoryId, String environmentName, String secretName) throws ApiException {
        actionsDeleteEnvironmentSecretWithHttpInfo(repositoryId, environmentName, secretName);
    }

    /**
     * Delete an environment secret
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-environment-secret">Delete an environment secret Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteEnvironmentSecretWithHttpInfo(Integer repositoryId, String environmentName, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an environment secret (asynchronously)
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-environment-secret">Delete an environment secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteEnvironmentSecretAsync(Integer repositoryId, String environmentName, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteEnvironmentVariable
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-environment-variable">Delete an environment variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteEnvironmentVariableCall(Integer repositoryId, String name, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/variables/{name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteEnvironmentVariableValidateBeforeCall(Integer repositoryId, String name, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsDeleteEnvironmentVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsDeleteEnvironmentVariable(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsDeleteEnvironmentVariable(Async)");
        }

        return actionsDeleteEnvironmentVariableCall(repositoryId, name, environmentName, _callback);

    }

    /**
     * Delete an environment variable
     * Deletes an environment variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-environment-variable">Delete an environment variable Documentation</a>
     */
    public void actionsDeleteEnvironmentVariable(Integer repositoryId, String name, String environmentName) throws ApiException {
        actionsDeleteEnvironmentVariableWithHttpInfo(repositoryId, name, environmentName);
    }

    /**
     * Delete an environment variable
     * Deletes an environment variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-environment-variable">Delete an environment variable Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteEnvironmentVariableWithHttpInfo(Integer repositoryId, String name, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteEnvironmentVariableValidateBeforeCall(repositoryId, name, environmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an environment variable (asynchronously)
     * Deletes an environment variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-environment-variable">Delete an environment variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteEnvironmentVariableAsync(Integer repositoryId, String name, String environmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteEnvironmentVariableValidateBeforeCall(repositoryId, name, environmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsDeleteOrgSecret(Async)");
        }

        return actionsDeleteOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public void actionsDeleteOrgSecret(String org, String secretName) throws ApiException {
        actionsDeleteOrgSecretWithHttpInfo(org, secretName);
    }

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteOrgSecretValidateBeforeCall(org, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization secret (asynchronously)
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgSecretAsync(String org, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteOrgSecretValidateBeforeCall(org, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-organization-variable">Delete an organization variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgVariableCall(String org, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteOrgVariableValidateBeforeCall(String org, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsDeleteOrgVariable(Async)");
        }

        return actionsDeleteOrgVariableCall(org, name, _callback);

    }

    /**
     * Delete an organization variable
     * Deletes an organization variable using the variable name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-organization-variable">Delete an organization variable Documentation</a>
     */
    public void actionsDeleteOrgVariable(String org, String name) throws ApiException {
        actionsDeleteOrgVariableWithHttpInfo(org, name);
    }

    /**
     * Delete an organization variable
     * Deletes an organization variable using the variable name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-organization-variable">Delete an organization variable Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteOrgVariableWithHttpInfo(String org, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteOrgVariableValidateBeforeCall(org, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization variable (asynchronously)
     * Deletes an organization variable using the variable name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-an-organization-variable">Delete an organization variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgVariableAsync(String org, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteOrgVariableValidateBeforeCall(org, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsDeleteRepoSecret(Async)");
        }

        return actionsDeleteRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public void actionsDeleteRepoSecret(String owner, String repo, String secretName) throws ApiException {
        actionsDeleteRepoSecretWithHttpInfo(owner, repo, secretName);
    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository secret (asynchronously)
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteRepoVariable
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-a-repository-variable">Delete a repository variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoVariableCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/variables/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteRepoVariableValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteRepoVariable(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteRepoVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsDeleteRepoVariable(Async)");
        }

        return actionsDeleteRepoVariableCall(owner, repo, name, _callback);

    }

    /**
     * Delete a repository variable
     * Deletes a repository variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-a-repository-variable">Delete a repository variable Documentation</a>
     */
    public void actionsDeleteRepoVariable(String owner, String repo, String name) throws ApiException {
        actionsDeleteRepoVariableWithHttpInfo(owner, repo, name);
    }

    /**
     * Delete a repository variable
     * Deletes a repository variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-a-repository-variable">Delete a repository variable Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteRepoVariableWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteRepoVariableValidateBeforeCall(owner, repo, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository variable (asynchronously)
     * Deletes a repository variable using the variable name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#delete-a-repository-variable">Delete a repository variable Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoVariableAsync(String owner, String repo, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteRepoVariableValidateBeforeCall(owner, repo, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-required-workflow">Delete a required workflow Documentation</a>
     */
    public okhttp3.Call actionsDeleteRequiredWorkflowCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsDeleteRequiredWorkflow(Async)");
        }

        return actionsDeleteRequiredWorkflowCall(org, requiredWorkflowId, _callback);

    }

    /**
     * Delete a required workflow
     * Deletes a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-required-workflow">Delete a required workflow Documentation</a>
     */
    public void actionsDeleteRequiredWorkflow(String org, Integer requiredWorkflowId) throws ApiException {
        actionsDeleteRequiredWorkflowWithHttpInfo(org, requiredWorkflowId);
    }

    /**
     * Delete a required workflow
     * Deletes a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-required-workflow">Delete a required workflow Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a required workflow (asynchronously)
     * Deletes a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-required-workflow">Delete a required workflow Documentation</a>
     */
    public okhttp3.Call actionsDeleteRequiredWorkflowAsync(String org, Integer requiredWorkflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteSelfHostedRunnerFromOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerFromOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromOrg(Async)");
        }

        return actionsDeleteSelfHostedRunnerFromOrgCall(org, runnerId, _callback);

    }

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public void actionsDeleteSelfHostedRunnerFromOrg(String org, Integer runnerId) throws ApiException {
        actionsDeleteSelfHostedRunnerFromOrgWithHttpInfo(org, runnerId);
    }

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteSelfHostedRunnerFromOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(org, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner from an organization (asynchronously)
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgAsync(String org, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(org, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteSelfHostedRunnerFromRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        return actionsDeleteSelfHostedRunnerFromRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public void actionsDeleteSelfHostedRunnerFromRepo(String owner, String repo, Integer runnerId) throws ApiException {
        actionsDeleteSelfHostedRunnerFromRepoWithHttpInfo(owner, repo, runnerId);
    }

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteSelfHostedRunnerFromRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(owner, repo, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner from a repository (asynchronously)
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRun(Async)");
        }

        return actionsDeleteWorkflowRunCall(owner, repo, runId, _callback);

    }

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public void actionsDeleteWorkflowRun(String owner, String repo, Integer runId) throws ApiException {
        actionsDeleteWorkflowRunWithHttpInfo(owner, repo, runId);
    }

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteWorkflowRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteWorkflowRunValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a workflow run (asynchronously)
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteWorkflowRunValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteWorkflowRunLogs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunLogsCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteWorkflowRunLogsValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        return actionsDeleteWorkflowRunLogsCall(owner, repo, runId, _callback);

    }

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public void actionsDeleteWorkflowRunLogs(String owner, String repo, Integer runId) throws ApiException {
        actionsDeleteWorkflowRunLogsWithHttpInfo(owner, repo, runId);
    }

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteWorkflowRunLogsWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteWorkflowRunLogsValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete workflow run logs (asynchronously)
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunLogsAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteWorkflowRunLogsValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDisableSelectedRepositoryGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDisableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsDisableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        return actionsDisableSelectedRepositoryGithubActionsOrganizationCall(org, repositoryId, _callback);

    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public void actionsDisableSelectedRepositoryGithubActionsOrganization(String org, Integer repositoryId) throws ApiException {
        actionsDisableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(org, repositoryId);
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsDisableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(String org, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization (asynchronously)
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationAsync(String org, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDisableWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public okhttp3.Call actionsDisableWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDisableWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDisableWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDisableWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsDisableWorkflow(Async)");
        }

        return actionsDisableWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Disable a workflow
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public void actionsDisableWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        actionsDisableWorkflowWithHttpInfo(owner, repo, workflowId);
    }

    /**
     * Disable a workflow
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public ApiResponse<Void> actionsDisableWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsDisableWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable a workflow (asynchronously)
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public okhttp3.Call actionsDisableWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDisableWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public okhttp3.Call actionsDownloadArtifactCall(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()))
            .replace("{" + "archive_format" + "}", localVarApiClient.escapeString(archiveFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'archiveFormat' is set
        if (archiveFormat == null) {
            throw new ApiException("Missing the required parameter 'archiveFormat' when calling actionsDownloadArtifact(Async)");
        }

        return actionsDownloadArtifactCall(owner, repo, artifactId, archiveFormat, _callback);

    }

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public void actionsDownloadArtifact(String owner, String repo, Integer artifactId, String archiveFormat) throws ApiException {
        actionsDownloadArtifactWithHttpInfo(owner, repo, artifactId, archiveFormat);
    }

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadArtifactWithHttpInfo(String owner, String repo, Integer artifactId, String archiveFormat) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadArtifactValidateBeforeCall(owner, repo, artifactId, archiveFormat, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download an artifact (asynchronously)
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public okhttp3.Call actionsDownloadArtifactAsync(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadArtifactValidateBeforeCall(owner, repo, artifactId, archiveFormat, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadJobLogsForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDownloadJobLogsForWorkflowRunCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        return actionsDownloadJobLogsForWorkflowRunCall(owner, repo, jobId, _callback);

    }

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public void actionsDownloadJobLogsForWorkflowRun(String owner, String repo, Integer jobId) throws ApiException {
        actionsDownloadJobLogsForWorkflowRunWithHttpInfo(owner, repo, jobId);
    }

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadJobLogsForWorkflowRunWithHttpInfo(String owner, String repo, Integer jobId) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(owner, repo, jobId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download job logs for a workflow run (asynchronously)
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDownloadJobLogsForWorkflowRunAsync(String owner, String repo, Integer jobId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(owner, repo, jobId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadWorkflowRunAttemptLogs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs">Download workflow run attempt logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunAttemptLogsCall(String owner, String repo, Integer runId, Integer attemptNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()))
            .replace("{" + "attempt_number" + "}", localVarApiClient.escapeString(attemptNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadWorkflowRunAttemptLogsValidateBeforeCall(String owner, String repo, Integer runId, Integer attemptNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunAttemptLogs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunAttemptLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunAttemptLogs(Async)");
        }

        // verify the required parameter 'attemptNumber' is set
        if (attemptNumber == null) {
            throw new ApiException("Missing the required parameter 'attemptNumber' when calling actionsDownloadWorkflowRunAttemptLogs(Async)");
        }

        return actionsDownloadWorkflowRunAttemptLogsCall(owner, repo, runId, attemptNumber, _callback);

    }

    /**
     * Download workflow run attempt logs
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs">Download workflow run attempt logs Documentation</a>
     */
    public void actionsDownloadWorkflowRunAttemptLogs(String owner, String repo, Integer runId, Integer attemptNumber) throws ApiException {
        actionsDownloadWorkflowRunAttemptLogsWithHttpInfo(owner, repo, runId, attemptNumber);
    }

    /**
     * Download workflow run attempt logs
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs">Download workflow run attempt logs Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadWorkflowRunAttemptLogsWithHttpInfo(String owner, String repo, Integer runId, Integer attemptNumber) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadWorkflowRunAttemptLogsValidateBeforeCall(owner, repo, runId, attemptNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download workflow run attempt logs (asynchronously)
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs">Download workflow run attempt logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunAttemptLogsAsync(String owner, String repo, Integer runId, Integer attemptNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadWorkflowRunAttemptLogsValidateBeforeCall(owner, repo, runId, attemptNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadWorkflowRunLogs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunLogsCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadWorkflowRunLogsValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        return actionsDownloadWorkflowRunLogsCall(owner, repo, runId, _callback);

    }

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public void actionsDownloadWorkflowRunLogs(String owner, String repo, Integer runId) throws ApiException {
        actionsDownloadWorkflowRunLogsWithHttpInfo(owner, repo, runId);
    }

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadWorkflowRunLogsWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadWorkflowRunLogsValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download workflow run logs (asynchronously)
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunLogsAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadWorkflowRunLogsValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsEnableSelectedRepositoryGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsEnableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsEnableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        return actionsEnableSelectedRepositoryGithubActionsOrganizationCall(org, repositoryId, _callback);

    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public void actionsEnableSelectedRepositoryGithubActionsOrganization(String org, Integer repositoryId) throws ApiException {
        actionsEnableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(org, repositoryId);
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsEnableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(String org, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization (asynchronously)
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationAsync(String org, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsEnableWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public okhttp3.Call actionsEnableWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsEnableWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsEnableWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsEnableWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsEnableWorkflow(Async)");
        }

        return actionsEnableWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Enable a workflow
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public void actionsEnableWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        actionsEnableWorkflowWithHttpInfo(owner, repo, workflowId);
    }

    /**
     * Enable a workflow
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public ApiResponse<Void> actionsEnableWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsEnableWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a workflow (asynchronously)
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public okhttp3.Call actionsEnableWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsEnableWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetActionsCacheList
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param key An explicit key or prefix for identifying the cache (optional)
     * @param sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (optional, default to last_accessed_at)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository">List GitHub Actions caches for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheListCall(String owner, String repo, Integer perPage, Integer page, String ref, String key, String sort, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/caches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetActionsCacheListValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, String ref, String key, String sort, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetActionsCacheList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetActionsCacheList(Async)");
        }

        return actionsGetActionsCacheListCall(owner, repo, perPage, page, ref, key, sort, direction, _callback);

    }

    /**
     * List GitHub Actions caches for a repository
     * Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param key An explicit key or prefix for identifying the cache (optional)
     * @param sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (optional, default to last_accessed_at)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @return ActionsCacheList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository">List GitHub Actions caches for a repository Documentation</a>
     */
    public ActionsCacheList actionsGetActionsCacheList(String owner, String repo, Integer perPage, Integer page, String ref, String key, String sort, String direction) throws ApiException {
        ApiResponse<ActionsCacheList> localVarResp = actionsGetActionsCacheListWithHttpInfo(owner, repo, perPage, page, ref, key, sort, direction);
        return localVarResp.getData();
    }

    /**
     * List GitHub Actions caches for a repository
     * Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param key An explicit key or prefix for identifying the cache (optional)
     * @param sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (optional, default to last_accessed_at)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @return ApiResponse&lt;ActionsCacheList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository">List GitHub Actions caches for a repository Documentation</a>
     */
    public ApiResponse<ActionsCacheList> actionsGetActionsCacheListWithHttpInfo(String owner, String repo, Integer perPage, Integer page, String ref, String key, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = actionsGetActionsCacheListValidateBeforeCall(owner, repo, perPage, page, ref, key, sort, direction, null);
        Type localVarReturnType = new TypeToken<ActionsCacheList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GitHub Actions caches for a repository (asynchronously)
     * Lists the GitHub Actions caches for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param key An explicit key or prefix for identifying the cache (optional)
     * @param sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (optional, default to last_accessed_at)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository">List GitHub Actions caches for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheListAsync(String owner, String repo, Integer perPage, Integer page, String ref, String key, String sort, String direction, final ApiCallback<ActionsCacheList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetActionsCacheListValidateBeforeCall(owner, repo, perPage, page, ref, key, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<ActionsCacheList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetActionsCacheUsage
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository">Get GitHub Actions cache usage for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/cache/usage"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetActionsCacheUsageValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetActionsCacheUsage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetActionsCacheUsage(Async)");
        }

        return actionsGetActionsCacheUsageCall(owner, repo, _callback);

    }

    /**
     * Get GitHub Actions cache usage for a repository
     * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsCacheUsageByRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository">Get GitHub Actions cache usage for a repository Documentation</a>
     */
    public ActionsCacheUsageByRepository actionsGetActionsCacheUsage(String owner, String repo) throws ApiException {
        ApiResponse<ActionsCacheUsageByRepository> localVarResp = actionsGetActionsCacheUsageWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions cache usage for a repository
     * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsCacheUsageByRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository">Get GitHub Actions cache usage for a repository Documentation</a>
     */
    public ApiResponse<ActionsCacheUsageByRepository> actionsGetActionsCacheUsageWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetActionsCacheUsageValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsCacheUsageByRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions cache usage for a repository (asynchronously)
     * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository">Get GitHub Actions cache usage for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageAsync(String owner, String repo, final ApiCallback<ActionsCacheUsageByRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetActionsCacheUsageValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsCacheUsageByRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetActionsCacheUsageByRepoForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization">List repositories with GitHub Actions cache usage for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageByRepoForOrgCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/cache/usage-by-repository"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetActionsCacheUsageByRepoForOrgValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetActionsCacheUsageByRepoForOrg(Async)");
        }

        return actionsGetActionsCacheUsageByRepoForOrgCall(org, perPage, page, _callback);

    }

    /**
     * List repositories with GitHub Actions cache usage for an organization
     * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsGetActionsCacheUsageByRepoForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization">List repositories with GitHub Actions cache usage for an organization Documentation</a>
     */
    public ActionsGetActionsCacheUsageByRepoForOrg200Response actionsGetActionsCacheUsageByRepoForOrg(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsGetActionsCacheUsageByRepoForOrg200Response> localVarResp = actionsGetActionsCacheUsageByRepoForOrgWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories with GitHub Actions cache usage for an organization
     * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsGetActionsCacheUsageByRepoForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization">List repositories with GitHub Actions cache usage for an organization Documentation</a>
     */
    public ApiResponse<ActionsGetActionsCacheUsageByRepoForOrg200Response> actionsGetActionsCacheUsageByRepoForOrgWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsGetActionsCacheUsageByRepoForOrgValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsGetActionsCacheUsageByRepoForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories with GitHub Actions cache usage for an organization (asynchronously)
     * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization">List repositories with GitHub Actions cache usage for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageByRepoForOrgAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsGetActionsCacheUsageByRepoForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetActionsCacheUsageByRepoForOrgValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetActionsCacheUsageByRepoForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetActionsCacheUsageForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization">Get GitHub Actions cache usage for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/cache/usage"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetActionsCacheUsageForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetActionsCacheUsageForOrg(Async)");
        }

        return actionsGetActionsCacheUsageForOrgCall(org, _callback);

    }

    /**
     * Get GitHub Actions cache usage for an organization
     * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsCacheUsageOrgEnterprise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization">Get GitHub Actions cache usage for an organization Documentation</a>
     */
    public ActionsCacheUsageOrgEnterprise actionsGetActionsCacheUsageForOrg(String org) throws ApiException {
        ApiResponse<ActionsCacheUsageOrgEnterprise> localVarResp = actionsGetActionsCacheUsageForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions cache usage for an organization
     * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsCacheUsageOrgEnterprise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization">Get GitHub Actions cache usage for an organization Documentation</a>
     */
    public ApiResponse<ActionsCacheUsageOrgEnterprise> actionsGetActionsCacheUsageForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetActionsCacheUsageForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsCacheUsageOrgEnterprise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions cache usage for an organization (asynchronously)
     * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated. You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_admistration:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization">Get GitHub Actions cache usage for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetActionsCacheUsageForOrgAsync(String org, final ApiCallback<ActionsCacheUsageOrgEnterprise> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetActionsCacheUsageForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsCacheUsageOrgEnterprise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetAllowedActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions and reusable workflows for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsOrganizationCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/selected-actions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetAllowedActionsOrganizationValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetAllowedActionsOrganization(Async)");
        }

        return actionsGetAllowedActionsOrganizationCall(org, _callback);

    }

    /**
     * Get allowed actions and reusable workflows for an organization
     * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return SelectedActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions and reusable workflows for an organization Documentation</a>
     */
    public SelectedActions actionsGetAllowedActionsOrganization(String org) throws ApiException {
        ApiResponse<SelectedActions> localVarResp = actionsGetAllowedActionsOrganizationWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get allowed actions and reusable workflows for an organization
     * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;SelectedActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions and reusable workflows for an organization Documentation</a>
     */
    public ApiResponse<SelectedActions> actionsGetAllowedActionsOrganizationWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetAllowedActionsOrganizationValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed actions and reusable workflows for an organization (asynchronously)
     * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions and reusable workflows for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsOrganizationAsync(String org, final ApiCallback<SelectedActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetAllowedActionsOrganizationValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetAllowedActionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions and reusable workflows for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetAllowedActionsRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetAllowedActionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetAllowedActionsRepository(Async)");
        }

        return actionsGetAllowedActionsRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get allowed actions and reusable workflows for a repository
     * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return SelectedActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions and reusable workflows for a repository Documentation</a>
     */
    public SelectedActions actionsGetAllowedActionsRepository(String owner, String repo) throws ApiException {
        ApiResponse<SelectedActions> localVarResp = actionsGetAllowedActionsRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get allowed actions and reusable workflows for a repository
     * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;SelectedActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions and reusable workflows for a repository Documentation</a>
     */
    public ApiResponse<SelectedActions> actionsGetAllowedActionsRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetAllowedActionsRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed actions and reusable workflows for a repository (asynchronously)
     * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions and reusable workflows for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsRepositoryAsync(String owner, String repo, final ApiCallback<SelectedActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetAllowedActionsRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public okhttp3.Call actionsGetArtifactCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsGetArtifact(Async)");
        }

        return actionsGetArtifactCall(owner, repo, artifactId, _callback);

    }

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public Artifact actionsGetArtifact(String owner, String repo, Integer artifactId) throws ApiException {
        ApiResponse<Artifact> localVarResp = actionsGetArtifactWithHttpInfo(owner, repo, artifactId);
        return localVarResp.getData();
    }

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public ApiResponse<Artifact> actionsGetArtifactWithHttpInfo(String owner, String repo, Integer artifactId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetArtifactValidateBeforeCall(owner, repo, artifactId, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an artifact (asynchronously)
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public okhttp3.Call actionsGetArtifactAsync(String owner, String repo, Integer artifactId, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetArtifactValidateBeforeCall(owner, repo, artifactId, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetCustomOidcSubClaimForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Get the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetCustomOidcSubClaimForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/oidc/customization/sub"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetCustomOidcSubClaimForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetCustomOidcSubClaimForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetCustomOidcSubClaimForRepo(Async)");
        }

        return actionsGetCustomOidcSubClaimForRepoCall(owner, repo, _callback);

    }

    /**
     * Get the customization template for an OIDC subject claim for a repository
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return OidcCustomSubRepo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Get the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public OidcCustomSubRepo actionsGetCustomOidcSubClaimForRepo(String owner, String repo) throws ApiException {
        ApiResponse<OidcCustomSubRepo> localVarResp = actionsGetCustomOidcSubClaimForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the customization template for an OIDC subject claim for a repository
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;OidcCustomSubRepo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Get the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public ApiResponse<OidcCustomSubRepo> actionsGetCustomOidcSubClaimForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetCustomOidcSubClaimForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<OidcCustomSubRepo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customization template for an OIDC subject claim for a repository (asynchronously)
     * Gets the customization template for an OpenID Connect (OIDC) subject claim. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_administration:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Get the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetCustomOidcSubClaimForRepoAsync(String owner, String repo, final ApiCallback<OidcCustomSubRepo> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetCustomOidcSubClaimForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<OidcCustomSubRepo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetEnvironmentPublicKey
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-public-key">Get an environment public key Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentPublicKeyCall(Integer repositoryId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetEnvironmentPublicKeyValidateBeforeCall(Integer repositoryId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsGetEnvironmentPublicKey(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentPublicKey(Async)");
        }

        return actionsGetEnvironmentPublicKeyCall(repositoryId, environmentName, _callback);

    }

    /**
     * Get an environment public key
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @return ActionsPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-public-key">Get an environment public key Documentation</a>
     */
    public ActionsPublicKey actionsGetEnvironmentPublicKey(Integer repositoryId, String environmentName) throws ApiException {
        ApiResponse<ActionsPublicKey> localVarResp = actionsGetEnvironmentPublicKeyWithHttpInfo(repositoryId, environmentName);
        return localVarResp.getData();
    }

    /**
     * Get an environment public key
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @return ApiResponse&lt;ActionsPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-public-key">Get an environment public key Documentation</a>
     */
    public ApiResponse<ActionsPublicKey> actionsGetEnvironmentPublicKeyWithHttpInfo(Integer repositoryId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetEnvironmentPublicKeyValidateBeforeCall(repositoryId, environmentName, null);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an environment public key (asynchronously)
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-public-key">Get an environment public key Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentPublicKeyAsync(Integer repositoryId, String environmentName, final ApiCallback<ActionsPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetEnvironmentPublicKeyValidateBeforeCall(repositoryId, environmentName, _callback);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetEnvironmentSecret
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-secret">Get an environment secret Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentSecretCall(Integer repositoryId, String environmentName, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetEnvironmentSecretValidateBeforeCall(Integer repositoryId, String environmentName, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsGetEnvironmentSecret(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsGetEnvironmentSecret(Async)");
        }

        return actionsGetEnvironmentSecretCall(repositoryId, environmentName, secretName, _callback);

    }

    /**
     * Get an environment secret
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @return ActionsSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-secret">Get an environment secret Documentation</a>
     */
    public ActionsSecret actionsGetEnvironmentSecret(Integer repositoryId, String environmentName, String secretName) throws ApiException {
        ApiResponse<ActionsSecret> localVarResp = actionsGetEnvironmentSecretWithHttpInfo(repositoryId, environmentName, secretName);
        return localVarResp.getData();
    }

    /**
     * Get an environment secret
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;ActionsSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-secret">Get an environment secret Documentation</a>
     */
    public ApiResponse<ActionsSecret> actionsGetEnvironmentSecretWithHttpInfo(Integer repositoryId, String environmentName, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, null);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an environment secret (asynchronously)
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-environment-secret">Get an environment secret Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentSecretAsync(Integer repositoryId, String environmentName, String secretName, final ApiCallback<ActionsSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetEnvironmentSecretValidateBeforeCall(repositoryId, environmentName, secretName, _callback);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetEnvironmentVariable
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param name The name of the variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-environment-variable">Get an environment variable Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentVariableCall(Integer repositoryId, String environmentName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/variables/{name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetEnvironmentVariableValidateBeforeCall(Integer repositoryId, String environmentName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsGetEnvironmentVariable(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsGetEnvironmentVariable(Async)");
        }

        return actionsGetEnvironmentVariableCall(repositoryId, environmentName, name, _callback);

    }

    /**
     * Get an environment variable
     * Gets a specific variable in an environment. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param name The name of the variable. (required)
     * @return ActionsVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-environment-variable">Get an environment variable Documentation</a>
     */
    public ActionsVariable actionsGetEnvironmentVariable(Integer repositoryId, String environmentName, String name) throws ApiException {
        ApiResponse<ActionsVariable> localVarResp = actionsGetEnvironmentVariableWithHttpInfo(repositoryId, environmentName, name);
        return localVarResp.getData();
    }

    /**
     * Get an environment variable
     * Gets a specific variable in an environment. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param name The name of the variable. (required)
     * @return ApiResponse&lt;ActionsVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-environment-variable">Get an environment variable Documentation</a>
     */
    public ApiResponse<ActionsVariable> actionsGetEnvironmentVariableWithHttpInfo(Integer repositoryId, String environmentName, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsGetEnvironmentVariableValidateBeforeCall(repositoryId, environmentName, name, null);
        Type localVarReturnType = new TypeToken<ActionsVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an environment variable (asynchronously)
     * Gets a specific variable in an environment. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param name The name of the variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-environment-variable">Get an environment variable Documentation</a>
     */
    public okhttp3.Call actionsGetEnvironmentVariableAsync(Integer repositoryId, String environmentName, String name, final ApiCallback<ActionsVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetEnvironmentVariableValidateBeforeCall(repositoryId, environmentName, name, _callback);
        Type localVarReturnType = new TypeToken<ActionsVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsDefaultWorkflowPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions">Get default workflow permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/workflow"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(Async)");
        }

        return actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationCall(org, _callback);

    }

    /**
     * Get default workflow permissions for an organization
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsGetDefaultWorkflowPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions">Get default workflow permissions for an organization Documentation</a>
     */
    public ActionsGetDefaultWorkflowPermissions actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(String org) throws ApiException {
        ApiResponse<ActionsGetDefaultWorkflowPermissions> localVarResp = actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get default workflow permissions for an organization
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsGetDefaultWorkflowPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions">Get default workflow permissions for an organization Documentation</a>
     */
    public ApiResponse<ActionsGetDefaultWorkflowPermissions> actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsGetDefaultWorkflowPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default workflow permissions for an organization (asynchronously)
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions">Get default workflow permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationAsync(String org, final ApiCallback<ActionsGetDefaultWorkflowPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetDefaultWorkflowPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsDefaultWorkflowPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository">Get default workflow permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/workflow"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetGithubActionsDefaultWorkflowPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetGithubActionsDefaultWorkflowPermissionsRepository(Async)");
        }

        return actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get default workflow permissions for a repository
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsGetDefaultWorkflowPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository">Get default workflow permissions for a repository Documentation</a>
     */
    public ActionsGetDefaultWorkflowPermissions actionsGetGithubActionsDefaultWorkflowPermissionsRepository(String owner, String repo) throws ApiException {
        ApiResponse<ActionsGetDefaultWorkflowPermissions> localVarResp = actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get default workflow permissions for a repository
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsGetDefaultWorkflowPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository">Get default workflow permissions for a repository Documentation</a>
     */
    public ApiResponse<ActionsGetDefaultWorkflowPermissions> actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsGetDefaultWorkflowPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default workflow permissions for a repository (asynchronously)
     * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository">Get default workflow permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryAsync(String owner, String repo, final ApiCallback<ActionsGetDefaultWorkflowPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsGetDefaultWorkflowPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsOrganizationCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetGithubActionsPermissionsOrganization(Async)");
        }

        return actionsGetGithubActionsPermissionsOrganizationCall(org, _callback);

    }

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsOrganizationPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public ActionsOrganizationPermissions actionsGetGithubActionsPermissionsOrganization(String org) throws ApiException {
        ApiResponse<ActionsOrganizationPermissions> localVarResp = actionsGetGithubActionsPermissionsOrganizationWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsOrganizationPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public ApiResponse<ActionsOrganizationPermissions> actionsGetGithubActionsPermissionsOrganizationWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsOrganizationPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions permissions for an organization (asynchronously)
     * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsOrganizationAsync(String org, final ApiCallback<ActionsOrganizationPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsOrganizationPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetGithubActionsPermissionsRepository(Async)");
        }

        return actionsGetGithubActionsPermissionsRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsRepositoryPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public ActionsRepositoryPermissions actionsGetGithubActionsPermissionsRepository(String owner, String repo) throws ApiException {
        ApiResponse<ActionsRepositoryPermissions> localVarResp = actionsGetGithubActionsPermissionsRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsRepositoryPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public ApiResponse<ActionsRepositoryPermissions> actionsGetGithubActionsPermissionsRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsRepositoryPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions permissions for a repository (asynchronously)
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsRepositoryAsync(String owner, String repo, final ApiCallback<ActionsRepositoryPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsRepositoryPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetJobForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetJobForWorkflowRunCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/jobs/{job_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetJobForWorkflowRunValidateBeforeCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling actionsGetJobForWorkflowRun(Async)");
        }

        return actionsGetJobForWorkflowRunCall(owner, repo, jobId, _callback);

    }

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public Job actionsGetJobForWorkflowRun(String owner, String repo, Integer jobId) throws ApiException {
        ApiResponse<Job> localVarResp = actionsGetJobForWorkflowRunWithHttpInfo(owner, repo, jobId);
        return localVarResp.getData();
    }

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public ApiResponse<Job> actionsGetJobForWorkflowRunWithHttpInfo(String owner, String repo, Integer jobId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a job for a workflow run (asynchronously)
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetJobForWorkflowRunAsync(String owner, String repo, Integer jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetOrgPublicKey
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call actionsGetOrgPublicKeyCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/public-key"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetOrgPublicKeyValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetOrgPublicKey(Async)");
        }

        return actionsGetOrgPublicKeyCall(org, _callback);

    }

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public ActionsPublicKey actionsGetOrgPublicKey(String org) throws ApiException {
        ApiResponse<ActionsPublicKey> localVarResp = actionsGetOrgPublicKeyWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public ApiResponse<ActionsPublicKey> actionsGetOrgPublicKeyWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetOrgPublicKeyValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization public key (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call actionsGetOrgPublicKeyAsync(String org, final ApiCallback<ActionsPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetOrgPublicKeyValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call actionsGetOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsGetOrgSecret(Async)");
        }

        return actionsGetOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return OrganizationActionsSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public OrganizationActionsSecret actionsGetOrgSecret(String org, String secretName) throws ApiException {
        ApiResponse<OrganizationActionsSecret> localVarResp = actionsGetOrgSecretWithHttpInfo(org, secretName);
        return localVarResp.getData();
    }

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;OrganizationActionsSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public ApiResponse<OrganizationActionsSecret> actionsGetOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetOrgSecretValidateBeforeCall(org, secretName, null);
        Type localVarReturnType = new TypeToken<OrganizationActionsSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization secret (asynchronously)
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call actionsGetOrgSecretAsync(String org, String secretName, final ApiCallback<OrganizationActionsSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetOrgSecretValidateBeforeCall(org, secretName, _callback);
        Type localVarReturnType = new TypeToken<OrganizationActionsSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-organization-variable">Get an organization variable Documentation</a>
     */
    public okhttp3.Call actionsGetOrgVariableCall(String org, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetOrgVariableValidateBeforeCall(String org, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsGetOrgVariable(Async)");
        }

        return actionsGetOrgVariableCall(org, name, _callback);

    }

    /**
     * Get an organization variable
     * Gets a specific variable in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return OrganizationActionsVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-organization-variable">Get an organization variable Documentation</a>
     */
    public OrganizationActionsVariable actionsGetOrgVariable(String org, String name) throws ApiException {
        ApiResponse<OrganizationActionsVariable> localVarResp = actionsGetOrgVariableWithHttpInfo(org, name);
        return localVarResp.getData();
    }

    /**
     * Get an organization variable
     * Gets a specific variable in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return ApiResponse&lt;OrganizationActionsVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-organization-variable">Get an organization variable Documentation</a>
     */
    public ApiResponse<OrganizationActionsVariable> actionsGetOrgVariableWithHttpInfo(String org, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsGetOrgVariableValidateBeforeCall(org, name, null);
        Type localVarReturnType = new TypeToken<OrganizationActionsVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization variable (asynchronously)
     * Gets a specific variable in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-an-organization-variable">Get an organization variable Documentation</a>
     */
    public okhttp3.Call actionsGetOrgVariableAsync(String org, String name, final ApiCallback<OrganizationActionsVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetOrgVariableValidateBeforeCall(org, name, _callback);
        Type localVarReturnType = new TypeToken<OrganizationActionsVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetPendingDeploymentsForRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run">Get pending deployments for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetPendingDeploymentsForRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetPendingDeploymentsForRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetPendingDeploymentsForRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetPendingDeploymentsForRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetPendingDeploymentsForRun(Async)");
        }

        return actionsGetPendingDeploymentsForRunCall(owner, repo, runId, _callback);

    }

    /**
     * Get pending deployments for a workflow run
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return List&lt;PendingDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run">Get pending deployments for a workflow run Documentation</a>
     */
    public List<PendingDeployment> actionsGetPendingDeploymentsForRun(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<List<PendingDeployment>> localVarResp = actionsGetPendingDeploymentsForRunWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Get pending deployments for a workflow run
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;List&lt;PendingDeployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run">Get pending deployments for a workflow run Documentation</a>
     */
    public ApiResponse<List<PendingDeployment>> actionsGetPendingDeploymentsForRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetPendingDeploymentsForRunValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<List<PendingDeployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pending deployments for a workflow run (asynchronously)
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run">Get pending deployments for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetPendingDeploymentsForRunAsync(String owner, String repo, Integer runId, final ApiCallback<List<PendingDeployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetPendingDeploymentsForRunValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<List<PendingDeployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoPublicKey
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call actionsGetRepoPublicKeyCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/public-key"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoPublicKeyValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetRepoPublicKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoPublicKey(Async)");
        }

        return actionsGetRepoPublicKeyCall(owner, repo, _callback);

    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public ActionsPublicKey actionsGetRepoPublicKey(String owner, String repo) throws ApiException {
        ApiResponse<ActionsPublicKey> localVarResp = actionsGetRepoPublicKeyWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public ApiResponse<ActionsPublicKey> actionsGetRepoPublicKeyWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoPublicKeyValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository public key (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call actionsGetRepoPublicKeyAsync(String owner, String repo, final ApiCallback<ActionsPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoPublicKeyValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow">Get a required workflow entity for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetRepoRequiredWorkflowCall(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "required_workflow_id_for_repo" + "}", localVarApiClient.escapeString(requiredWorkflowIdForRepo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoRequiredWorkflowValidateBeforeCall(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetRepoRequiredWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowIdForRepo' is set
        if (requiredWorkflowIdForRepo == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowIdForRepo' when calling actionsGetRepoRequiredWorkflow(Async)");
        }

        return actionsGetRepoRequiredWorkflowCall(org, repo, requiredWorkflowIdForRepo, _callback);

    }

    /**
     * Get a required workflow entity for a repository
     * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @return RepoRequiredWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow">Get a required workflow entity for a repository Documentation</a>
     */
    public RepoRequiredWorkflow actionsGetRepoRequiredWorkflow(String org, String repo, Integer requiredWorkflowIdForRepo) throws ApiException {
        ApiResponse<RepoRequiredWorkflow> localVarResp = actionsGetRepoRequiredWorkflowWithHttpInfo(org, repo, requiredWorkflowIdForRepo);
        return localVarResp.getData();
    }

    /**
     * Get a required workflow entity for a repository
     * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @return ApiResponse&lt;RepoRequiredWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow">Get a required workflow entity for a repository Documentation</a>
     */
    public ApiResponse<RepoRequiredWorkflow> actionsGetRepoRequiredWorkflowWithHttpInfo(String org, String repo, Integer requiredWorkflowIdForRepo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoRequiredWorkflowValidateBeforeCall(org, repo, requiredWorkflowIdForRepo, null);
        Type localVarReturnType = new TypeToken<RepoRequiredWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a required workflow entity for a repository (asynchronously)
     * Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow">Get a required workflow entity for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetRepoRequiredWorkflowAsync(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback<RepoRequiredWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoRequiredWorkflowValidateBeforeCall(org, repo, requiredWorkflowIdForRepo, _callback);
        Type localVarReturnType = new TypeToken<RepoRequiredWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoRequiredWorkflowUsage
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage">Get required workflow usage Documentation</a>
     */
    public okhttp3.Call actionsGetRepoRequiredWorkflowUsageCall(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "required_workflow_id_for_repo" + "}", localVarApiClient.escapeString(requiredWorkflowIdForRepo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoRequiredWorkflowUsageValidateBeforeCall(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetRepoRequiredWorkflowUsage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoRequiredWorkflowUsage(Async)");
        }

        // verify the required parameter 'requiredWorkflowIdForRepo' is set
        if (requiredWorkflowIdForRepo == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowIdForRepo' when calling actionsGetRepoRequiredWorkflowUsage(Async)");
        }

        return actionsGetRepoRequiredWorkflowUsageCall(org, repo, requiredWorkflowIdForRepo, _callback);

    }

    /**
     * Get required workflow usage
     * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.  Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions).\&quot;  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @return WorkflowUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage">Get required workflow usage Documentation</a>
     */
    public WorkflowUsage actionsGetRepoRequiredWorkflowUsage(String org, String repo, Integer requiredWorkflowIdForRepo) throws ApiException {
        ApiResponse<WorkflowUsage> localVarResp = actionsGetRepoRequiredWorkflowUsageWithHttpInfo(org, repo, requiredWorkflowIdForRepo);
        return localVarResp.getData();
    }

    /**
     * Get required workflow usage
     * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.  Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions).\&quot;  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @return ApiResponse&lt;WorkflowUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage">Get required workflow usage Documentation</a>
     */
    public ApiResponse<WorkflowUsage> actionsGetRepoRequiredWorkflowUsageWithHttpInfo(String org, String repo, Integer requiredWorkflowIdForRepo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoRequiredWorkflowUsageValidateBeforeCall(org, repo, requiredWorkflowIdForRepo, null);
        Type localVarReturnType = new TypeToken<WorkflowUsage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get required workflow usage (asynchronously)
     * Gets the number of billable minutes used by a specific required workflow during the current billing cycle.  Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions).\&quot;  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage">Get required workflow usage Documentation</a>
     */
    public okhttp3.Call actionsGetRepoRequiredWorkflowUsageAsync(String org, String repo, Integer requiredWorkflowIdForRepo, final ApiCallback<WorkflowUsage> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoRequiredWorkflowUsageValidateBeforeCall(org, repo, requiredWorkflowIdForRepo, _callback);
        Type localVarReturnType = new TypeToken<WorkflowUsage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call actionsGetRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsGetRepoSecret(Async)");
        }

        return actionsGetRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ActionsSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public ActionsSecret actionsGetRepoSecret(String owner, String repo, String secretName) throws ApiException {
        ApiResponse<ActionsSecret> localVarResp = actionsGetRepoSecretWithHttpInfo(owner, repo, secretName);
        return localVarResp.getData();
    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;ActionsSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public ApiResponse<ActionsSecret> actionsGetRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository secret (asynchronously)
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call actionsGetRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<ActionsSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoVariable
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-a-repository-variable">Get a repository variable Documentation</a>
     */
    public okhttp3.Call actionsGetRepoVariableCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/variables/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoVariableValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetRepoVariable(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsGetRepoVariable(Async)");
        }

        return actionsGetRepoVariableCall(owner, repo, name, _callback);

    }

    /**
     * Get a repository variable
     * Gets a specific variable in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return ActionsVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-a-repository-variable">Get a repository variable Documentation</a>
     */
    public ActionsVariable actionsGetRepoVariable(String owner, String repo, String name) throws ApiException {
        ApiResponse<ActionsVariable> localVarResp = actionsGetRepoVariableWithHttpInfo(owner, repo, name);
        return localVarResp.getData();
    }

    /**
     * Get a repository variable
     * Gets a specific variable in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @return ApiResponse&lt;ActionsVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-a-repository-variable">Get a repository variable Documentation</a>
     */
    public ApiResponse<ActionsVariable> actionsGetRepoVariableWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoVariableValidateBeforeCall(owner, repo, name, null);
        Type localVarReturnType = new TypeToken<ActionsVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository variable (asynchronously)
     * Gets a specific variable in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#get-a-repository-variable">Get a repository variable Documentation</a>
     */
    public okhttp3.Call actionsGetRepoVariableAsync(String owner, String repo, String name, final ApiCallback<ActionsVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoVariableValidateBeforeCall(owner, repo, name, _callback);
        Type localVarReturnType = new TypeToken<ActionsVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-required-workflow">Get a required workflow Documentation</a>
     */
    public okhttp3.Call actionsGetRequiredWorkflowCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsGetRequiredWorkflow(Async)");
        }

        return actionsGetRequiredWorkflowCall(org, requiredWorkflowId, _callback);

    }

    /**
     * Get a required workflow
     * Get a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @return RequiredWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-required-workflow">Get a required workflow Documentation</a>
     */
    public RequiredWorkflow actionsGetRequiredWorkflow(String org, Integer requiredWorkflowId) throws ApiException {
        ApiResponse<RequiredWorkflow> localVarResp = actionsGetRequiredWorkflowWithHttpInfo(org, requiredWorkflowId);
        return localVarResp.getData();
    }

    /**
     * Get a required workflow
     * Get a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @return ApiResponse&lt;RequiredWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-required-workflow">Get a required workflow Documentation</a>
     */
    public ApiResponse<RequiredWorkflow> actionsGetRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, null);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a required workflow (asynchronously)
     * Get a required workflow configured in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-required-workflow">Get a required workflow Documentation</a>
     */
    public okhttp3.Call actionsGetRequiredWorkflowAsync(String org, Integer requiredWorkflowId, final ApiCallback<RequiredWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, _callback);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetReviewsForRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run">Get the review history for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetReviewsForRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetReviewsForRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetReviewsForRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetReviewsForRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetReviewsForRun(Async)");
        }

        return actionsGetReviewsForRunCall(owner, repo, runId, _callback);

    }

    /**
     * Get the review history for a workflow run
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return List&lt;EnvironmentApprovals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run">Get the review history for a workflow run Documentation</a>
     */
    public List<EnvironmentApprovals> actionsGetReviewsForRun(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<List<EnvironmentApprovals>> localVarResp = actionsGetReviewsForRunWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Get the review history for a workflow run
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;List&lt;EnvironmentApprovals&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run">Get the review history for a workflow run Documentation</a>
     */
    public ApiResponse<List<EnvironmentApprovals>> actionsGetReviewsForRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetReviewsForRunValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<List<EnvironmentApprovals>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the review history for a workflow run (asynchronously)
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run">Get the review history for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetReviewsForRunAsync(String owner, String repo, Integer runId, final ApiCallback<List<EnvironmentApprovals>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetReviewsForRunValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<List<EnvironmentApprovals>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForOrg(Async)");
        }

        return actionsGetSelfHostedRunnerForOrgCall(org, runnerId, _callback);

    }

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public Runner actionsGetSelfHostedRunnerForOrg(String org, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = actionsGetSelfHostedRunnerForOrgWithHttpInfo(org, runnerId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<Runner> actionsGetSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner for an organization (asynchronously)
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForOrgAsync(String org, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        return actionsGetSelfHostedRunnerForRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public Runner actionsGetSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = actionsGetSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<Runner> actionsGetSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner for a repository (asynchronously)
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsGetWorkflow(Async)");
        }

        return actionsGetWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public Workflow actionsGetWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        ApiResponse<Workflow> localVarResp = actionsGetWorkflowWithHttpInfo(owner, repo, workflowId);
        return localVarResp.getData();
    }

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public ApiResponse<Workflow> actionsGetWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workflow (asynchronously)
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowAccessToRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository">Get the level of access for workflows outside of the repository Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowAccessToRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/access"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowAccessToRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowAccessToRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowAccessToRepository(Async)");
        }

        return actionsGetWorkflowAccessToRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get the level of access for workflows outside of the repository
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsWorkflowAccessToRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository">Get the level of access for workflows outside of the repository Documentation</a>
     */
    public ActionsWorkflowAccessToRepository actionsGetWorkflowAccessToRepository(String owner, String repo) throws ApiException {
        ApiResponse<ActionsWorkflowAccessToRepository> localVarResp = actionsGetWorkflowAccessToRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the level of access for workflows outside of the repository
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsWorkflowAccessToRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository">Get the level of access for workflows outside of the repository Documentation</a>
     */
    public ApiResponse<ActionsWorkflowAccessToRepository> actionsGetWorkflowAccessToRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowAccessToRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsWorkflowAccessToRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the level of access for workflows outside of the repository (asynchronously)
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository">Get the level of access for workflows outside of the repository Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowAccessToRepositoryAsync(String owner, String repo, final ApiCallback<ActionsWorkflowAccessToRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowAccessToRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsWorkflowAccessToRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunCall(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetWorkflowRun(Async)");
        }

        return actionsGetWorkflowRunCall(owner, repo, runId, excludePullRequests, _callback);

    }

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return WorkflowRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public WorkflowRun actionsGetWorkflowRun(String owner, String repo, Integer runId, Boolean excludePullRequests) throws ApiException {
        ApiResponse<WorkflowRun> localVarResp = actionsGetWorkflowRunWithHttpInfo(owner, repo, runId, excludePullRequests);
        return localVarResp.getData();
    }

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ApiResponse&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public ApiResponse<WorkflowRun> actionsGetWorkflowRunWithHttpInfo(String owner, String repo, Integer runId, Boolean excludePullRequests) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowRunValidateBeforeCall(owner, repo, runId, excludePullRequests, null);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workflow run (asynchronously)
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunAsync(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback<WorkflowRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowRunValidateBeforeCall(owner, repo, runId, excludePullRequests, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowRunAttempt
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt">Get a workflow run attempt Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunAttemptCall(String owner, String repo, Integer runId, Integer attemptNumber, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()))
            .replace("{" + "attempt_number" + "}", localVarApiClient.escapeString(attemptNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowRunAttemptValidateBeforeCall(String owner, String repo, Integer runId, Integer attemptNumber, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'attemptNumber' is set
        if (attemptNumber == null) {
            throw new ApiException("Missing the required parameter 'attemptNumber' when calling actionsGetWorkflowRunAttempt(Async)");
        }

        return actionsGetWorkflowRunAttemptCall(owner, repo, runId, attemptNumber, excludePullRequests, _callback);

    }

    /**
     * Get a workflow run attempt
     * Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return WorkflowRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt">Get a workflow run attempt Documentation</a>
     */
    public WorkflowRun actionsGetWorkflowRunAttempt(String owner, String repo, Integer runId, Integer attemptNumber, Boolean excludePullRequests) throws ApiException {
        ApiResponse<WorkflowRun> localVarResp = actionsGetWorkflowRunAttemptWithHttpInfo(owner, repo, runId, attemptNumber, excludePullRequests);
        return localVarResp.getData();
    }

    /**
     * Get a workflow run attempt
     * Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ApiResponse&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt">Get a workflow run attempt Documentation</a>
     */
    public ApiResponse<WorkflowRun> actionsGetWorkflowRunAttemptWithHttpInfo(String owner, String repo, Integer runId, Integer attemptNumber, Boolean excludePullRequests) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowRunAttemptValidateBeforeCall(owner, repo, runId, attemptNumber, excludePullRequests, null);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workflow run attempt (asynchronously)
     * Gets a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt">Get a workflow run attempt Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunAttemptAsync(String owner, String repo, Integer runId, Integer attemptNumber, Boolean excludePullRequests, final ApiCallback<WorkflowRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowRunAttemptValidateBeforeCall(owner, repo, runId, attemptNumber, excludePullRequests, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowRunUsage
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-run-usage">Get workflow run usage Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunUsageCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/timing"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowRunUsageValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowRunUsage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowRunUsage(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetWorkflowRunUsage(Async)");
        }

        return actionsGetWorkflowRunUsageCall(owner, repo, runId, _callback);

    }

    /**
     * Get workflow run usage
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return WorkflowRunUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-run-usage">Get workflow run usage Documentation</a>
     */
    public WorkflowRunUsage actionsGetWorkflowRunUsage(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<WorkflowRunUsage> localVarResp = actionsGetWorkflowRunUsageWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Get workflow run usage
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;WorkflowRunUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-run-usage">Get workflow run usage Documentation</a>
     */
    public ApiResponse<WorkflowRunUsage> actionsGetWorkflowRunUsageWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowRunUsageValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<WorkflowRunUsage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workflow run usage (asynchronously)
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-run-usage">Get workflow run usage Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunUsageAsync(String owner, String repo, Integer runId, final ApiCallback<WorkflowRunUsage> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowRunUsageValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunUsage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowUsage
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-usage">Get workflow usage Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowUsageCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowUsageValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowUsage(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowUsage(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsGetWorkflowUsage(Async)");
        }

        return actionsGetWorkflowUsageCall(owner, repo, workflowId, _callback);

    }

    /**
     * Get workflow usage
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return WorkflowUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-usage">Get workflow usage Documentation</a>
     */
    public WorkflowUsage actionsGetWorkflowUsage(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        ApiResponse<WorkflowUsage> localVarResp = actionsGetWorkflowUsageWithHttpInfo(owner, repo, workflowId);
        return localVarResp.getData();
    }

    /**
     * Get workflow usage
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;WorkflowUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-usage">Get workflow usage Documentation</a>
     */
    public ApiResponse<WorkflowUsage> actionsGetWorkflowUsageWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowUsageValidateBeforeCall(owner, repo, workflowId, null);
        Type localVarReturnType = new TypeToken<WorkflowUsage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workflow usage (asynchronously)
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#get-workflow-usage">Get workflow usage Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowUsageAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<WorkflowUsage> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowUsageValidateBeforeCall(owner, repo, workflowId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowUsage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListArtifactsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param name Filters artifacts by exact match on their name field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public okhttp3.Call actionsListArtifactsForRepoCall(String owner, String repo, Integer perPage, Integer page, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListArtifactsForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListArtifactsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListArtifactsForRepo(Async)");
        }

        return actionsListArtifactsForRepoCall(owner, repo, perPage, page, name, _callback);

    }

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param name Filters artifacts by exact match on their name field. (optional)
     * @return ActionsListArtifactsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public ActionsListArtifactsForRepo200Response actionsListArtifactsForRepo(String owner, String repo, Integer perPage, Integer page, String name) throws ApiException {
        ApiResponse<ActionsListArtifactsForRepo200Response> localVarResp = actionsListArtifactsForRepoWithHttpInfo(owner, repo, perPage, page, name);
        return localVarResp.getData();
    }

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param name Filters artifacts by exact match on their name field. (optional)
     * @return ApiResponse&lt;ActionsListArtifactsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public ApiResponse<ActionsListArtifactsForRepo200Response> actionsListArtifactsForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsListArtifactsForRepoValidateBeforeCall(owner, repo, perPage, page, name, null);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List artifacts for a repository (asynchronously)
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param name Filters artifacts by exact match on their name field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public okhttp3.Call actionsListArtifactsForRepoAsync(String owner, String repo, Integer perPage, Integer page, String name, final ApiCallback<ActionsListArtifactsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListArtifactsForRepoValidateBeforeCall(owner, repo, perPage, page, name, _callback);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListEnvironmentSecrets
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-environment-secrets">List environment secrets Documentation</a>
     */
    public okhttp3.Call actionsListEnvironmentSecretsCall(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/secrets"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListEnvironmentSecretsValidateBeforeCall(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsListEnvironmentSecrets(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsListEnvironmentSecrets(Async)");
        }

        return actionsListEnvironmentSecretsCall(repositoryId, environmentName, perPage, page, _callback);

    }

    /**
     * List environment secrets
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-environment-secrets">List environment secrets Documentation</a>
     */
    public ActionsListRepoOrganizationSecrets200Response actionsListEnvironmentSecrets(Integer repositoryId, String environmentName, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationSecrets200Response> localVarResp = actionsListEnvironmentSecretsWithHttpInfo(repositoryId, environmentName, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List environment secrets
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-environment-secrets">List environment secrets Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationSecrets200Response> actionsListEnvironmentSecretsWithHttpInfo(Integer repositoryId, String environmentName, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListEnvironmentSecretsValidateBeforeCall(repositoryId, environmentName, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List environment secrets (asynchronously)
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-environment-secrets">List environment secrets Documentation</a>
     */
    public okhttp3.Call actionsListEnvironmentSecretsAsync(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListEnvironmentSecretsValidateBeforeCall(repositoryId, environmentName, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListEnvironmentVariables
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-environment-variables">List environment variables Documentation</a>
     */
    public okhttp3.Call actionsListEnvironmentVariablesCall(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/variables"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListEnvironmentVariablesValidateBeforeCall(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsListEnvironmentVariables(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsListEnvironmentVariables(Async)");
        }

        return actionsListEnvironmentVariablesCall(repositoryId, environmentName, perPage, page, _callback);

    }

    /**
     * List environment variables
     * Lists all environment variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationVariables200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-environment-variables">List environment variables Documentation</a>
     */
    public ActionsListRepoOrganizationVariables200Response actionsListEnvironmentVariables(Integer repositoryId, String environmentName, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationVariables200Response> localVarResp = actionsListEnvironmentVariablesWithHttpInfo(repositoryId, environmentName, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List environment variables
     * Lists all environment variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationVariables200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-environment-variables">List environment variables Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationVariables200Response> actionsListEnvironmentVariablesWithHttpInfo(Integer repositoryId, String environmentName, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListEnvironmentVariablesValidateBeforeCall(repositoryId, environmentName, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List environment variables (asynchronously)
     * Lists all environment variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environments:read&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param environmentName The name of the environment. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-environment-variables">List environment variables Documentation</a>
     */
    public okhttp3.Call actionsListEnvironmentVariablesAsync(Integer repositoryId, String environmentName, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationVariables200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListEnvironmentVariablesValidateBeforeCall(repositoryId, environmentName, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListJobsForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunCall(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListJobsForWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRun(Async)");
        }

        return actionsListJobsForWorkflowRunCall(owner, repo, runId, filter, perPage, page, _callback);

    }

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListJobsForWorkflowRunAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public ActionsListJobsForWorkflowRunAttempt200Response actionsListJobsForWorkflowRun(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListJobsForWorkflowRunAttempt200Response> localVarResp = actionsListJobsForWorkflowRunWithHttpInfo(owner, repo, runId, filter, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListJobsForWorkflowRunAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public ApiResponse<ActionsListJobsForWorkflowRunAttempt200Response> actionsListJobsForWorkflowRunWithHttpInfo(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunValidateBeforeCall(owner, repo, runId, filter, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRunAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List jobs for a workflow run (asynchronously)
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunAsync(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback<ActionsListJobsForWorkflowRunAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunValidateBeforeCall(owner, repo, runId, filter, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRunAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListJobsForWorkflowRunAttempt
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt">List jobs for a workflow run attempt Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunAttemptCall(String owner, String repo, Integer runId, Integer attemptNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()))
            .replace("{" + "attempt_number" + "}", localVarApiClient.escapeString(attemptNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListJobsForWorkflowRunAttemptValidateBeforeCall(String owner, String repo, Integer runId, Integer attemptNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRunAttempt(Async)");
        }

        // verify the required parameter 'attemptNumber' is set
        if (attemptNumber == null) {
            throw new ApiException("Missing the required parameter 'attemptNumber' when calling actionsListJobsForWorkflowRunAttempt(Async)");
        }

        return actionsListJobsForWorkflowRunAttemptCall(owner, repo, runId, attemptNumber, perPage, page, _callback);

    }

    /**
     * List jobs for a workflow run attempt
     * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListJobsForWorkflowRunAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt">List jobs for a workflow run attempt Documentation</a>
     */
    public ActionsListJobsForWorkflowRunAttempt200Response actionsListJobsForWorkflowRunAttempt(String owner, String repo, Integer runId, Integer attemptNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListJobsForWorkflowRunAttempt200Response> localVarResp = actionsListJobsForWorkflowRunAttemptWithHttpInfo(owner, repo, runId, attemptNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List jobs for a workflow run attempt
     * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListJobsForWorkflowRunAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt">List jobs for a workflow run attempt Documentation</a>
     */
    public ApiResponse<ActionsListJobsForWorkflowRunAttempt200Response> actionsListJobsForWorkflowRunAttemptWithHttpInfo(String owner, String repo, Integer runId, Integer attemptNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunAttemptValidateBeforeCall(owner, repo, runId, attemptNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRunAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List jobs for a workflow run attempt (asynchronously)
     * Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param attemptNumber The attempt number of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt">List jobs for a workflow run attempt Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunAttemptAsync(String owner, String repo, Integer runId, Integer attemptNumber, Integer perPage, Integer page, final ApiCallback<ActionsListJobsForWorkflowRunAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunAttemptValidateBeforeCall(owner, repo, runId, attemptNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRunAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListLabelsForSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization">List labels for a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsListLabelsForSelfHostedRunnerForOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListLabelsForSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListLabelsForSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsListLabelsForSelfHostedRunnerForOrg(Async)");
        }

        return actionsListLabelsForSelfHostedRunnerForOrgCall(org, runnerId, _callback);

    }

    /**
     * List labels for a self-hosted runner for an organization
     * Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization">List labels for a self-hosted runner for an organization Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsListLabelsForSelfHostedRunnerForOrg(String org, Integer runnerId) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsListLabelsForSelfHostedRunnerForOrgWithHttpInfo(org, runnerId);
        return localVarResp.getData();
    }

    /**
     * List labels for a self-hosted runner for an organization
     * Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization">List labels for a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsListLabelsForSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsListLabelsForSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for a self-hosted runner for an organization (asynchronously)
     * Lists all labels for a self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization">List labels for a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsListLabelsForSelfHostedRunnerForOrgAsync(String org, Integer runnerId, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListLabelsForSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListLabelsForSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository">List labels for a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsListLabelsForSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListLabelsForSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListLabelsForSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListLabelsForSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsListLabelsForSelfHostedRunnerForRepo(Async)");
        }

        return actionsListLabelsForSelfHostedRunnerForRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * List labels for a self-hosted runner for a repository
     * Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository">List labels for a self-hosted runner for a repository Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsListLabelsForSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsListLabelsForSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId);
        return localVarResp.getData();
    }

    /**
     * List labels for a self-hosted runner for a repository
     * Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository">List labels for a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsListLabelsForSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsListLabelsForSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for a self-hosted runner for a repository (asynchronously)
     * Lists all labels for a self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository">List labels for a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsListLabelsForSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListLabelsForSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListOrgSecrets
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListOrgSecretsCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListOrgSecretsValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListOrgSecrets(Async)");
        }

        return actionsListOrgSecretsCall(org, perPage, page, _callback);

    }

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListOrgSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public ActionsListOrgSecrets200Response actionsListOrgSecrets(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListOrgSecrets200Response> localVarResp = actionsListOrgSecretsWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListOrgSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public ApiResponse<ActionsListOrgSecrets200Response> actionsListOrgSecretsWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListOrgSecretsValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListOrgSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization secrets (asynchronously)
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListOrgSecretsAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListOrgSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListOrgSecretsValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListOrgSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListOrgVariables
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-organization-variables">List organization variables Documentation</a>
     */
    public okhttp3.Call actionsListOrgVariablesCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListOrgVariablesValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListOrgVariables(Async)");
        }

        return actionsListOrgVariablesCall(org, perPage, page, _callback);

    }

    /**
     * List organization variables
     * Lists all organization variables. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListOrgVariables200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-organization-variables">List organization variables Documentation</a>
     */
    public ActionsListOrgVariables200Response actionsListOrgVariables(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListOrgVariables200Response> localVarResp = actionsListOrgVariablesWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization variables
     * Lists all organization variables. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListOrgVariables200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-organization-variables">List organization variables Documentation</a>
     */
    public ApiResponse<ActionsListOrgVariables200Response> actionsListOrgVariablesWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListOrgVariablesValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListOrgVariables200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization variables (asynchronously)
     * Lists all organization variables. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-organization-variables">List organization variables Documentation</a>
     */
    public okhttp3.Call actionsListOrgVariablesAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListOrgVariables200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListOrgVariablesValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListOrgVariables200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoOrganizationSecrets
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets">List repository organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoOrganizationSecretsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/organization-secrets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoOrganizationSecretsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoOrganizationSecrets(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoOrganizationSecrets(Async)");
        }

        return actionsListRepoOrganizationSecretsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository organization secrets
     * Lists all organization secrets shared with a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets">List repository organization secrets Documentation</a>
     */
    public ActionsListRepoOrganizationSecrets200Response actionsListRepoOrganizationSecrets(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationSecrets200Response> localVarResp = actionsListRepoOrganizationSecretsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository organization secrets
     * Lists all organization secrets shared with a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets">List repository organization secrets Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationSecrets200Response> actionsListRepoOrganizationSecretsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoOrganizationSecretsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository organization secrets (asynchronously)
     * Lists all organization secrets shared with a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets">List repository organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoOrganizationSecretsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoOrganizationSecretsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoOrganizationVariables
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-organization-variables">List repository organization variables Documentation</a>
     */
    public okhttp3.Call actionsListRepoOrganizationVariablesCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/organization-variables"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoOrganizationVariablesValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoOrganizationVariables(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoOrganizationVariables(Async)");
        }

        return actionsListRepoOrganizationVariablesCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository organization variables
     * Lists all organiation variables shared with a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationVariables200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-organization-variables">List repository organization variables Documentation</a>
     */
    public ActionsListRepoOrganizationVariables200Response actionsListRepoOrganizationVariables(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationVariables200Response> localVarResp = actionsListRepoOrganizationVariablesWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository organization variables
     * Lists all organiation variables shared with a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationVariables200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-organization-variables">List repository organization variables Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationVariables200Response> actionsListRepoOrganizationVariablesWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoOrganizationVariablesValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository organization variables (asynchronously)
     * Lists all organiation variables shared with a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-organization-variables">List repository organization variables Documentation</a>
     */
    public okhttp3.Call actionsListRepoOrganizationVariablesAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationVariables200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoOrganizationVariablesValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoRequiredWorkflows
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-required-workflows">List repository required workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoRequiredWorkflowsCall(String org, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{org}/{repo}/actions/required_workflows"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoRequiredWorkflowsValidateBeforeCall(String org, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListRepoRequiredWorkflows(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoRequiredWorkflows(Async)");
        }

        return actionsListRepoRequiredWorkflowsCall(org, repo, perPage, page, _callback);

    }

    /**
     * List repository required workflows
     * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoRequiredWorkflows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-required-workflows">List repository required workflows Documentation</a>
     */
    public ActionsListRepoRequiredWorkflows200Response actionsListRepoRequiredWorkflows(String org, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoRequiredWorkflows200Response> localVarResp = actionsListRepoRequiredWorkflowsWithHttpInfo(org, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository required workflows
     * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoRequiredWorkflows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-required-workflows">List repository required workflows Documentation</a>
     */
    public ApiResponse<ActionsListRepoRequiredWorkflows200Response> actionsListRepoRequiredWorkflowsWithHttpInfo(String org, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoRequiredWorkflowsValidateBeforeCall(org, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoRequiredWorkflows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository required workflows (asynchronously)
     * Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-required-workflows">List repository required workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoRequiredWorkflowsAsync(String org, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoRequiredWorkflows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoRequiredWorkflowsValidateBeforeCall(org, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoRequiredWorkflows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoSecrets
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoSecretsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoSecretsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoSecrets(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoSecrets(Async)");
        }

        return actionsListRepoSecretsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public ActionsListRepoOrganizationSecrets200Response actionsListRepoSecrets(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationSecrets200Response> localVarResp = actionsListRepoSecretsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationSecrets200Response> actionsListRepoSecretsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository secrets (asynchronously)
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoSecretsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoVariables
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-variables">List repository variables Documentation</a>
     */
    public okhttp3.Call actionsListRepoVariablesCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/variables"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoVariablesValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoVariables(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoVariables(Async)");
        }

        return actionsListRepoVariablesCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository variables
     * Lists all repository variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoOrganizationVariables200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-variables">List repository variables Documentation</a>
     */
    public ActionsListRepoOrganizationVariables200Response actionsListRepoVariables(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoOrganizationVariables200Response> localVarResp = actionsListRepoVariablesWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository variables
     * Lists all repository variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoOrganizationVariables200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-variables">List repository variables Documentation</a>
     */
    public ApiResponse<ActionsListRepoOrganizationVariables200Response> actionsListRepoVariablesWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoVariablesValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository variables (asynchronously)
     * Lists all repository variables. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:read&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 30). (optional, default to 10)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-repository-variables">List repository variables Documentation</a>
     */
    public okhttp3.Call actionsListRepoVariablesAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoOrganizationVariables200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoVariablesValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoOrganizationVariables200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoWorkflows
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoWorkflowsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoWorkflowsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoWorkflows(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoWorkflows(Async)");
        }

        return actionsListRepoWorkflowsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoWorkflows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public ActionsListRepoWorkflows200Response actionsListRepoWorkflows(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoWorkflows200Response> localVarResp = actionsListRepoWorkflowsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoWorkflows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public ApiResponse<ActionsListRepoWorkflows200Response> actionsListRepoWorkflowsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoWorkflowsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoWorkflows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository workflows (asynchronously)
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoWorkflowsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoWorkflows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoWorkflowsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoWorkflows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRequiredWorkflowRuns
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflow-runs">List workflow runs for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsListRequiredWorkflowRunsCall(String owner, String repo, Integer requiredWorkflowIdForRepo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "required_workflow_id_for_repo" + "}", localVarApiClient.escapeString(requiredWorkflowIdForRepo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        if (checkSuiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_suite_id", checkSuiteId));
        }

        if (headSha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head_sha", headSha));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRequiredWorkflowRunsValidateBeforeCall(String owner, String repo, Integer requiredWorkflowIdForRepo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRequiredWorkflowRuns(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRequiredWorkflowRuns(Async)");
        }

        // verify the required parameter 'requiredWorkflowIdForRepo' is set
        if (requiredWorkflowIdForRepo == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowIdForRepo' when calling actionsListRequiredWorkflowRuns(Async)");
        }

        return actionsListRequiredWorkflowRunsCall(owner, repo, requiredWorkflowIdForRepo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);

    }

    /**
     * List workflow runs for a required workflow
     * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ActionsListRequiredWorkflowRuns200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflow-runs">List workflow runs for a required workflow Documentation</a>
     */
    public ActionsListRequiredWorkflowRuns200Response actionsListRequiredWorkflowRuns(String owner, String repo, Integer requiredWorkflowIdForRepo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        ApiResponse<ActionsListRequiredWorkflowRuns200Response> localVarResp = actionsListRequiredWorkflowRunsWithHttpInfo(owner, repo, requiredWorkflowIdForRepo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        return localVarResp.getData();
    }

    /**
     * List workflow runs for a required workflow
     * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ApiResponse&lt;ActionsListRequiredWorkflowRuns200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflow-runs">List workflow runs for a required workflow Documentation</a>
     */
    public ApiResponse<ActionsListRequiredWorkflowRuns200Response> actionsListRequiredWorkflowRunsWithHttpInfo(String owner, String repo, Integer requiredWorkflowIdForRepo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        okhttp3.Call localVarCall = actionsListRequiredWorkflowRunsValidateBeforeCall(owner, repo, requiredWorkflowIdForRepo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, null);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow runs for a required workflow (asynchronously)
     * List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param requiredWorkflowIdForRepo The ID of the required workflow that has run at least once in a repository. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflow-runs">List workflow runs for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsListRequiredWorkflowRunsAsync(String owner, String repo, Integer requiredWorkflowIdForRepo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback<ActionsListRequiredWorkflowRuns200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRequiredWorkflowRunsValidateBeforeCall(owner, repo, requiredWorkflowIdForRepo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRequiredWorkflows
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflows">List required workflows Documentation</a>
     */
    public okhttp3.Call actionsListRequiredWorkflowsCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRequiredWorkflowsValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListRequiredWorkflows(Async)");
        }

        return actionsListRequiredWorkflowsCall(org, perPage, page, _callback);

    }

    /**
     * List required workflows
     * List all required workflows in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRequiredWorkflows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflows">List required workflows Documentation</a>
     */
    public ActionsListRequiredWorkflows200Response actionsListRequiredWorkflows(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRequiredWorkflows200Response> localVarResp = actionsListRequiredWorkflowsWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List required workflows
     * List all required workflows in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRequiredWorkflows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflows">List required workflows Documentation</a>
     */
    public ApiResponse<ActionsListRequiredWorkflows200Response> actionsListRequiredWorkflowsWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRequiredWorkflowsValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List required workflows (asynchronously)
     * List all required workflows in an organization.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-required-workflows">List required workflows Documentation</a>
     */
    public okhttp3.Call actionsListRequiredWorkflowsAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListRequiredWorkflows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRequiredWorkflowsValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRunnerApplicationsForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/downloads"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRunnerApplicationsForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListRunnerApplicationsForOrg(Async)");
        }

        return actionsListRunnerApplicationsForOrgCall(org, _callback);

    }

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return List&lt;RunnerApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public List<RunnerApplication> actionsListRunnerApplicationsForOrg(String org) throws ApiException {
        ApiResponse<List<RunnerApplication>> localVarResp = actionsListRunnerApplicationsForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;List&lt;RunnerApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public ApiResponse<List<RunnerApplication>> actionsListRunnerApplicationsForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsListRunnerApplicationsForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runner applications for an organization (asynchronously)
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForOrgAsync(String org, final ApiCallback<List<RunnerApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRunnerApplicationsForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRunnerApplicationsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/downloads"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRunnerApplicationsForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRunnerApplicationsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRunnerApplicationsForRepo(Async)");
        }

        return actionsListRunnerApplicationsForRepoCall(owner, repo, _callback);

    }

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return List&lt;RunnerApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public List<RunnerApplication> actionsListRunnerApplicationsForRepo(String owner, String repo) throws ApiException {
        ApiResponse<List<RunnerApplication>> localVarResp = actionsListRunnerApplicationsForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;List&lt;RunnerApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public ApiResponse<List<RunnerApplication>> actionsListRunnerApplicationsForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsListRunnerApplicationsForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runner applications for a repository (asynchronously)
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForRepoAsync(String owner, String repo, final ApiCallback<List<RunnerApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRunnerApplicationsForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgSecretCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsListSelectedReposForOrgSecret(Async)");
        }

        return actionsListSelectedReposForOrgSecretCall(org, secretName, page, perPage, _callback);

    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ActionsListSelectedReposForOrgSecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ActionsListSelectedReposForOrgSecret200Response actionsListSelectedReposForOrgSecret(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActionsListSelectedReposForOrgSecret200Response> localVarResp = actionsListSelectedReposForOrgSecretWithHttpInfo(org, secretName, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;ActionsListSelectedReposForOrgSecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<ActionsListSelectedReposForOrgSecret200Response> actionsListSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for an organization secret (asynchronously)
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgSecretAsync(String org, String secretName, Integer page, Integer perPage, final ApiCallback<ActionsListSelectedReposForOrgSecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedReposForOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable">List selected repositories for an organization variable Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgVariableCall(String org, String name, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedReposForOrgVariableValidateBeforeCall(String org, String name, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsListSelectedReposForOrgVariable(Async)");
        }

        return actionsListSelectedReposForOrgVariableCall(org, name, page, perPage, _callback);

    }

    /**
     * List selected repositories for an organization variable
     * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ActionsListSelectedReposForOrgSecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable">List selected repositories for an organization variable Documentation</a>
     */
    public ActionsListSelectedReposForOrgSecret200Response actionsListSelectedReposForOrgVariable(String org, String name, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActionsListSelectedReposForOrgSecret200Response> localVarResp = actionsListSelectedReposForOrgVariableWithHttpInfo(org, name, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for an organization variable
     * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;ActionsListSelectedReposForOrgSecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable">List selected repositories for an organization variable Documentation</a>
     */
    public ApiResponse<ActionsListSelectedReposForOrgSecret200Response> actionsListSelectedReposForOrgVariableWithHttpInfo(String org, String name, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedReposForOrgVariableValidateBeforeCall(org, name, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for an organization variable (asynchronously)
     * Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:read&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable">List selected repositories for an organization variable Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgVariableAsync(String org, String name, Integer page, Integer perPage, final ApiCallback<ActionsListSelectedReposForOrgSecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedReposForOrgVariableValidateBeforeCall(org, name, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedRepositoriesEnabledGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        return actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCall(org, perPage, page, _callback);

    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response actionsListSelectedRepositoriesEnabledGithubActionsOrganization(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> localVarResp = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization (asynchronously)
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedRepositoriesRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     * API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows">List selected repositories for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesRequiredWorkflowCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedRepositoriesRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedRepositoriesRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsListSelectedRepositoriesRequiredWorkflow(Async)");
        }

        return actionsListSelectedRepositoriesRequiredWorkflowCall(org, requiredWorkflowId, _callback);

    }

    /**
     * List selected repositories for a required workflow
     * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @return ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     * API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows">List selected repositories for a required workflow Documentation</a>
     */
    public ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response actionsListSelectedRepositoriesRequiredWorkflow(String org, Integer requiredWorkflowId) throws ApiException {
        ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> localVarResp = actionsListSelectedRepositoriesRequiredWorkflowWithHttpInfo(org, requiredWorkflowId);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for a required workflow
     * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @return ApiResponse&lt;ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     * API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows">List selected repositories for a required workflow Documentation</a>
     */
    public ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> actionsListSelectedRepositoriesRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedRepositoriesRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for a required workflow (asynchronously)
     * Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;read:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     * API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows
     * @see <a href="https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows">List selected repositories for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesRequiredWorkflowAsync(String org, Integer requiredWorkflowId, final ApiCallback<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedRepositoriesRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnersForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForOrgCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnersForOrgValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersForOrg(Async)");
        }

        return actionsListSelfHostedRunnersForOrgCall(org, perPage, page, _callback);

    }

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelfHostedRunnersForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public ActionsListSelfHostedRunnersForOrg200Response actionsListSelfHostedRunnersForOrg(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> localVarResp = actionsListSelfHostedRunnersForOrgWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelfHostedRunnersForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> actionsListSelfHostedRunnersForOrgWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForOrgValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners for an organization (asynchronously)
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForOrgAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListSelfHostedRunnersForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForOrgValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnersForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnersForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListSelfHostedRunnersForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListSelfHostedRunnersForRepo(Async)");
        }

        return actionsListSelfHostedRunnersForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelfHostedRunnersForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public ActionsListSelfHostedRunnersForOrg200Response actionsListSelfHostedRunnersForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> localVarResp = actionsListSelfHostedRunnersForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelfHostedRunnersForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> actionsListSelfHostedRunnersForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners for a repository (asynchronously)
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListSelfHostedRunnersForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRunArtifacts
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunArtifactsCall(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunArtifactsValidateBeforeCall(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        return actionsListWorkflowRunArtifactsCall(owner, repo, runId, perPage, page, _callback);

    }

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListArtifactsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public ActionsListArtifactsForRepo200Response actionsListWorkflowRunArtifacts(String owner, String repo, Integer runId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListArtifactsForRepo200Response> localVarResp = actionsListWorkflowRunArtifactsWithHttpInfo(owner, repo, runId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListArtifactsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public ApiResponse<ActionsListArtifactsForRepo200Response> actionsListWorkflowRunArtifactsWithHttpInfo(String owner, String repo, Integer runId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunArtifactsValidateBeforeCall(owner, repo, runId, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow run artifacts (asynchronously)
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunArtifactsAsync(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback<ActionsListArtifactsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunArtifactsValidateBeforeCall(owner, repo, runId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRuns
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs">List workflow runs for a workflow Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        if (checkSuiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_suite_id", checkSuiteId));
        }

        if (headSha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head_sha", headSha));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunsValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRuns(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRuns(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsListWorkflowRuns(Async)");
        }

        return actionsListWorkflowRunsCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);

    }

    /**
     * List workflow runs for a workflow
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ActionsListRequiredWorkflowRuns200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs">List workflow runs for a workflow Documentation</a>
     */
    public ActionsListRequiredWorkflowRuns200Response actionsListWorkflowRuns(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        ApiResponse<ActionsListRequiredWorkflowRuns200Response> localVarResp = actionsListWorkflowRunsWithHttpInfo(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        return localVarResp.getData();
    }

    /**
     * List workflow runs for a workflow
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ApiResponse&lt;ActionsListRequiredWorkflowRuns200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs">List workflow runs for a workflow Documentation</a>
     */
    public ApiResponse<ActionsListRequiredWorkflowRuns200Response> actionsListWorkflowRunsWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunsValidateBeforeCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, null);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow runs for a workflow (asynchronously)
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs">List workflow runs for a workflow Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback<ActionsListRequiredWorkflowRuns200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunsValidateBeforeCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRunsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsForRepoCall(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        if (checkSuiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_suite_id", checkSuiteId));
        }

        if (headSha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head_sha", headSha));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunsForRepoValidateBeforeCall(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRunsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRunsForRepo(Async)");
        }

        return actionsListWorkflowRunsForRepoCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);

    }

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ActionsListRequiredWorkflowRuns200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public ActionsListRequiredWorkflowRuns200Response actionsListWorkflowRunsForRepo(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        ApiResponse<ActionsListRequiredWorkflowRuns200Response> localVarResp = actionsListWorkflowRunsForRepoWithHttpInfo(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha);
        return localVarResp.getData();
    }

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @return ApiResponse&lt;ActionsListRequiredWorkflowRuns200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public ApiResponse<ActionsListRequiredWorkflowRuns200Response> actionsListWorkflowRunsForRepoWithHttpInfo(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunsForRepoValidateBeforeCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, null);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow runs for a repository (asynchronously)
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
     * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsForRepoAsync(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, Integer checkSuiteId, String headSha, final ApiCallback<ActionsListRequiredWorkflowRuns200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunsForRepoValidateBeforeCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, checkSuiteId, headSha, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRequiredWorkflowRuns200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReRunJobForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run">Re-run a job from a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReRunJobForWorkflowRunCall(String owner, String repo, Integer jobId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsReRunJobForWorkflowRunRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReRunJobForWorkflowRunValidateBeforeCall(String owner, String repo, Integer jobId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReRunJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReRunJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling actionsReRunJobForWorkflowRun(Async)");
        }

        return actionsReRunJobForWorkflowRunCall(owner, repo, jobId, actionsReRunJobForWorkflowRunRequest, _callback);

    }

    /**
     * Re-run a job from a workflow run
     * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run">Re-run a job from a workflow run Documentation</a>
     */
    public Object actionsReRunJobForWorkflowRun(String owner, String repo, Integer jobId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsReRunJobForWorkflowRunWithHttpInfo(owner, repo, jobId, actionsReRunJobForWorkflowRunRequest);
        return localVarResp.getData();
    }

    /**
     * Re-run a job from a workflow run
     * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run">Re-run a job from a workflow run Documentation</a>
     */
    public ApiResponse<Object> actionsReRunJobForWorkflowRunWithHttpInfo(String owner, String repo, Integer jobId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsReRunJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, actionsReRunJobForWorkflowRunRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-run a job from a workflow run (asynchronously)
     * Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run">Re-run a job from a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReRunJobForWorkflowRunAsync(String owner, String repo, Integer jobId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReRunJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, actionsReRunJobForWorkflowRunRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReRunWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowCall(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsReRunJobForWorkflowRunRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReRunWorkflowValidateBeforeCall(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReRunWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReRunWorkflow(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsReRunWorkflow(Async)");
        }

        return actionsReRunWorkflowCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, _callback);

    }

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public Object actionsReRunWorkflow(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsReRunWorkflowWithHttpInfo(owner, repo, runId, actionsReRunJobForWorkflowRunRequest);
        return localVarResp.getData();
    }

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public ApiResponse<Object> actionsReRunWorkflowWithHttpInfo(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsReRunWorkflowValidateBeforeCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-run a workflow (asynchronously)
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowAsync(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReRunWorkflowValidateBeforeCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReRunWorkflowFailedJobs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs">Re-run failed jobs from a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowFailedJobsCall(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsReRunJobForWorkflowRunRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReRunWorkflowFailedJobsValidateBeforeCall(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReRunWorkflowFailedJobs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReRunWorkflowFailedJobs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsReRunWorkflowFailedJobs(Async)");
        }

        return actionsReRunWorkflowFailedJobsCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, _callback);

    }

    /**
     * Re-run failed jobs from a workflow run
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs">Re-run failed jobs from a workflow run Documentation</a>
     */
    public Object actionsReRunWorkflowFailedJobs(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsReRunWorkflowFailedJobsWithHttpInfo(owner, repo, runId, actionsReRunJobForWorkflowRunRequest);
        return localVarResp.getData();
    }

    /**
     * Re-run failed jobs from a workflow run
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs">Re-run failed jobs from a workflow run Documentation</a>
     */
    public ApiResponse<Object> actionsReRunWorkflowFailedJobsWithHttpInfo(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsReRunWorkflowFailedJobsValidateBeforeCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-run failed jobs from a workflow run (asynchronously)
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReRunJobForWorkflowRunRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs">Re-run failed jobs from a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowFailedJobsAsync(String owner, String repo, Integer runId, ActionsReRunJobForWorkflowRunRequest actionsReRunJobForWorkflowRunRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReRunWorkflowFailedJobsValidateBeforeCall(owner, repo, runId, actionsReRunJobForWorkflowRunRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization">Remove all custom labels from a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(Async)");
        }

        return actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgCall(org, runnerId, _callback);

    }

    /**
     * Remove all custom labels from a self-hosted runner for an organization
     * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization">Remove all custom labels from a self-hosted runner for an organization Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(String org, Integer runnerId) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgWithHttpInfo(org, runnerId);
        return localVarResp.getData();
    }

    /**
     * Remove all custom labels from a self-hosted runner for an organization
     * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization">Remove all custom labels from a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove all custom labels from a self-hosted runner for an organization (asynchronously)
     * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization">Remove all custom labels from a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgAsync(String org, Integer runnerId, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository">Remove all custom labels from a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(Async)");
        }

        return actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * Remove all custom labels from a self-hosted runner for a repository
     * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository">Remove all custom labels from a self-hosted runner for a repository Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId);
        return localVarResp.getData();
    }

    /**
     * Remove all custom labels from a self-hosted runner for a repository
     * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository">Remove all custom labels from a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove all custom labels from a self-hosted runner for a repository (asynchronously)
     * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository">Remove all custom labels from a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveCustomLabelFromSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization">Remove a custom label from a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForOrgCall(String org, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}/labels/{name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(Async)");
        }

        return actionsRemoveCustomLabelFromSelfHostedRunnerForOrgCall(org, runnerId, name, _callback);

    }

    /**
     * Remove a custom label from a self-hosted runner for an organization
     * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization">Remove a custom label from a self-hosted runner for an organization Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(String org, Integer runnerId, String name) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsRemoveCustomLabelFromSelfHostedRunnerForOrgWithHttpInfo(org, runnerId, name);
        return localVarResp.getData();
    }

    /**
     * Remove a custom label from a self-hosted runner for an organization
     * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization">Remove a custom label from a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsRemoveCustomLabelFromSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveCustomLabelFromSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, name, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a custom label from a self-hosted runner for an organization (asynchronously)
     * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization">Remove a custom label from a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForOrgAsync(String org, Integer runnerId, String name, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveCustomLabelFromSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, name, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveCustomLabelFromSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository">Remove a custom label from a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(Async)");
        }

        return actionsRemoveCustomLabelFromSelfHostedRunnerForRepoCall(owner, repo, runnerId, name, _callback);

    }

    /**
     * Remove a custom label from a self-hosted runner for a repository
     * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository">Remove a custom label from a self-hosted runner for a repository Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId, String name) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsRemoveCustomLabelFromSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId, name);
        return localVarResp.getData();
    }

    /**
     * Remove a custom label from a self-hosted runner for a repository
     * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository">Remove a custom label from a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsRemoveCustomLabelFromSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId, String name) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveCustomLabelFromSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, name, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a custom label from a self-hosted runner for a repository (asynchronously)
     * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository">Remove a custom label from a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsRemoveCustomLabelFromSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, String name, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveCustomLabelFromSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, name, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveSelectedRepoFromOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        return actionsRemoveSelectedRepoFromOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public void actionsRemoveSelectedRepoFromOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        actionsRemoveSelectedRepoFromOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveSelectedRepoFromOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove selected repository from an organization secret (asynchronously)
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveSelectedRepoFromOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable">Remove selected repository from an organization variable Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgVariableCall(String org, String name, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveSelectedRepoFromOrgVariableValidateBeforeCall(String org, String name, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsRemoveSelectedRepoFromOrgVariable(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgVariable(Async)");
        }

        return actionsRemoveSelectedRepoFromOrgVariableCall(org, name, repositoryId, _callback);

    }

    /**
     * Remove selected repository from an organization variable
     * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable">Remove selected repository from an organization variable Documentation</a>
     */
    public void actionsRemoveSelectedRepoFromOrgVariable(String org, String name, Integer repositoryId) throws ApiException {
        actionsRemoveSelectedRepoFromOrgVariableWithHttpInfo(org, name, repositoryId);
    }

    /**
     * Remove selected repository from an organization variable
     * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable">Remove selected repository from an organization variable Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveSelectedRepoFromOrgVariableWithHttpInfo(String org, String name, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgVariableValidateBeforeCall(org, name, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove selected repository from an organization variable (asynchronously)
     * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable">Remove selected repository from an organization variable Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgVariableAsync(String org, String name, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgVariableValidateBeforeCall(org, name, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveSelectedRepoFromRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow">Remove a selected repository from required workflow Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromRequiredWorkflowCall(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveSelectedRepoFromRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsRemoveSelectedRepoFromRequiredWorkflow(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromRequiredWorkflow(Async)");
        }

        return actionsRemoveSelectedRepoFromRequiredWorkflowCall(org, requiredWorkflowId, repositoryId, _callback);

    }

    /**
     * Remove a selected repository from required workflow
     * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow">Remove a selected repository from required workflow Documentation</a>
     */
    public void actionsRemoveSelectedRepoFromRequiredWorkflow(String org, Integer requiredWorkflowId, Integer repositoryId) throws ApiException {
        actionsRemoveSelectedRepoFromRequiredWorkflowWithHttpInfo(org, requiredWorkflowId, repositoryId);
    }

    /**
     * Remove a selected repository from required workflow
     * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow">Remove a selected repository from required workflow Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveSelectedRepoFromRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a selected repository from required workflow (asynchronously)
     * Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow">Remove a selected repository from required workflow Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromRequiredWorkflowAsync(String org, Integer requiredWorkflowId, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReviewCustomGatesForRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewCustomGatesForRunRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run">Review custom deployment protection rules for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReviewCustomGatesForRunCall(String owner, String repo, Integer runId, ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsReviewCustomGatesForRunRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReviewCustomGatesForRunValidateBeforeCall(String owner, String repo, Integer runId, ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReviewCustomGatesForRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReviewCustomGatesForRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsReviewCustomGatesForRun(Async)");
        }

        // verify the required parameter 'actionsReviewCustomGatesForRunRequest' is set
        if (actionsReviewCustomGatesForRunRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsReviewCustomGatesForRunRequest' when calling actionsReviewCustomGatesForRun(Async)");
        }

        return actionsReviewCustomGatesForRunCall(owner, repo, runId, actionsReviewCustomGatesForRunRequest, _callback);

    }

    /**
     * Review custom deployment protection rules for a workflow run
     * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  GitHub Apps must have read and write permission for **Deployments** to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewCustomGatesForRunRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run">Review custom deployment protection rules for a workflow run Documentation</a>
     */
    public void actionsReviewCustomGatesForRun(String owner, String repo, Integer runId, ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest) throws ApiException {
        actionsReviewCustomGatesForRunWithHttpInfo(owner, repo, runId, actionsReviewCustomGatesForRunRequest);
    }

    /**
     * Review custom deployment protection rules for a workflow run
     * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  GitHub Apps must have read and write permission for **Deployments** to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewCustomGatesForRunRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run">Review custom deployment protection rules for a workflow run Documentation</a>
     */
    public ApiResponse<Void> actionsReviewCustomGatesForRunWithHttpInfo(String owner, String repo, Integer runId, ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsReviewCustomGatesForRunValidateBeforeCall(owner, repo, runId, actionsReviewCustomGatesForRunRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Review custom deployment protection rules for a workflow run (asynchronously)
     * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  GitHub Apps must have read and write permission for **Deployments** to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewCustomGatesForRunRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run">Review custom deployment protection rules for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReviewCustomGatesForRunAsync(String owner, String repo, Integer runId, ActionsReviewCustomGatesForRunRequest actionsReviewCustomGatesForRunRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReviewCustomGatesForRunValidateBeforeCall(owner, repo, runId, actionsReviewCustomGatesForRunRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReviewPendingDeploymentsForRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewPendingDeploymentsForRunRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run">Review pending deployments for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReviewPendingDeploymentsForRunCall(String owner, String repo, Integer runId, ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsReviewPendingDeploymentsForRunRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReviewPendingDeploymentsForRunValidateBeforeCall(String owner, String repo, Integer runId, ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReviewPendingDeploymentsForRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReviewPendingDeploymentsForRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsReviewPendingDeploymentsForRun(Async)");
        }

        // verify the required parameter 'actionsReviewPendingDeploymentsForRunRequest' is set
        if (actionsReviewPendingDeploymentsForRunRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsReviewPendingDeploymentsForRunRequest' when calling actionsReviewPendingDeploymentsForRun(Async)");
        }

        return actionsReviewPendingDeploymentsForRunCall(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest, _callback);

    }

    /**
     * Review pending deployments for a workflow run
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewPendingDeploymentsForRunRequest  (required)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run">Review pending deployments for a workflow run Documentation</a>
     */
    public List<Deployment> actionsReviewPendingDeploymentsForRun(String owner, String repo, Integer runId, ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = actionsReviewPendingDeploymentsForRunWithHttpInfo(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest);
        return localVarResp.getData();
    }

    /**
     * Review pending deployments for a workflow run
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewPendingDeploymentsForRunRequest  (required)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run">Review pending deployments for a workflow run Documentation</a>
     */
    public ApiResponse<List<Deployment>> actionsReviewPendingDeploymentsForRunWithHttpInfo(String owner, String repo, Integer runId, ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsReviewPendingDeploymentsForRunValidateBeforeCall(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Review pending deployments for a workflow run (asynchronously)
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param actionsReviewPendingDeploymentsForRunRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run">Review pending deployments for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsReviewPendingDeploymentsForRunAsync(String owner, String repo, Integer runId, ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReviewPendingDeploymentsForRunValidateBeforeCall(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetAllowedActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions and reusable workflows for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsOrganizationCall(String org, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedActions;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/selected-actions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetAllowedActionsOrganizationValidateBeforeCall(String org, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetAllowedActionsOrganization(Async)");
        }

        return actionsSetAllowedActionsOrganizationCall(org, selectedActions, _callback);

    }

    /**
     * Set allowed actions and reusable workflows for an organization
     * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions and reusable workflows for an organization Documentation</a>
     */
    public void actionsSetAllowedActionsOrganization(String org, SelectedActions selectedActions) throws ApiException {
        actionsSetAllowedActionsOrganizationWithHttpInfo(org, selectedActions);
    }

    /**
     * Set allowed actions and reusable workflows for an organization
     * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions and reusable workflows for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetAllowedActionsOrganizationWithHttpInfo(String org, SelectedActions selectedActions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetAllowedActionsOrganizationValidateBeforeCall(org, selectedActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set allowed actions and reusable workflows for an organization (asynchronously)
     * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions and reusable workflows for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsOrganizationAsync(String org, SelectedActions selectedActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetAllowedActionsOrganizationValidateBeforeCall(org, selectedActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetAllowedActionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions and reusable workflows for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsRepositoryCall(String owner, String repo, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedActions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetAllowedActionsRepositoryValidateBeforeCall(String owner, String repo, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetAllowedActionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetAllowedActionsRepository(Async)");
        }

        return actionsSetAllowedActionsRepositoryCall(owner, repo, selectedActions, _callback);

    }

    /**
     * Set allowed actions and reusable workflows for a repository
     * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions and reusable workflows for a repository Documentation</a>
     */
    public void actionsSetAllowedActionsRepository(String owner, String repo, SelectedActions selectedActions) throws ApiException {
        actionsSetAllowedActionsRepositoryWithHttpInfo(owner, repo, selectedActions);
    }

    /**
     * Set allowed actions and reusable workflows for a repository
     * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions and reusable workflows for a repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetAllowedActionsRepositoryWithHttpInfo(String owner, String repo, SelectedActions selectedActions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetAllowedActionsRepositoryValidateBeforeCall(owner, repo, selectedActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set allowed actions and reusable workflows for a repository (asynchronously)
     * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions and reusable workflows for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsRepositoryAsync(String owner, String repo, SelectedActions selectedActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetAllowedActionsRepositoryValidateBeforeCall(owner, repo, selectedActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetCustomLabelsForSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization">Set custom labels for a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForOrgCall(String org, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}/labels"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' is set
        if (actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg(Async)");
        }

        return actionsSetCustomLabelsForSelfHostedRunnerForOrgCall(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, _callback);

    }

    /**
     * Set custom labels for a self-hosted runner for an organization
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization">Set custom labels for a self-hosted runner for an organization Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsSetCustomLabelsForSelfHostedRunnerForOrg(String org, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsSetCustomLabelsForSelfHostedRunnerForOrgWithHttpInfo(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Set custom labels for a self-hosted runner for an organization
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization">Set custom labels for a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsSetCustomLabelsForSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetCustomLabelsForSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set custom labels for a self-hosted runner for an organization (asynchronously)
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization">Set custom labels for a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForOrgAsync(String org, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetCustomLabelsForSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetCustomLabelsForSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository">Set custom labels for a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' is set
        if (actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo(Async)");
        }

        return actionsSetCustomLabelsForSelfHostedRunnerForRepoCall(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, _callback);

    }

    /**
     * Set custom labels for a self-hosted runner for a repository
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @return ActionsListLabelsForSelfHostedRunnerForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository">Set custom labels for a self-hosted runner for a repository Documentation</a>
     */
    public ActionsListLabelsForSelfHostedRunnerForOrg200Response actionsSetCustomLabelsForSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) throws ApiException {
        ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> localVarResp = actionsSetCustomLabelsForSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Set custom labels for a self-hosted runner for a repository
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @return ApiResponse&lt;ActionsListLabelsForSelfHostedRunnerForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository">Set custom labels for a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<ActionsListLabelsForSelfHostedRunnerForOrg200Response> actionsSetCustomLabelsForSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetCustomLabelsForSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, null);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set custom labels for a self-hosted runner for a repository (asynchronously)
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository">Set custom labels for a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetCustomLabelsForSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, final ApiCallback<ActionsListLabelsForSelfHostedRunnerForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetCustomLabelsForSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<ActionsListLabelsForSelfHostedRunnerForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetCustomOidcSubClaimForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsOIDCSubjectCustomizationForARepository  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Set the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetCustomOidcSubClaimForRepoCall(String owner, String repo, ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsOIDCSubjectCustomizationForARepository;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/oidc/customization/sub"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetCustomOidcSubClaimForRepoValidateBeforeCall(String owner, String repo, ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetCustomOidcSubClaimForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetCustomOidcSubClaimForRepo(Async)");
        }

        // verify the required parameter 'actionsOIDCSubjectCustomizationForARepository' is set
        if (actionsOIDCSubjectCustomizationForARepository == null) {
            throw new ApiException("Missing the required parameter 'actionsOIDCSubjectCustomizationForARepository' when calling actionsSetCustomOidcSubClaimForRepo(Async)");
        }

        return actionsSetCustomOidcSubClaimForRepoCall(owner, repo, actionsOIDCSubjectCustomizationForARepository, _callback);

    }

    /**
     * Set the customization template for an OIDC subject claim for a repository
     * Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsOIDCSubjectCustomizationForARepository  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Set the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public Object actionsSetCustomOidcSubClaimForRepo(String owner, String repo, ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository) throws ApiException {
        ApiResponse<Object> localVarResp = actionsSetCustomOidcSubClaimForRepoWithHttpInfo(owner, repo, actionsOIDCSubjectCustomizationForARepository);
        return localVarResp.getData();
    }

    /**
     * Set the customization template for an OIDC subject claim for a repository
     * Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsOIDCSubjectCustomizationForARepository  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Set the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public ApiResponse<Object> actionsSetCustomOidcSubClaimForRepoWithHttpInfo(String owner, String repo, ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository) throws ApiException {
        okhttp3.Call localVarCall = actionsSetCustomOidcSubClaimForRepoValidateBeforeCall(owner, repo, actionsOIDCSubjectCustomizationForARepository, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the customization template for an OIDC subject claim for a repository (asynchronously)
     * Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsOIDCSubjectCustomizationForARepository  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository">Set the customization template for an OIDC subject claim for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetCustomOidcSubClaimForRepoAsync(String owner, String repo, ActionsOIDCSubjectCustomizationForARepository actionsOIDCSubjectCustomizationForARepository, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetCustomOidcSubClaimForRepoValidateBeforeCall(owner, repo, actionsOIDCSubjectCustomizationForARepository, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsDefaultWorkflowPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions">Set default workflow permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationCall(String org, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetDefaultWorkflowPermissions;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/workflow"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(String org, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(Async)");
        }

        return actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationCall(org, actionsSetDefaultWorkflowPermissions, _callback);

    }

    /**
     * Set default workflow permissions for an organization
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions">Set default workflow permissions for an organization Documentation</a>
     */
    public void actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(String org, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions) throws ApiException {
        actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationWithHttpInfo(org, actionsSetDefaultWorkflowPermissions);
    }

    /**
     * Set default workflow permissions for an organization
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions">Set default workflow permissions for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationWithHttpInfo(String org, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(org, actionsSetDefaultWorkflowPermissions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set default workflow permissions for an organization (asynchronously)
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions">Set default workflow permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationAsync(String org, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationValidateBeforeCall(org, actionsSetDefaultWorkflowPermissions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsDefaultWorkflowPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict response when changing a setting is prevented by the owning organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository">Set default workflow permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryCall(String owner, String repo, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetDefaultWorkflowPermissions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/workflow"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(String owner, String repo, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository(Async)");
        }

        // verify the required parameter 'actionsSetDefaultWorkflowPermissions' is set
        if (actionsSetDefaultWorkflowPermissions == null) {
            throw new ApiException("Missing the required parameter 'actionsSetDefaultWorkflowPermissions' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository(Async)");
        }

        return actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryCall(owner, repo, actionsSetDefaultWorkflowPermissions, _callback);

    }

    /**
     * Set default workflow permissions for a repository
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict response when changing a setting is prevented by the owning organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository">Set default workflow permissions for a repository Documentation</a>
     */
    public void actionsSetGithubActionsDefaultWorkflowPermissionsRepository(String owner, String repo, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions) throws ApiException {
        actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryWithHttpInfo(owner, repo, actionsSetDefaultWorkflowPermissions);
    }

    /**
     * Set default workflow permissions for a repository
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict response when changing a setting is prevented by the owning organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository">Set default workflow permissions for a repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryWithHttpInfo(String owner, String repo, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetDefaultWorkflowPermissions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set default workflow permissions for a repository (asynchronously)
     * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetDefaultWorkflowPermissions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict response when changing a setting is prevented by the owning organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository">Set default workflow permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryAsync(String owner, String repo, ActionsSetDefaultWorkflowPermissions actionsSetDefaultWorkflowPermissions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetDefaultWorkflowPermissions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsOrganizationCall(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetGithubActionsPermissionsOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetGithubActionsPermissionsOrganization(Async)");
        }

        // verify the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' is set
        if (actionsSetGithubActionsPermissionsOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' when calling actionsSetGithubActionsPermissionsOrganization(Async)");
        }

        return actionsSetGithubActionsPermissionsOrganizationCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, _callback);

    }

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public void actionsSetGithubActionsPermissionsOrganization(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest) throws ApiException {
        actionsSetGithubActionsPermissionsOrganizationWithHttpInfo(org, actionsSetGithubActionsPermissionsOrganizationRequest);
    }

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsPermissionsOrganizationWithHttpInfo(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set GitHub Actions permissions for an organization (asynchronously)
     * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsOrganizationAsync(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsRepositoryCall(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetGithubActionsPermissionsRepositoryRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' is set
        if (actionsSetGithubActionsPermissionsRepositoryRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        return actionsSetGithubActionsPermissionsRepositoryCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, _callback);

    }

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public void actionsSetGithubActionsPermissionsRepository(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest) throws ApiException {
        actionsSetGithubActionsPermissionsRepositoryWithHttpInfo(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest);
    }

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsPermissionsRepositoryWithHttpInfo(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set GitHub Actions permissions for a repository (asynchronously)
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsRepositoryAsync(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgSecretCall(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedReposForOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'actionsSetSelectedReposForOrgSecretRequest' is set
        if (actionsSetSelectedReposForOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedReposForOrgSecretRequest' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        return actionsSetSelectedReposForOrgSecretCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, _callback);

    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public void actionsSetSelectedReposForOrgSecret(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest) throws ApiException {
        actionsSetSelectedReposForOrgSecretWithHttpInfo(org, secretName, actionsSetSelectedReposForOrgSecretRequest);
    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories for an organization secret (asynchronously)
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgSecretAsync(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedReposForOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsSetSelectedReposForOrgVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable">Set selected repositories for an organization variable Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgVariableCall(String org, String name, ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedReposForOrgVariableRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedReposForOrgVariableValidateBeforeCall(String org, String name, ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsSetSelectedReposForOrgVariable(Async)");
        }

        // verify the required parameter 'actionsSetSelectedReposForOrgVariableRequest' is set
        if (actionsSetSelectedReposForOrgVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedReposForOrgVariableRequest' when calling actionsSetSelectedReposForOrgVariable(Async)");
        }

        return actionsSetSelectedReposForOrgVariableCall(org, name, actionsSetSelectedReposForOrgVariableRequest, _callback);

    }

    /**
     * Set selected repositories for an organization variable
     * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsSetSelectedReposForOrgVariableRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable">Set selected repositories for an organization variable Documentation</a>
     */
    public void actionsSetSelectedReposForOrgVariable(String org, String name, ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest) throws ApiException {
        actionsSetSelectedReposForOrgVariableWithHttpInfo(org, name, actionsSetSelectedReposForOrgVariableRequest);
    }

    /**
     * Set selected repositories for an organization variable
     * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsSetSelectedReposForOrgVariableRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable">Set selected repositories for an organization variable Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedReposForOrgVariableWithHttpInfo(String org, String name, ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgVariableValidateBeforeCall(org, name, actionsSetSelectedReposForOrgVariableRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories for an organization variable (asynchronously)
     * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsSetSelectedReposForOrgVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Response when the visibility of the variable is not set to &#x60;selected&#x60; </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable">Set selected repositories for an organization variable Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgVariableAsync(String org, String name, ActionsSetSelectedReposForOrgVariableRequest actionsSetSelectedReposForOrgVariableRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgVariableValidateBeforeCall(org, name, actionsSetSelectedReposForOrgVariableRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedReposToRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsSetSelectedReposToRequiredWorkflowRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow">Sets repositories for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposToRequiredWorkflowCall(String org, Integer requiredWorkflowId, ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedReposToRequiredWorkflowRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedReposToRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedReposToRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsSetSelectedReposToRequiredWorkflow(Async)");
        }

        // verify the required parameter 'actionsSetSelectedReposToRequiredWorkflowRequest' is set
        if (actionsSetSelectedReposToRequiredWorkflowRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedReposToRequiredWorkflowRequest' when calling actionsSetSelectedReposToRequiredWorkflow(Async)");
        }

        return actionsSetSelectedReposToRequiredWorkflowCall(org, requiredWorkflowId, actionsSetSelectedReposToRequiredWorkflowRequest, _callback);

    }

    /**
     * Sets repositories for a required workflow
     * Sets the repositories for a required workflow that is required for selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsSetSelectedReposToRequiredWorkflowRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow">Sets repositories for a required workflow Documentation</a>
     */
    public void actionsSetSelectedReposToRequiredWorkflow(String org, Integer requiredWorkflowId, ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest) throws ApiException {
        actionsSetSelectedReposToRequiredWorkflowWithHttpInfo(org, requiredWorkflowId, actionsSetSelectedReposToRequiredWorkflowRequest);
    }

    /**
     * Sets repositories for a required workflow
     * Sets the repositories for a required workflow that is required for selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsSetSelectedReposToRequiredWorkflowRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow">Sets repositories for a required workflow Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedReposToRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId, ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedReposToRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, actionsSetSelectedReposToRequiredWorkflowRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets repositories for a required workflow (asynchronously)
     * Sets the repositories for a required workflow that is required for selected repositories.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsSetSelectedReposToRequiredWorkflowRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow">Sets repositories for a required workflow Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposToRequiredWorkflowAsync(String org, Integer requiredWorkflowId, ActionsSetSelectedReposToRequiredWorkflowRequest actionsSetSelectedReposToRequiredWorkflowRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedReposToRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, actionsSetSelectedReposToRequiredWorkflowRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedRepositoriesEnabledGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCall(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' is set
        if (actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        return actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, _callback);

    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public void actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) throws ApiException {
        actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest);
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization (asynchronously)
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationAsync(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetWorkflowAccessToRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsWorkflowAccessToRepository  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository">Set the level of access for workflows outside of the repository Documentation</a>
     */
    public okhttp3.Call actionsSetWorkflowAccessToRepositoryCall(String owner, String repo, ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsWorkflowAccessToRepository;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/access"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetWorkflowAccessToRepositoryValidateBeforeCall(String owner, String repo, ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetWorkflowAccessToRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetWorkflowAccessToRepository(Async)");
        }

        // verify the required parameter 'actionsWorkflowAccessToRepository' is set
        if (actionsWorkflowAccessToRepository == null) {
            throw new ApiException("Missing the required parameter 'actionsWorkflowAccessToRepository' when calling actionsSetWorkflowAccessToRepository(Async)");
        }

        return actionsSetWorkflowAccessToRepositoryCall(owner, repo, actionsWorkflowAccessToRepository, _callback);

    }

    /**
     * Set the level of access for workflows outside of the repository
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsWorkflowAccessToRepository  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository">Set the level of access for workflows outside of the repository Documentation</a>
     */
    public void actionsSetWorkflowAccessToRepository(String owner, String repo, ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository) throws ApiException {
        actionsSetWorkflowAccessToRepositoryWithHttpInfo(owner, repo, actionsWorkflowAccessToRepository);
    }

    /**
     * Set the level of access for workflows outside of the repository
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsWorkflowAccessToRepository  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository">Set the level of access for workflows outside of the repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetWorkflowAccessToRepositoryWithHttpInfo(String owner, String repo, ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository) throws ApiException {
        okhttp3.Call localVarCall = actionsSetWorkflowAccessToRepositoryValidateBeforeCall(owner, repo, actionsWorkflowAccessToRepository, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the level of access for workflows outside of the repository (asynchronously)
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the repository &#x60;administration&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsWorkflowAccessToRepository  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository">Set the level of access for workflows outside of the repository Documentation</a>
     */
    public okhttp3.Call actionsSetWorkflowAccessToRepositoryAsync(String owner, String repo, ActionsWorkflowAccessToRepository actionsWorkflowAccessToRepository, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetWorkflowAccessToRepositoryValidateBeforeCall(owner, repo, actionsWorkflowAccessToRepository, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsUpdateEnvironmentVariable
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-environment-variable">Update an environment variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateEnvironmentVariableCall(Integer repositoryId, String name, String environmentName, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsUpdateRepoVariableRequest;

        // create path and map variables
        String localVarPath = "/repositories/{repository_id}/environments/{environment_name}/variables/{name}"
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "environment_name" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsUpdateEnvironmentVariableValidateBeforeCall(Integer repositoryId, String name, String environmentName, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsUpdateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsUpdateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling actionsUpdateEnvironmentVariable(Async)");
        }

        // verify the required parameter 'actionsUpdateRepoVariableRequest' is set
        if (actionsUpdateRepoVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsUpdateRepoVariableRequest' when calling actionsUpdateEnvironmentVariable(Async)");
        }

        return actionsUpdateEnvironmentVariableCall(repositoryId, name, environmentName, actionsUpdateRepoVariableRequest, _callback);

    }

    /**
     * Update an environment variable
     * Updates an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-environment-variable">Update an environment variable Documentation</a>
     */
    public void actionsUpdateEnvironmentVariable(Integer repositoryId, String name, String environmentName, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest) throws ApiException {
        actionsUpdateEnvironmentVariableWithHttpInfo(repositoryId, name, environmentName, actionsUpdateRepoVariableRequest);
    }

    /**
     * Update an environment variable
     * Updates an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-environment-variable">Update an environment variable Documentation</a>
     */
    public ApiResponse<Void> actionsUpdateEnvironmentVariableWithHttpInfo(Integer repositoryId, String name, String environmentName, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsUpdateEnvironmentVariableValidateBeforeCall(repositoryId, name, environmentName, actionsUpdateRepoVariableRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an environment variable (asynchronously)
     * Updates an environment variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;environment:write&#x60; repository permission to use this endpoint.
     * @param repositoryId The unique identifier of the repository. (required)
     * @param name The name of the variable. (required)
     * @param environmentName The name of the environment. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-environment-variable">Update an environment variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateEnvironmentVariableAsync(Integer repositoryId, String name, String environmentName, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsUpdateEnvironmentVariableValidateBeforeCall(repositoryId, name, environmentName, actionsUpdateRepoVariableRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsUpdateOrgVariable
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateOrgVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-organization-variable">Update an organization variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateOrgVariableCall(String org, String name, ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsUpdateOrgVariableRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/variables/{name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsUpdateOrgVariableValidateBeforeCall(String org, String name, ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsUpdateOrgVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsUpdateOrgVariable(Async)");
        }

        // verify the required parameter 'actionsUpdateOrgVariableRequest' is set
        if (actionsUpdateOrgVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsUpdateOrgVariableRequest' when calling actionsUpdateOrgVariable(Async)");
        }

        return actionsUpdateOrgVariableCall(org, name, actionsUpdateOrgVariableRequest, _callback);

    }

    /**
     * Update an organization variable
     * Updates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateOrgVariableRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-organization-variable">Update an organization variable Documentation</a>
     */
    public void actionsUpdateOrgVariable(String org, String name, ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest) throws ApiException {
        actionsUpdateOrgVariableWithHttpInfo(org, name, actionsUpdateOrgVariableRequest);
    }

    /**
     * Update an organization variable
     * Updates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateOrgVariableRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-organization-variable">Update an organization variable Documentation</a>
     */
    public ApiResponse<Void> actionsUpdateOrgVariableWithHttpInfo(String org, String name, ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsUpdateOrgVariableValidateBeforeCall(org, name, actionsUpdateOrgVariableRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an organization variable (asynchronously)
     * Updates an organization variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;organization_actions_variables:write&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateOrgVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-an-organization-variable">Update an organization variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateOrgVariableAsync(String org, String name, ActionsUpdateOrgVariableRequest actionsUpdateOrgVariableRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsUpdateOrgVariableValidateBeforeCall(org, name, actionsUpdateOrgVariableRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsUpdateRepoVariable
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-a-repository-variable">Update a repository variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateRepoVariableCall(String owner, String repo, String name, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsUpdateRepoVariableRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/variables/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsUpdateRepoVariableValidateBeforeCall(String owner, String repo, String name, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsUpdateRepoVariable(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsUpdateRepoVariable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionsUpdateRepoVariable(Async)");
        }

        // verify the required parameter 'actionsUpdateRepoVariableRequest' is set
        if (actionsUpdateRepoVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsUpdateRepoVariableRequest' when calling actionsUpdateRepoVariable(Async)");
        }

        return actionsUpdateRepoVariableCall(owner, repo, name, actionsUpdateRepoVariableRequest, _callback);

    }

    /**
     * Update a repository variable
     * Updates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-a-repository-variable">Update a repository variable Documentation</a>
     */
    public void actionsUpdateRepoVariable(String owner, String repo, String name, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest) throws ApiException {
        actionsUpdateRepoVariableWithHttpInfo(owner, repo, name, actionsUpdateRepoVariableRequest);
    }

    /**
     * Update a repository variable
     * Updates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-a-repository-variable">Update a repository variable Documentation</a>
     */
    public ApiResponse<Void> actionsUpdateRepoVariableWithHttpInfo(String owner, String repo, String name, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsUpdateRepoVariableValidateBeforeCall(owner, repo, name, actionsUpdateRepoVariableRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a repository variable (asynchronously)
     * Updates a repository variable that you can reference in a GitHub Actions workflow. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions_variables:write&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param name The name of the variable. (required)
     * @param actionsUpdateRepoVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/actions/variables#update-a-repository-variable">Update a repository variable Documentation</a>
     */
    public okhttp3.Call actionsUpdateRepoVariableAsync(String owner, String repo, String name, ActionsUpdateRepoVariableRequest actionsUpdateRepoVariableRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsUpdateRepoVariableValidateBeforeCall(owner, repo, name, actionsUpdateRepoVariableRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsUpdateRequiredWorkflow
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsUpdateRequiredWorkflowRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#update-a-required-workflow">Update a required workflow Documentation</a>
     */
    public okhttp3.Call actionsUpdateRequiredWorkflowCall(String org, Integer requiredWorkflowId, ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsUpdateRequiredWorkflowRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/required_workflows/{required_workflow_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "required_workflow_id" + "}", localVarApiClient.escapeString(requiredWorkflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsUpdateRequiredWorkflowValidateBeforeCall(String org, Integer requiredWorkflowId, ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsUpdateRequiredWorkflow(Async)");
        }

        // verify the required parameter 'requiredWorkflowId' is set
        if (requiredWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'requiredWorkflowId' when calling actionsUpdateRequiredWorkflow(Async)");
        }

        // verify the required parameter 'actionsUpdateRequiredWorkflowRequest' is set
        if (actionsUpdateRequiredWorkflowRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsUpdateRequiredWorkflowRequest' when calling actionsUpdateRequiredWorkflow(Async)");
        }

        return actionsUpdateRequiredWorkflowCall(org, requiredWorkflowId, actionsUpdateRequiredWorkflowRequest, _callback);

    }

    /**
     * Update a required workflow
     * Update a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsUpdateRequiredWorkflowRequest  (required)
     * @return RequiredWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#update-a-required-workflow">Update a required workflow Documentation</a>
     */
    public RequiredWorkflow actionsUpdateRequiredWorkflow(String org, Integer requiredWorkflowId, ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest) throws ApiException {
        ApiResponse<RequiredWorkflow> localVarResp = actionsUpdateRequiredWorkflowWithHttpInfo(org, requiredWorkflowId, actionsUpdateRequiredWorkflowRequest);
        return localVarResp.getData();
    }

    /**
     * Update a required workflow
     * Update a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsUpdateRequiredWorkflowRequest  (required)
     * @return ApiResponse&lt;RequiredWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#update-a-required-workflow">Update a required workflow Documentation</a>
     */
    public ApiResponse<RequiredWorkflow> actionsUpdateRequiredWorkflowWithHttpInfo(String org, Integer requiredWorkflowId, ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsUpdateRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, actionsUpdateRequiredWorkflowRequest, null);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a required workflow (asynchronously)
     * Update a required workflow in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  For more information, see \&quot;[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows).\&quot;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param requiredWorkflowId The unique identifier of the required workflow. (required)
     * @param actionsUpdateRequiredWorkflowRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/actions#update-a-required-workflow">Update a required workflow Documentation</a>
     */
    public okhttp3.Call actionsUpdateRequiredWorkflowAsync(String org, Integer requiredWorkflowId, ActionsUpdateRequiredWorkflowRequest actionsUpdateRequiredWorkflowRequest, final ApiCallback<RequiredWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsUpdateRequiredWorkflowValidateBeforeCall(org, requiredWorkflowId, actionsUpdateRequiredWorkflowRequest, _callback);
        Type localVarReturnType = new TypeToken<RequiredWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
