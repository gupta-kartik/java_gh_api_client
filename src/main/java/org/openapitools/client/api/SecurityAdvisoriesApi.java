/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.PrivateVulnerabilityReportCreate;
import org.openapitools.client.model.RepositoryAdvisory;
import org.openapitools.client.model.RepositoryAdvisoryCreate;
import org.openapitools.client.model.RepositoryAdvisoryUpdate;
import org.openapitools.client.model.ScimError;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecurityAdvisoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityAdvisoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityAdvisoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for securityAdvisoriesCreatePrivateVulnerabilityReport
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param privateVulnerabilityReportCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability">Privately report a security vulnerability Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesCreatePrivateVulnerabilityReportCall(String owner, String repo, PrivateVulnerabilityReportCreate privateVulnerabilityReportCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = privateVulnerabilityReportCreate;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/security-advisories/reports"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityAdvisoriesCreatePrivateVulnerabilityReportValidateBeforeCall(String owner, String repo, PrivateVulnerabilityReportCreate privateVulnerabilityReportCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling securityAdvisoriesCreatePrivateVulnerabilityReport(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling securityAdvisoriesCreatePrivateVulnerabilityReport(Async)");
        }

        // verify the required parameter 'privateVulnerabilityReportCreate' is set
        if (privateVulnerabilityReportCreate == null) {
            throw new ApiException("Missing the required parameter 'privateVulnerabilityReportCreate' when calling securityAdvisoriesCreatePrivateVulnerabilityReport(Async)");
        }

        return securityAdvisoriesCreatePrivateVulnerabilityReportCall(owner, repo, privateVulnerabilityReportCreate, _callback);

    }

    /**
     * Privately report a security vulnerability
     * Report a security vulnerability to the maintainers of the repository. See \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot; for more information about private vulnerability reporting.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param privateVulnerabilityReportCreate  (required)
     * @return RepositoryAdvisory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability">Privately report a security vulnerability Documentation</a>
     */
    public RepositoryAdvisory securityAdvisoriesCreatePrivateVulnerabilityReport(String owner, String repo, PrivateVulnerabilityReportCreate privateVulnerabilityReportCreate) throws ApiException {
        ApiResponse<RepositoryAdvisory> localVarResp = securityAdvisoriesCreatePrivateVulnerabilityReportWithHttpInfo(owner, repo, privateVulnerabilityReportCreate);
        return localVarResp.getData();
    }

    /**
     * Privately report a security vulnerability
     * Report a security vulnerability to the maintainers of the repository. See \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot; for more information about private vulnerability reporting.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param privateVulnerabilityReportCreate  (required)
     * @return ApiResponse&lt;RepositoryAdvisory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability">Privately report a security vulnerability Documentation</a>
     */
    public ApiResponse<RepositoryAdvisory> securityAdvisoriesCreatePrivateVulnerabilityReportWithHttpInfo(String owner, String repo, PrivateVulnerabilityReportCreate privateVulnerabilityReportCreate) throws ApiException {
        okhttp3.Call localVarCall = securityAdvisoriesCreatePrivateVulnerabilityReportValidateBeforeCall(owner, repo, privateVulnerabilityReportCreate, null);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Privately report a security vulnerability (asynchronously)
     * Report a security vulnerability to the maintainers of the repository. See \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot; for more information about private vulnerability reporting.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param privateVulnerabilityReportCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability">Privately report a security vulnerability Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesCreatePrivateVulnerabilityReportAsync(String owner, String repo, PrivateVulnerabilityReportCreate privateVulnerabilityReportCreate, final ApiCallback<RepositoryAdvisory> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityAdvisoriesCreatePrivateVulnerabilityReportValidateBeforeCall(owner, repo, privateVulnerabilityReportCreate, _callback);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityAdvisoriesCreateRepositoryAdvisory
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param repositoryAdvisoryCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory">Create a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesCreateRepositoryAdvisoryCall(String owner, String repo, RepositoryAdvisoryCreate repositoryAdvisoryCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repositoryAdvisoryCreate;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/security-advisories"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityAdvisoriesCreateRepositoryAdvisoryValidateBeforeCall(String owner, String repo, RepositoryAdvisoryCreate repositoryAdvisoryCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling securityAdvisoriesCreateRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling securityAdvisoriesCreateRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'repositoryAdvisoryCreate' is set
        if (repositoryAdvisoryCreate == null) {
            throw new ApiException("Missing the required parameter 'repositoryAdvisoryCreate' when calling securityAdvisoriesCreateRepositoryAdvisory(Async)");
        }

        return securityAdvisoriesCreateRepositoryAdvisoryCall(owner, repo, repositoryAdvisoryCreate, _callback);

    }

    /**
     * Create a repository security advisory
     * Creates a new repository security advisory. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to create a draft repository security advisory, you must be a security manager or administrator of that repository.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param repositoryAdvisoryCreate  (required)
     * @return RepositoryAdvisory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory">Create a repository security advisory Documentation</a>
     */
    public RepositoryAdvisory securityAdvisoriesCreateRepositoryAdvisory(String owner, String repo, RepositoryAdvisoryCreate repositoryAdvisoryCreate) throws ApiException {
        ApiResponse<RepositoryAdvisory> localVarResp = securityAdvisoriesCreateRepositoryAdvisoryWithHttpInfo(owner, repo, repositoryAdvisoryCreate);
        return localVarResp.getData();
    }

    /**
     * Create a repository security advisory
     * Creates a new repository security advisory. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to create a draft repository security advisory, you must be a security manager or administrator of that repository.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param repositoryAdvisoryCreate  (required)
     * @return ApiResponse&lt;RepositoryAdvisory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory">Create a repository security advisory Documentation</a>
     */
    public ApiResponse<RepositoryAdvisory> securityAdvisoriesCreateRepositoryAdvisoryWithHttpInfo(String owner, String repo, RepositoryAdvisoryCreate repositoryAdvisoryCreate) throws ApiException {
        okhttp3.Call localVarCall = securityAdvisoriesCreateRepositoryAdvisoryValidateBeforeCall(owner, repo, repositoryAdvisoryCreate, null);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository security advisory (asynchronously)
     * Creates a new repository security advisory. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to create a draft repository security advisory, you must be a security manager or administrator of that repository.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param repositoryAdvisoryCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory">Create a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesCreateRepositoryAdvisoryAsync(String owner, String repo, RepositoryAdvisoryCreate repositoryAdvisoryCreate, final ApiCallback<RepositoryAdvisory> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityAdvisoriesCreateRepositoryAdvisoryValidateBeforeCall(owner, repo, repositoryAdvisoryCreate, _callback);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityAdvisoriesGetRepositoryAdvisory
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory">Get a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesGetRepositoryAdvisoryCall(String owner, String repo, String ghsaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ghsa_id" + "}", localVarApiClient.escapeString(ghsaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityAdvisoriesGetRepositoryAdvisoryValidateBeforeCall(String owner, String repo, String ghsaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling securityAdvisoriesGetRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling securityAdvisoriesGetRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'ghsaId' is set
        if (ghsaId == null) {
            throw new ApiException("Missing the required parameter 'ghsaId' when calling securityAdvisoriesGetRepositoryAdvisory(Async)");
        }

        return securityAdvisoriesGetRepositoryAdvisoryCall(owner, repo, ghsaId, _callback);

    }

    /**
     * Get a repository security advisory
     * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You can access any published security advisory on a public repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get a published security advisory in a private repository, or any unpublished security advisory that you have access to.  You can access an unpublished security advisory from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on the security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @return RepositoryAdvisory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory">Get a repository security advisory Documentation</a>
     */
    public RepositoryAdvisory securityAdvisoriesGetRepositoryAdvisory(String owner, String repo, String ghsaId) throws ApiException {
        ApiResponse<RepositoryAdvisory> localVarResp = securityAdvisoriesGetRepositoryAdvisoryWithHttpInfo(owner, repo, ghsaId);
        return localVarResp.getData();
    }

    /**
     * Get a repository security advisory
     * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You can access any published security advisory on a public repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get a published security advisory in a private repository, or any unpublished security advisory that you have access to.  You can access an unpublished security advisory from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on the security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @return ApiResponse&lt;RepositoryAdvisory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory">Get a repository security advisory Documentation</a>
     */
    public ApiResponse<RepositoryAdvisory> securityAdvisoriesGetRepositoryAdvisoryWithHttpInfo(String owner, String repo, String ghsaId) throws ApiException {
        okhttp3.Call localVarCall = securityAdvisoriesGetRepositoryAdvisoryValidateBeforeCall(owner, repo, ghsaId, null);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository security advisory (asynchronously)
     * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You can access any published security advisory on a public repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get a published security advisory in a private repository, or any unpublished security advisory that you have access to.  You can access an unpublished security advisory from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on the security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory">Get a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesGetRepositoryAdvisoryAsync(String owner, String repo, String ghsaId, final ApiCallback<RepositoryAdvisory> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityAdvisoriesGetRepositoryAdvisoryValidateBeforeCall(owner, repo, ghsaId, _callback);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityAdvisoriesListRepositoryAdvisories
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. (optional)
     * @param perPage Number of advisories to return per page. (optional, default to 30)
     * @param state Filter by state of the repository advisories. Only advisories of this state will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories">List repository security advisories Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesListRepositoryAdvisoriesCall(String owner, String repo, String direction, String sort, String before, String after, Integer perPage, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/security-advisories"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityAdvisoriesListRepositoryAdvisoriesValidateBeforeCall(String owner, String repo, String direction, String sort, String before, String after, Integer perPage, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling securityAdvisoriesListRepositoryAdvisories(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling securityAdvisoriesListRepositoryAdvisories(Async)");
        }

        return securityAdvisoriesListRepositoryAdvisoriesCall(owner, repo, direction, sort, before, after, perPage, state, _callback);

    }

    /**
     * List repository security advisories
     * Lists security advisories in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get published security advisories in a private repository, or any unpublished security advisories that you have access to.  You can access unpublished security advisories from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on any security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. (optional)
     * @param perPage Number of advisories to return per page. (optional, default to 30)
     * @param state Filter by state of the repository advisories. Only advisories of this state will be returned. (optional)
     * @return List&lt;RepositoryAdvisory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories">List repository security advisories Documentation</a>
     */
    public List<RepositoryAdvisory> securityAdvisoriesListRepositoryAdvisories(String owner, String repo, String direction, String sort, String before, String after, Integer perPage, String state) throws ApiException {
        ApiResponse<List<RepositoryAdvisory>> localVarResp = securityAdvisoriesListRepositoryAdvisoriesWithHttpInfo(owner, repo, direction, sort, before, after, perPage, state);
        return localVarResp.getData();
    }

    /**
     * List repository security advisories
     * Lists security advisories in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get published security advisories in a private repository, or any unpublished security advisories that you have access to.  You can access unpublished security advisories from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on any security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. (optional)
     * @param perPage Number of advisories to return per page. (optional, default to 30)
     * @param state Filter by state of the repository advisories. Only advisories of this state will be returned. (optional)
     * @return ApiResponse&lt;List&lt;RepositoryAdvisory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories">List repository security advisories Documentation</a>
     */
    public ApiResponse<List<RepositoryAdvisory>> securityAdvisoriesListRepositoryAdvisoriesWithHttpInfo(String owner, String repo, String direction, String sort, String before, String after, Integer perPage, String state) throws ApiException {
        okhttp3.Call localVarCall = securityAdvisoriesListRepositoryAdvisoriesValidateBeforeCall(owner, repo, direction, sort, before, after, perPage, state, null);
        Type localVarReturnType = new TypeToken<List<RepositoryAdvisory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository security advisories (asynchronously)
     * Lists security advisories in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:read&#x60; permission in order to get published security advisories in a private repository, or any unpublished security advisories that you have access to.  You can access unpublished security advisories from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on any security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. (optional)
     * @param perPage Number of advisories to return per page. (optional, default to 30)
     * @param state Filter by state of the repository advisories. Only advisories of this state will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories">List repository security advisories Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesListRepositoryAdvisoriesAsync(String owner, String repo, String direction, String sort, String before, String after, Integer perPage, String state, final ApiCallback<List<RepositoryAdvisory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityAdvisoriesListRepositoryAdvisoriesValidateBeforeCall(owner, repo, direction, sort, before, after, perPage, state, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryAdvisory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityAdvisoriesUpdateRepositoryAdvisory
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param repositoryAdvisoryUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory">Update a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesUpdateRepositoryAdvisoryCall(String owner, String repo, String ghsaId, RepositoryAdvisoryUpdate repositoryAdvisoryUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repositoryAdvisoryUpdate;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ghsa_id" + "}", localVarApiClient.escapeString(ghsaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityAdvisoriesUpdateRepositoryAdvisoryValidateBeforeCall(String owner, String repo, String ghsaId, RepositoryAdvisoryUpdate repositoryAdvisoryUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling securityAdvisoriesUpdateRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling securityAdvisoriesUpdateRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'ghsaId' is set
        if (ghsaId == null) {
            throw new ApiException("Missing the required parameter 'ghsaId' when calling securityAdvisoriesUpdateRepositoryAdvisory(Async)");
        }

        // verify the required parameter 'repositoryAdvisoryUpdate' is set
        if (repositoryAdvisoryUpdate == null) {
            throw new ApiException("Missing the required parameter 'repositoryAdvisoryUpdate' when calling securityAdvisoriesUpdateRepositoryAdvisory(Async)");
        }

        return securityAdvisoriesUpdateRepositoryAdvisoryCall(owner, repo, ghsaId, repositoryAdvisoryUpdate, _callback);

    }

    /**
     * Update a repository security advisory
     * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to update any security advisory, you must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param repositoryAdvisoryUpdate  (required)
     * @return RepositoryAdvisory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory">Update a repository security advisory Documentation</a>
     */
    public RepositoryAdvisory securityAdvisoriesUpdateRepositoryAdvisory(String owner, String repo, String ghsaId, RepositoryAdvisoryUpdate repositoryAdvisoryUpdate) throws ApiException {
        ApiResponse<RepositoryAdvisory> localVarResp = securityAdvisoriesUpdateRepositoryAdvisoryWithHttpInfo(owner, repo, ghsaId, repositoryAdvisoryUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a repository security advisory
     * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to update any security advisory, you must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param repositoryAdvisoryUpdate  (required)
     * @return ApiResponse&lt;RepositoryAdvisory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory">Update a repository security advisory Documentation</a>
     */
    public ApiResponse<RepositoryAdvisory> securityAdvisoriesUpdateRepositoryAdvisoryWithHttpInfo(String owner, String repo, String ghsaId, RepositoryAdvisoryUpdate repositoryAdvisoryUpdate) throws ApiException {
        okhttp3.Call localVarCall = securityAdvisoriesUpdateRepositoryAdvisoryValidateBeforeCall(owner, repo, ghsaId, repositoryAdvisoryUpdate, null);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a repository security advisory (asynchronously)
     * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier. You must authenticate using an access token with the &#x60;repo&#x60; scope or &#x60;repository_advisories:write&#x60; permission to use this endpoint.  In order to update any security advisory, you must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. (required)
     * @param repositoryAdvisoryUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory">Update a repository security advisory Documentation</a>
     */
    public okhttp3.Call securityAdvisoriesUpdateRepositoryAdvisoryAsync(String owner, String repo, String ghsaId, RepositoryAdvisoryUpdate repositoryAdvisoryUpdate, final ApiCallback<RepositoryAdvisory> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityAdvisoriesUpdateRepositoryAdvisoryValidateBeforeCall(owner, repo, ghsaId, repositoryAdvisoryUpdate, _callback);
        Type localVarReturnType = new TypeToken<RepositoryAdvisory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
