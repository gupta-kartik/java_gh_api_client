/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionsListSelectedReposForOrgSecret200Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Codespace;
import org.openapitools.client.model.CodespaceExportDetails;
import org.openapitools.client.model.CodespaceWithFullRepository;
import org.openapitools.client.model.CodespacesCreateForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesCreateOrUpdateOrgSecretRequest;
import org.openapitools.client.model.CodespacesCreateOrUpdateRepoSecretRequest;
import org.openapitools.client.model.CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesCreateWithPrForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesCreateWithRepoForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesDeleteCodespacesBillingUsersRequest;
import org.openapitools.client.model.CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response;
import org.openapitools.client.model.CodespacesListInOrganization200Response;
import org.openapitools.client.model.CodespacesListOrgSecrets200Response;
import org.openapitools.client.model.CodespacesListRepoSecrets200Response;
import org.openapitools.client.model.CodespacesListSecretsForAuthenticatedUser200Response;
import org.openapitools.client.model.CodespacesOrgSecret;
import org.openapitools.client.model.CodespacesPreFlightWithRepoForAuthenticatedUser200Response;
import org.openapitools.client.model.CodespacesPublicKey;
import org.openapitools.client.model.CodespacesPublishForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesRepoMachinesForAuthenticatedUser200Response;
import org.openapitools.client.model.CodespacesSecret;
import org.openapitools.client.model.CodespacesSetCodespacesBillingRequest;
import org.openapitools.client.model.CodespacesSetCodespacesBillingUsersRequest;
import org.openapitools.client.model.CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesSetSelectedReposForOrgSecretRequest;
import org.openapitools.client.model.CodespacesUpdateForAuthenticatedUserRequest;
import org.openapitools.client.model.CodespacesUserPublicKey;
import org.openapitools.client.model.RepoCodespacesSecret;
import org.openapitools.client.model.ScimError;
import org.openapitools.client.model.SecretScanningListAlertsForEnterprise503Response;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CodespacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CodespacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodespacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for codespacesAddRepositoryForSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret">Add a selected repository to a user secret Documentation</a>
     */
    public okhttp3.Call codespacesAddRepositoryForSecretForAuthenticatedUserCall(String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesAddRepositoryForSecretForAuthenticatedUserValidateBeforeCall(String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesAddRepositoryForSecretForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling codespacesAddRepositoryForSecretForAuthenticatedUser(Async)");
        }

        return codespacesAddRepositoryForSecretForAuthenticatedUserCall(secretName, repositoryId, _callback);

    }

    /**
     * Add a selected repository to a user secret
     * Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on the referenced repository to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret">Add a selected repository to a user secret Documentation</a>
     */
    public void codespacesAddRepositoryForSecretForAuthenticatedUser(String secretName, Integer repositoryId) throws ApiException {
        codespacesAddRepositoryForSecretForAuthenticatedUserWithHttpInfo(secretName, repositoryId);
    }

    /**
     * Add a selected repository to a user secret
     * Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on the referenced repository to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret">Add a selected repository to a user secret Documentation</a>
     */
    public ApiResponse<Void> codespacesAddRepositoryForSecretForAuthenticatedUserWithHttpInfo(String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = codespacesAddRepositoryForSecretForAuthenticatedUserValidateBeforeCall(secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a selected repository to a user secret (asynchronously)
     * Adds a repository to the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on the referenced repository to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret">Add a selected repository to a user secret Documentation</a>
     */
    public okhttp3.Call codespacesAddRepositoryForSecretForAuthenticatedUserAsync(String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesAddRepositoryForSecretForAuthenticatedUserValidateBeforeCall(secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesAddSelectedRepoToOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesAddSelectedRepoToOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesAddSelectedRepoToOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling codespacesAddSelectedRepoToOrgSecret(Async)");
        }

        return codespacesAddSelectedRepoToOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public void codespacesAddSelectedRepoToOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        codespacesAddSelectedRepoToOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public ApiResponse<Void> codespacesAddSelectedRepoToOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = codespacesAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add selected repository to an organization secret (asynchronously)
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesAddSelectedRepoToOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCodespaceMachinesForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace">List machine types for a codespace Documentation</a>
     */
    public okhttp3.Call codespacesCodespaceMachinesForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/machines"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCodespaceMachinesForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesCodespaceMachinesForAuthenticatedUser(Async)");
        }

        return codespacesCodespaceMachinesForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * List machine types for a codespace
     * List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return CodespacesRepoMachinesForAuthenticatedUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace">List machine types for a codespace Documentation</a>
     */
    public CodespacesRepoMachinesForAuthenticatedUser200Response codespacesCodespaceMachinesForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> localVarResp = codespacesCodespaceMachinesForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * List machine types for a codespace
     * List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;CodespacesRepoMachinesForAuthenticatedUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace">List machine types for a codespace Documentation</a>
     */
    public ApiResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> codespacesCodespaceMachinesForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesCodespaceMachinesForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<CodespacesRepoMachinesForAuthenticatedUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List machine types for a codespace (asynchronously)
     * List the machine types a codespace can transition to use.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace">List machine types for a codespace Documentation</a>
     */
    public okhttp3.Call codespacesCodespaceMachinesForAuthenticatedUserAsync(String codespaceName, final ApiCallback<CodespacesRepoMachinesForAuthenticatedUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCodespaceMachinesForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<CodespacesRepoMachinesForAuthenticatedUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateForAuthenticatedUser
     * @param codespacesCreateForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user">Create a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesCreateForAuthenticatedUserCall(CodespacesCreateForAuthenticatedUserRequest codespacesCreateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/codespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateForAuthenticatedUserValidateBeforeCall(CodespacesCreateForAuthenticatedUserRequest codespacesCreateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespacesCreateForAuthenticatedUserRequest' is set
        if (codespacesCreateForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateForAuthenticatedUserRequest' when calling codespacesCreateForAuthenticatedUser(Async)");
        }

        return codespacesCreateForAuthenticatedUserCall(codespacesCreateForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a codespace for the authenticated user
     * Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespacesCreateForAuthenticatedUserRequest  (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user">Create a codespace for the authenticated user Documentation</a>
     */
    public Codespace codespacesCreateForAuthenticatedUser(CodespacesCreateForAuthenticatedUserRequest codespacesCreateForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesCreateForAuthenticatedUserWithHttpInfo(codespacesCreateForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a codespace for the authenticated user
     * Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespacesCreateForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user">Create a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesCreateForAuthenticatedUserWithHttpInfo(CodespacesCreateForAuthenticatedUserRequest codespacesCreateForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateForAuthenticatedUserValidateBeforeCall(codespacesCreateForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a codespace for the authenticated user (asynchronously)
     * Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespacesCreateForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user">Create a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesCreateForAuthenticatedUserAsync(CodespacesCreateForAuthenticatedUserRequest codespacesCreateForAuthenticatedUserRequest, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateForAuthenticatedUserValidateBeforeCall(codespacesCreateForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateOrUpdateOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateOrgSecretCall(String org, String secretName, CodespacesCreateOrUpdateOrgSecretRequest codespacesCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateOrUpdateOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateOrUpdateOrgSecretValidateBeforeCall(String org, String secretName, CodespacesCreateOrUpdateOrgSecretRequest codespacesCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'codespacesCreateOrUpdateOrgSecretRequest' is set
        if (codespacesCreateOrUpdateOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateOrUpdateOrgSecretRequest' when calling codespacesCreateOrUpdateOrgSecret(Async)");
        }

        return codespacesCreateOrUpdateOrgSecretCall(org, secretName, codespacesCreateOrUpdateOrgSecretRequest, _callback);

    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateOrgSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public Object codespacesCreateOrUpdateOrgSecret(String org, String secretName, CodespacesCreateOrUpdateOrgSecretRequest codespacesCreateOrUpdateOrgSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = codespacesCreateOrUpdateOrgSecretWithHttpInfo(org, secretName, codespacesCreateOrUpdateOrgSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateOrgSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public ApiResponse<Object> codespacesCreateOrUpdateOrgSecretWithHttpInfo(String org, String secretName, CodespacesCreateOrUpdateOrgSecretRequest codespacesCreateOrUpdateOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, codespacesCreateOrUpdateOrgSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an organization secret (asynchronously)
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateOrgSecretAsync(String org, String secretName, CodespacesCreateOrUpdateOrgSecretRequest codespacesCreateOrUpdateOrgSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, codespacesCreateOrUpdateOrgSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateOrUpdateRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateRepoSecretCall(String owner, String repo, String secretName, CodespacesCreateOrUpdateRepoSecretRequest codespacesCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateOrUpdateRepoSecretRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateOrUpdateRepoSecretValidateBeforeCall(String owner, String repo, String secretName, CodespacesCreateOrUpdateRepoSecretRequest codespacesCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'codespacesCreateOrUpdateRepoSecretRequest' is set
        if (codespacesCreateOrUpdateRepoSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateOrUpdateRepoSecretRequest' when calling codespacesCreateOrUpdateRepoSecret(Async)");
        }

        return codespacesCreateOrUpdateRepoSecretCall(owner, repo, secretName, codespacesCreateOrUpdateRepoSecretRequest, _callback);

    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateRepoSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public Object codespacesCreateOrUpdateRepoSecret(String owner, String repo, String secretName, CodespacesCreateOrUpdateRepoSecretRequest codespacesCreateOrUpdateRepoSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = codespacesCreateOrUpdateRepoSecretWithHttpInfo(owner, repo, secretName, codespacesCreateOrUpdateRepoSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateRepoSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public ApiResponse<Object> codespacesCreateOrUpdateRepoSecretWithHttpInfo(String owner, String repo, String secretName, CodespacesCreateOrUpdateRepoSecretRequest codespacesCreateOrUpdateRepoSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, codespacesCreateOrUpdateRepoSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a repository secret (asynchronously)
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.  #### Example of encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example of encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example of encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateRepoSecretAsync(String owner, String repo, String secretName, CodespacesCreateOrUpdateRepoSecretRequest codespacesCreateOrUpdateRepoSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, codespacesCreateOrUpdateRepoSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateOrUpdateSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateSecretForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response after successfully creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response after successfully updating a secret </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user">Create or update a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateSecretForAuthenticatedUserCall(String secretName, CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateOrUpdateSecretForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateOrUpdateSecretForAuthenticatedUserValidateBeforeCall(String secretName, CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateSecretForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'codespacesCreateOrUpdateSecretForAuthenticatedUserRequest' is set
        if (codespacesCreateOrUpdateSecretForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateOrUpdateSecretForAuthenticatedUserRequest' when calling codespacesCreateOrUpdateSecretForAuthenticatedUser(Async)");
        }

        return codespacesCreateOrUpdateSecretForAuthenticatedUserCall(secretName, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create or update a secret for the authenticated user
     * Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateSecretForAuthenticatedUserRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response after successfully creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response after successfully updating a secret </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user">Create or update a secret for the authenticated user Documentation</a>
     */
    public Object codespacesCreateOrUpdateSecretForAuthenticatedUser(String secretName, CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest codespacesCreateOrUpdateSecretForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Object> localVarResp = codespacesCreateOrUpdateSecretForAuthenticatedUserWithHttpInfo(secretName, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update a secret for the authenticated user
     * Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateSecretForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response after successfully creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response after successfully updating a secret </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user">Create or update a secret for the authenticated user Documentation</a>
     */
    public ApiResponse<Object> codespacesCreateOrUpdateSecretForAuthenticatedUserWithHttpInfo(String secretName, CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest codespacesCreateOrUpdateSecretForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateOrUpdateSecretForAuthenticatedUserValidateBeforeCall(secretName, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a secret for the authenticated user (asynchronously)
     * Creates or updates a secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must also have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param secretName The name of the secret. (required)
     * @param codespacesCreateOrUpdateSecretForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response after successfully creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response after successfully updating a secret </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user">Create or update a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesCreateOrUpdateSecretForAuthenticatedUserAsync(String secretName, CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateOrUpdateSecretForAuthenticatedUserValidateBeforeCall(secretName, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateWithPrForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param pullNumber The number that identifies the pull request. (required)
     * @param codespacesCreateWithPrForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request">Create a codespace from a pull request Documentation</a>
     */
    public okhttp3.Call codespacesCreateWithPrForAuthenticatedUserCall(String owner, String repo, Integer pullNumber, CodespacesCreateWithPrForAuthenticatedUserRequest codespacesCreateWithPrForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateWithPrForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateWithPrForAuthenticatedUserValidateBeforeCall(String owner, String repo, Integer pullNumber, CodespacesCreateWithPrForAuthenticatedUserRequest codespacesCreateWithPrForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesCreateWithPrForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesCreateWithPrForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling codespacesCreateWithPrForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'codespacesCreateWithPrForAuthenticatedUserRequest' is set
        if (codespacesCreateWithPrForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateWithPrForAuthenticatedUserRequest' when calling codespacesCreateWithPrForAuthenticatedUser(Async)");
        }

        return codespacesCreateWithPrForAuthenticatedUserCall(owner, repo, pullNumber, codespacesCreateWithPrForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a codespace from a pull request
     * Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param pullNumber The number that identifies the pull request. (required)
     * @param codespacesCreateWithPrForAuthenticatedUserRequest  (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request">Create a codespace from a pull request Documentation</a>
     */
    public Codespace codespacesCreateWithPrForAuthenticatedUser(String owner, String repo, Integer pullNumber, CodespacesCreateWithPrForAuthenticatedUserRequest codespacesCreateWithPrForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesCreateWithPrForAuthenticatedUserWithHttpInfo(owner, repo, pullNumber, codespacesCreateWithPrForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a codespace from a pull request
     * Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param pullNumber The number that identifies the pull request. (required)
     * @param codespacesCreateWithPrForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request">Create a codespace from a pull request Documentation</a>
     */
    public ApiResponse<Codespace> codespacesCreateWithPrForAuthenticatedUserWithHttpInfo(String owner, String repo, Integer pullNumber, CodespacesCreateWithPrForAuthenticatedUserRequest codespacesCreateWithPrForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateWithPrForAuthenticatedUserValidateBeforeCall(owner, repo, pullNumber, codespacesCreateWithPrForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a codespace from a pull request (asynchronously)
     * Creates a codespace owned by the authenticated user for the specified pull request.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param pullNumber The number that identifies the pull request. (required)
     * @param codespacesCreateWithPrForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request">Create a codespace from a pull request Documentation</a>
     */
    public okhttp3.Call codespacesCreateWithPrForAuthenticatedUserAsync(String owner, String repo, Integer pullNumber, CodespacesCreateWithPrForAuthenticatedUserRequest codespacesCreateWithPrForAuthenticatedUserRequest, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateWithPrForAuthenticatedUserValidateBeforeCall(owner, repo, pullNumber, codespacesCreateWithPrForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesCreateWithRepoForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codespacesCreateWithRepoForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository">Create a codespace in a repository Documentation</a>
     */
    public okhttp3.Call codespacesCreateWithRepoForAuthenticatedUserCall(String owner, String repo, CodespacesCreateWithRepoForAuthenticatedUserRequest codespacesCreateWithRepoForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesCreateWithRepoForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesCreateWithRepoForAuthenticatedUserValidateBeforeCall(String owner, String repo, CodespacesCreateWithRepoForAuthenticatedUserRequest codespacesCreateWithRepoForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesCreateWithRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesCreateWithRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'codespacesCreateWithRepoForAuthenticatedUserRequest' is set
        if (codespacesCreateWithRepoForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesCreateWithRepoForAuthenticatedUserRequest' when calling codespacesCreateWithRepoForAuthenticatedUser(Async)");
        }

        return codespacesCreateWithRepoForAuthenticatedUserCall(owner, repo, codespacesCreateWithRepoForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a codespace in a repository
     * Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codespacesCreateWithRepoForAuthenticatedUserRequest  (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository">Create a codespace in a repository Documentation</a>
     */
    public Codespace codespacesCreateWithRepoForAuthenticatedUser(String owner, String repo, CodespacesCreateWithRepoForAuthenticatedUserRequest codespacesCreateWithRepoForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesCreateWithRepoForAuthenticatedUserWithHttpInfo(owner, repo, codespacesCreateWithRepoForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a codespace in a repository
     * Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codespacesCreateWithRepoForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository">Create a codespace in a repository Documentation</a>
     */
    public ApiResponse<Codespace> codespacesCreateWithRepoForAuthenticatedUserWithHttpInfo(String owner, String repo, CodespacesCreateWithRepoForAuthenticatedUserRequest codespacesCreateWithRepoForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesCreateWithRepoForAuthenticatedUserValidateBeforeCall(owner, repo, codespacesCreateWithRepoForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a codespace in a repository (asynchronously)
     * Creates a codespace owned by the authenticated user in the specified repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codespacesCreateWithRepoForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when the codespace was successfully created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Response when the codespace creation partially failed but is being retried in the background </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository">Create a codespace in a repository Documentation</a>
     */
    public okhttp3.Call codespacesCreateWithRepoForAuthenticatedUserAsync(String owner, String repo, CodespacesCreateWithRepoForAuthenticatedUserRequest codespacesCreateWithRepoForAuthenticatedUserRequest, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesCreateWithRepoForAuthenticatedUserValidateBeforeCall(owner, repo, codespacesCreateWithRepoForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteCodespacesBillingUsers
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesDeleteCodespacesBillingUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users">Removes users from Codespaces billing for an organization Documentation</a>
     */
    public okhttp3.Call codespacesDeleteCodespacesBillingUsersCall(String org, CodespacesDeleteCodespacesBillingUsersRequest codespacesDeleteCodespacesBillingUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesDeleteCodespacesBillingUsersRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/billing/selected_users"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteCodespacesBillingUsersValidateBeforeCall(String org, CodespacesDeleteCodespacesBillingUsersRequest codespacesDeleteCodespacesBillingUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesDeleteCodespacesBillingUsers(Async)");
        }

        // verify the required parameter 'codespacesDeleteCodespacesBillingUsersRequest' is set
        if (codespacesDeleteCodespacesBillingUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesDeleteCodespacesBillingUsersRequest' when calling codespacesDeleteCodespacesBillingUsers(Async)");
        }

        return codespacesDeleteCodespacesBillingUsersCall(org, codespacesDeleteCodespacesBillingUsersRequest, _callback);

    }

    /**
     * Removes users from Codespaces billing for an organization
     * Codespaces for the specified users will no longer be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesDeleteCodespacesBillingUsersRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users">Removes users from Codespaces billing for an organization Documentation</a>
     */
    public void codespacesDeleteCodespacesBillingUsers(String org, CodespacesDeleteCodespacesBillingUsersRequest codespacesDeleteCodespacesBillingUsersRequest) throws ApiException {
        codespacesDeleteCodespacesBillingUsersWithHttpInfo(org, codespacesDeleteCodespacesBillingUsersRequest);
    }

    /**
     * Removes users from Codespaces billing for an organization
     * Codespaces for the specified users will no longer be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesDeleteCodespacesBillingUsersRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users">Removes users from Codespaces billing for an organization Documentation</a>
     */
    public ApiResponse<Void> codespacesDeleteCodespacesBillingUsersWithHttpInfo(String org, CodespacesDeleteCodespacesBillingUsersRequest codespacesDeleteCodespacesBillingUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteCodespacesBillingUsersValidateBeforeCall(org, codespacesDeleteCodespacesBillingUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes users from Codespaces billing for an organization (asynchronously)
     * Codespaces for the specified users will no longer be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesDeleteCodespacesBillingUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users">Removes users from Codespaces billing for an organization Documentation</a>
     */
    public okhttp3.Call codespacesDeleteCodespacesBillingUsersAsync(String org, CodespacesDeleteCodespacesBillingUsersRequest codespacesDeleteCodespacesBillingUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteCodespacesBillingUsersValidateBeforeCall(org, codespacesDeleteCodespacesBillingUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user">Delete a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesDeleteForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesDeleteForAuthenticatedUser(Async)");
        }

        return codespacesDeleteForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * Delete a codespace for the authenticated user
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user">Delete a codespace for the authenticated user Documentation</a>
     */
    public Object codespacesDeleteForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<Object> localVarResp = codespacesDeleteForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * Delete a codespace for the authenticated user
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user">Delete a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Object> codespacesDeleteForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a codespace for the authenticated user (asynchronously)
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user">Delete a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesDeleteForAuthenticatedUserAsync(String codespaceName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteFromOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Delete a codespace from the organization Documentation</a>
     */
    public okhttp3.Call codespacesDeleteFromOrganizationCall(String org, String username, String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members/{username}/codespaces/{codespace_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteFromOrganizationValidateBeforeCall(String org, String username, String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesDeleteFromOrganization(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling codespacesDeleteFromOrganization(Async)");
        }

        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesDeleteFromOrganization(Async)");
        }

        return codespacesDeleteFromOrganizationCall(org, username, codespaceName, _callback);

    }

    /**
     * Delete a codespace from the organization
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Delete a codespace from the organization Documentation</a>
     */
    public Object codespacesDeleteFromOrganization(String org, String username, String codespaceName) throws ApiException {
        ApiResponse<Object> localVarResp = codespacesDeleteFromOrganizationWithHttpInfo(org, username, codespaceName);
        return localVarResp.getData();
    }

    /**
     * Delete a codespace from the organization
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Delete a codespace from the organization Documentation</a>
     */
    public ApiResponse<Object> codespacesDeleteFromOrganizationWithHttpInfo(String org, String username, String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteFromOrganizationValidateBeforeCall(org, username, codespaceName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a codespace from the organization (asynchronously)
     * Deletes a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Delete a codespace from the organization Documentation</a>
     */
    public okhttp3.Call codespacesDeleteFromOrganizationAsync(String org, String username, String codespaceName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteFromOrganizationValidateBeforeCall(org, username, codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesDeleteOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesDeleteOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesDeleteOrgSecret(Async)");
        }

        return codespacesDeleteOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Delete an organization secret
     * Deletes an organization secret using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public void codespacesDeleteOrgSecret(String org, String secretName) throws ApiException {
        codespacesDeleteOrgSecretWithHttpInfo(org, secretName);
    }

    /**
     * Delete an organization secret
     * Deletes an organization secret using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public ApiResponse<Void> codespacesDeleteOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteOrgSecretValidateBeforeCall(org, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization secret (asynchronously)
     * Deletes an organization secret using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesDeleteOrgSecretAsync(String org, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteOrgSecretValidateBeforeCall(org, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesDeleteRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesDeleteRepoSecret(Async)");
        }

        return codespacesDeleteRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public void codespacesDeleteRepoSecret(String owner, String repo, String secretName) throws ApiException {
        codespacesDeleteRepoSecretWithHttpInfo(owner, repo, secretName);
    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public ApiResponse<Void> codespacesDeleteRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository secret (asynchronously)
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesDeleteRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesDeleteSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user">Delete a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesDeleteSecretForAuthenticatedUserCall(String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesDeleteSecretForAuthenticatedUserValidateBeforeCall(String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesDeleteSecretForAuthenticatedUser(Async)");
        }

        return codespacesDeleteSecretForAuthenticatedUserCall(secretName, _callback);

    }

    /**
     * Delete a secret for the authenticated user
     * Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user">Delete a secret for the authenticated user Documentation</a>
     */
    public void codespacesDeleteSecretForAuthenticatedUser(String secretName) throws ApiException {
        codespacesDeleteSecretForAuthenticatedUserWithHttpInfo(secretName);
    }

    /**
     * Delete a secret for the authenticated user
     * Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user">Delete a secret for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> codespacesDeleteSecretForAuthenticatedUserWithHttpInfo(String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesDeleteSecretForAuthenticatedUserValidateBeforeCall(secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a secret for the authenticated user (asynchronously)
     * Deletes a secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user">Delete a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesDeleteSecretForAuthenticatedUserAsync(String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesDeleteSecretForAuthenticatedUserValidateBeforeCall(secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesExportForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user">Export a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesExportForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/exports"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesExportForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesExportForAuthenticatedUser(Async)");
        }

        return codespacesExportForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * Export a codespace for the authenticated user
     * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  If changes cannot be pushed to the codespace&#39;s repository, they will be pushed to a new or previously-existing fork instead.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return CodespaceExportDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user">Export a codespace for the authenticated user Documentation</a>
     */
    public CodespaceExportDetails codespacesExportForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<CodespaceExportDetails> localVarResp = codespacesExportForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * Export a codespace for the authenticated user
     * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  If changes cannot be pushed to the codespace&#39;s repository, they will be pushed to a new or previously-existing fork instead.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;CodespaceExportDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user">Export a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespaceExportDetails> codespacesExportForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesExportForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<CodespaceExportDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a codespace for the authenticated user (asynchronously)
     * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  If changes cannot be pushed to the codespace&#39;s repository, they will be pushed to a new or previously-existing fork instead.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user">Export a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesExportForAuthenticatedUserAsync(String codespaceName, final ApiCallback<CodespaceExportDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesExportForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<CodespaceExportDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetCodespacesForUserInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org">List codespaces for a user in organization Documentation</a>
     */
    public okhttp3.Call codespacesGetCodespacesForUserInOrgCall(String org, String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members/{username}/codespaces"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetCodespacesForUserInOrgValidateBeforeCall(String org, String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesGetCodespacesForUserInOrg(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling codespacesGetCodespacesForUserInOrg(Async)");
        }

        return codespacesGetCodespacesForUserInOrgCall(org, username, perPage, page, _callback);

    }

    /**
     * List codespaces for a user in organization
     * Lists the codespaces that a member of an organization has for repositories in that organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListInOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org">List codespaces for a user in organization Documentation</a>
     */
    public CodespacesListInOrganization200Response codespacesGetCodespacesForUserInOrg(String org, String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListInOrganization200Response> localVarResp = codespacesGetCodespacesForUserInOrgWithHttpInfo(org, username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List codespaces for a user in organization
     * Lists the codespaces that a member of an organization has for repositories in that organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListInOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org">List codespaces for a user in organization Documentation</a>
     */
    public ApiResponse<CodespacesListInOrganization200Response> codespacesGetCodespacesForUserInOrgWithHttpInfo(String org, String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetCodespacesForUserInOrgValidateBeforeCall(org, username, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List codespaces for a user in organization (asynchronously)
     * Lists the codespaces that a member of an organization has for repositories in that organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org">List codespaces for a user in organization Documentation</a>
     */
    public okhttp3.Call codespacesGetCodespacesForUserInOrgAsync(String org, String username, Integer perPage, Integer page, final ApiCallback<CodespacesListInOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetCodespacesForUserInOrgValidateBeforeCall(org, username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetExportDetailsForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param exportId The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export">Get details about a codespace export Documentation</a>
     */
    public okhttp3.Call codespacesGetExportDetailsForAuthenticatedUserCall(String codespaceName, String exportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/exports/{export_id}"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()))
            .replace("{" + "export_id" + "}", localVarApiClient.escapeString(exportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetExportDetailsForAuthenticatedUserValidateBeforeCall(String codespaceName, String exportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesGetExportDetailsForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'exportId' is set
        if (exportId == null) {
            throw new ApiException("Missing the required parameter 'exportId' when calling codespacesGetExportDetailsForAuthenticatedUser(Async)");
        }

        return codespacesGetExportDetailsForAuthenticatedUserCall(codespaceName, exportId, _callback);

    }

    /**
     * Get details about a codespace export
     * Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param exportId The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported. (required)
     * @return CodespaceExportDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export">Get details about a codespace export Documentation</a>
     */
    public CodespaceExportDetails codespacesGetExportDetailsForAuthenticatedUser(String codespaceName, String exportId) throws ApiException {
        ApiResponse<CodespaceExportDetails> localVarResp = codespacesGetExportDetailsForAuthenticatedUserWithHttpInfo(codespaceName, exportId);
        return localVarResp.getData();
    }

    /**
     * Get details about a codespace export
     * Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param exportId The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported. (required)
     * @return ApiResponse&lt;CodespaceExportDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export">Get details about a codespace export Documentation</a>
     */
    public ApiResponse<CodespaceExportDetails> codespacesGetExportDetailsForAuthenticatedUserWithHttpInfo(String codespaceName, String exportId) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetExportDetailsForAuthenticatedUserValidateBeforeCall(codespaceName, exportId, null);
        Type localVarReturnType = new TypeToken<CodespaceExportDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about a codespace export (asynchronously)
     * Gets information about an export of a codespace.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param exportId The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export">Get details about a codespace export Documentation</a>
     */
    public okhttp3.Call codespacesGetExportDetailsForAuthenticatedUserAsync(String codespaceName, String exportId, final ApiCallback<CodespaceExportDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetExportDetailsForAuthenticatedUserValidateBeforeCall(codespaceName, exportId, _callback);
        Type localVarReturnType = new TypeToken<CodespaceExportDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user">Get a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesGetForAuthenticatedUser(Async)");
        }

        return codespacesGetForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * Get a codespace for the authenticated user
     * Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user">Get a codespace for the authenticated user Documentation</a>
     */
    public Codespace codespacesGetForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesGetForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * Get a codespace for the authenticated user
     * Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user">Get a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesGetForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a codespace for the authenticated user (asynchronously)
     * Gets information about a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user">Get a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetForAuthenticatedUserAsync(String codespaceName, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetOrgPublicKey
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call codespacesGetOrgPublicKeyCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/public-key"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetOrgPublicKeyValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesGetOrgPublicKey(Async)");
        }

        return codespacesGetOrgPublicKeyCall(org, _callback);

    }

    /**
     * Get an organization public key
     * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return CodespacesPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public CodespacesPublicKey codespacesGetOrgPublicKey(String org) throws ApiException {
        ApiResponse<CodespacesPublicKey> localVarResp = codespacesGetOrgPublicKeyWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get an organization public key
     * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;CodespacesPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public ApiResponse<CodespacesPublicKey> codespacesGetOrgPublicKeyWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetOrgPublicKeyValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<CodespacesPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization public key (asynchronously)
     * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call codespacesGetOrgPublicKeyAsync(String org, final ApiCallback<CodespacesPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetOrgPublicKeyValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<CodespacesPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesGetOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesGetOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesGetOrgSecret(Async)");
        }

        return codespacesGetOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Get an organization secret
     * Gets an organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return CodespacesOrgSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public CodespacesOrgSecret codespacesGetOrgSecret(String org, String secretName) throws ApiException {
        ApiResponse<CodespacesOrgSecret> localVarResp = codespacesGetOrgSecretWithHttpInfo(org, secretName);
        return localVarResp.getData();
    }

    /**
     * Get an organization secret
     * Gets an organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;CodespacesOrgSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public ApiResponse<CodespacesOrgSecret> codespacesGetOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetOrgSecretValidateBeforeCall(org, secretName, null);
        Type localVarReturnType = new TypeToken<CodespacesOrgSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization secret (asynchronously)
     * Gets an organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesGetOrgSecretAsync(String org, String secretName, final ApiCallback<CodespacesOrgSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetOrgSecretValidateBeforeCall(org, secretName, _callback);
        Type localVarReturnType = new TypeToken<CodespacesOrgSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetPublicKeyForAuthenticatedUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user">Get public key for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetPublicKeyForAuthenticatedUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetPublicKeyForAuthenticatedUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return codespacesGetPublicKeyForAuthenticatedUserCall(_callback);

    }

    /**
     * Get public key for the authenticated user
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @return CodespacesUserPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user">Get public key for the authenticated user Documentation</a>
     */
    public CodespacesUserPublicKey codespacesGetPublicKeyForAuthenticatedUser() throws ApiException {
        ApiResponse<CodespacesUserPublicKey> localVarResp = codespacesGetPublicKeyForAuthenticatedUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get public key for the authenticated user
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @return ApiResponse&lt;CodespacesUserPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user">Get public key for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesUserPublicKey> codespacesGetPublicKeyForAuthenticatedUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = codespacesGetPublicKeyForAuthenticatedUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CodespacesUserPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get public key for the authenticated user (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user">Get public key for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetPublicKeyForAuthenticatedUserAsync(final ApiCallback<CodespacesUserPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetPublicKeyForAuthenticatedUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CodespacesUserPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetRepoPublicKey
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call codespacesGetRepoPublicKeyCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/secrets/public-key"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetRepoPublicKeyValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesGetRepoPublicKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesGetRepoPublicKey(Async)");
        }

        return codespacesGetRepoPublicKeyCall(owner, repo, _callback);

    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return CodespacesPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public CodespacesPublicKey codespacesGetRepoPublicKey(String owner, String repo) throws ApiException {
        ApiResponse<CodespacesPublicKey> localVarResp = codespacesGetRepoPublicKeyWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;CodespacesPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public ApiResponse<CodespacesPublicKey> codespacesGetRepoPublicKeyWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetRepoPublicKeyValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<CodespacesPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository public key (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call codespacesGetRepoPublicKeyAsync(String owner, String repo, final ApiCallback<CodespacesPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetRepoPublicKeyValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<CodespacesPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesGetRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesGetRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesGetRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesGetRepoSecret(Async)");
        }

        return codespacesGetRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return RepoCodespacesSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public RepoCodespacesSecret codespacesGetRepoSecret(String owner, String repo, String secretName) throws ApiException {
        ApiResponse<RepoCodespacesSecret> localVarResp = codespacesGetRepoSecretWithHttpInfo(owner, repo, secretName);
        return localVarResp.getData();
    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;RepoCodespacesSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public ApiResponse<RepoCodespacesSecret> codespacesGetRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        Type localVarReturnType = new TypeToken<RepoCodespacesSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository secret (asynchronously)
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call codespacesGetRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<RepoCodespacesSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        Type localVarReturnType = new TypeToken<RepoCodespacesSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesGetSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user">Get a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetSecretForAuthenticatedUserCall(String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesGetSecretForAuthenticatedUserValidateBeforeCall(String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesGetSecretForAuthenticatedUser(Async)");
        }

        return codespacesGetSecretForAuthenticatedUserCall(secretName, _callback);

    }

    /**
     * Get a secret for the authenticated user
     * Gets a secret available to a user&#39;s codespaces without revealing its encrypted value.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @return CodespacesSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user">Get a secret for the authenticated user Documentation</a>
     */
    public CodespacesSecret codespacesGetSecretForAuthenticatedUser(String secretName) throws ApiException {
        ApiResponse<CodespacesSecret> localVarResp = codespacesGetSecretForAuthenticatedUserWithHttpInfo(secretName);
        return localVarResp.getData();
    }

    /**
     * Get a secret for the authenticated user
     * Gets a secret available to a user&#39;s codespaces without revealing its encrypted value.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;CodespacesSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user">Get a secret for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesSecret> codespacesGetSecretForAuthenticatedUserWithHttpInfo(String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesGetSecretForAuthenticatedUserValidateBeforeCall(secretName, null);
        Type localVarReturnType = new TypeToken<CodespacesSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a secret for the authenticated user (asynchronously)
     * Gets a secret available to a user&#39;s codespaces without revealing its encrypted value.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user">Get a secret for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesGetSecretForAuthenticatedUserAsync(String secretName, final ApiCallback<CodespacesSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesGetSecretForAuthenticatedUserValidateBeforeCall(secretName, _callback);
        Type localVarReturnType = new TypeToken<CodespacesSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListDevcontainersInRepositoryForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user">List devcontainer configurations in a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListDevcontainersInRepositoryForAuthenticatedUserCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/devcontainers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListDevcontainersInRepositoryForAuthenticatedUserValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesListDevcontainersInRepositoryForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesListDevcontainersInRepositoryForAuthenticatedUser(Async)");
        }

        return codespacesListDevcontainersInRepositoryForAuthenticatedUserCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List devcontainer configurations in a repository for the authenticated user
     * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user">List devcontainer configurations in a repository for the authenticated user Documentation</a>
     */
    public CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response codespacesListDevcontainersInRepositoryForAuthenticatedUser(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response> localVarResp = codespacesListDevcontainersInRepositoryForAuthenticatedUserWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List devcontainer configurations in a repository for the authenticated user
     * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user">List devcontainer configurations in a repository for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response> codespacesListDevcontainersInRepositoryForAuthenticatedUserWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListDevcontainersInRepositoryForAuthenticatedUserValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List devcontainer configurations in a repository for the authenticated user (asynchronously)
     * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user">List devcontainer configurations in a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListDevcontainersInRepositoryForAuthenticatedUserAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListDevcontainersInRepositoryForAuthenticatedUserValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param repositoryId ID of the Repository to filter on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user">List codespaces for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListForAuthenticatedUserCall(Integer perPage, Integer page, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (repositoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository_id", repositoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        return codespacesListForAuthenticatedUserCall(perPage, page, repositoryId, _callback);

    }

    /**
     * List codespaces for the authenticated user
     * Lists the authenticated user&#39;s codespaces.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param repositoryId ID of the Repository to filter on (optional)
     * @return CodespacesListInOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user">List codespaces for the authenticated user Documentation</a>
     */
    public CodespacesListInOrganization200Response codespacesListForAuthenticatedUser(Integer perPage, Integer page, Integer repositoryId) throws ApiException {
        ApiResponse<CodespacesListInOrganization200Response> localVarResp = codespacesListForAuthenticatedUserWithHttpInfo(perPage, page, repositoryId);
        return localVarResp.getData();
    }

    /**
     * List codespaces for the authenticated user
     * Lists the authenticated user&#39;s codespaces.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param repositoryId ID of the Repository to filter on (optional)
     * @return ApiResponse&lt;CodespacesListInOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user">List codespaces for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesListInOrganization200Response> codespacesListForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = codespacesListForAuthenticatedUserValidateBeforeCall(perPage, page, repositoryId, null);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List codespaces for the authenticated user (asynchronously)
     * Lists the authenticated user&#39;s codespaces.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param repositoryId ID of the Repository to filter on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user">List codespaces for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListForAuthenticatedUserAsync(Integer perPage, Integer page, Integer repositoryId, final ApiCallback<CodespacesListInOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListForAuthenticatedUserValidateBeforeCall(perPage, page, repositoryId, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListInOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-in-organization">List codespaces for the organization Documentation</a>
     */
    public okhttp3.Call codespacesListInOrganizationCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListInOrganizationValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesListInOrganization(Async)");
        }

        return codespacesListInOrganizationCall(org, perPage, page, _callback);

    }

    /**
     * List codespaces for the organization
     * Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListInOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-in-organization">List codespaces for the organization Documentation</a>
     */
    public CodespacesListInOrganization200Response codespacesListInOrganization(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListInOrganization200Response> localVarResp = codespacesListInOrganizationWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List codespaces for the organization
     * Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListInOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-in-organization">List codespaces for the organization Documentation</a>
     */
    public ApiResponse<CodespacesListInOrganization200Response> codespacesListInOrganizationWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListInOrganizationValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List codespaces for the organization (asynchronously)
     * Lists the codespaces associated to a specified organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-in-organization">List codespaces for the organization Documentation</a>
     */
    public okhttp3.Call codespacesListInOrganizationAsync(String org, Integer perPage, Integer page, final ApiCallback<CodespacesListInOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListInOrganizationValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListInRepositoryForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user">List codespaces in a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListInRepositoryForAuthenticatedUserCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListInRepositoryForAuthenticatedUserValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesListInRepositoryForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesListInRepositoryForAuthenticatedUser(Async)");
        }

        return codespacesListInRepositoryForAuthenticatedUserCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List codespaces in a repository for the authenticated user
     * Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListInOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user">List codespaces in a repository for the authenticated user Documentation</a>
     */
    public CodespacesListInOrganization200Response codespacesListInRepositoryForAuthenticatedUser(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListInOrganization200Response> localVarResp = codespacesListInRepositoryForAuthenticatedUserWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List codespaces in a repository for the authenticated user
     * Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListInOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user">List codespaces in a repository for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesListInOrganization200Response> codespacesListInRepositoryForAuthenticatedUserWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListInRepositoryForAuthenticatedUserValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List codespaces in a repository for the authenticated user (asynchronously)
     * Lists the codespaces associated to a specified repository and the authenticated user.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user">List codespaces in a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListInRepositoryForAuthenticatedUserAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<CodespacesListInOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListInRepositoryForAuthenticatedUserValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListInOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListOrgSecrets
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call codespacesListOrgSecretsCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListOrgSecretsValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesListOrgSecrets(Async)");
        }

        return codespacesListOrgSecretsCall(org, perPage, page, _callback);

    }

    /**
     * List organization secrets
     * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListOrgSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-organization-secrets">List organization secrets Documentation</a>
     */
    public CodespacesListOrgSecrets200Response codespacesListOrgSecrets(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListOrgSecrets200Response> localVarResp = codespacesListOrgSecretsWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization secrets
     * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListOrgSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-organization-secrets">List organization secrets Documentation</a>
     */
    public ApiResponse<CodespacesListOrgSecrets200Response> codespacesListOrgSecretsWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListOrgSecretsValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListOrgSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization secrets (asynchronously)
     * Lists all Codespaces secrets available at the organization-level without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call codespacesListOrgSecretsAsync(String org, Integer perPage, Integer page, final ApiCallback<CodespacesListOrgSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListOrgSecretsValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListOrgSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListRepoSecrets
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call codespacesListRepoSecretsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/secrets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListRepoSecretsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesListRepoSecrets(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesListRepoSecrets(Async)");
        }

        return codespacesListRepoSecretsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListRepoSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-repository-secrets">List repository secrets Documentation</a>
     */
    public CodespacesListRepoSecrets200Response codespacesListRepoSecrets(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListRepoSecrets200Response> localVarResp = codespacesListRepoSecretsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListRepoSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-repository-secrets">List repository secrets Documentation</a>
     */
    public ApiResponse<CodespacesListRepoSecrets200Response> codespacesListRepoSecretsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListRepoSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository secrets (asynchronously)
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call codespacesListRepoSecretsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<CodespacesListRepoSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListRepoSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListRepositoriesForSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret">List selected repositories for a user secret Documentation</a>
     */
    public okhttp3.Call codespacesListRepositoriesForSecretForAuthenticatedUserCall(String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}/repositories"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesListRepositoriesForSecretForAuthenticatedUser(Async)");
        }

        return codespacesListRepositoriesForSecretForAuthenticatedUserCall(secretName, _callback);

    }

    /**
     * List selected repositories for a user secret
     * List the repositories that have been granted the ability to use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @return ActionsListSelectedReposForOrgSecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret">List selected repositories for a user secret Documentation</a>
     */
    public ActionsListSelectedReposForOrgSecret200Response codespacesListRepositoriesForSecretForAuthenticatedUser(String secretName) throws ApiException {
        ApiResponse<ActionsListSelectedReposForOrgSecret200Response> localVarResp = codespacesListRepositoriesForSecretForAuthenticatedUserWithHttpInfo(secretName);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for a user secret
     * List the repositories that have been granted the ability to use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;ActionsListSelectedReposForOrgSecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret">List selected repositories for a user secret Documentation</a>
     */
    public ApiResponse<ActionsListSelectedReposForOrgSecret200Response> codespacesListRepositoriesForSecretForAuthenticatedUserWithHttpInfo(String secretName) throws ApiException {
        okhttp3.Call localVarCall = codespacesListRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(secretName, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for a user secret (asynchronously)
     * List the repositories that have been granted the ability to use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret">List selected repositories for a user secret Documentation</a>
     */
    public okhttp3.Call codespacesListRepositoriesForSecretForAuthenticatedUserAsync(String secretName, final ApiCallback<ActionsListSelectedReposForOrgSecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(secretName, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListSecretsForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user">List secrets for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListSecretsForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListSecretsForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return codespacesListSecretsForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List secrets for the authenticated user
     * Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CodespacesListSecretsForAuthenticatedUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user">List secrets for the authenticated user Documentation</a>
     */
    public CodespacesListSecretsForAuthenticatedUser200Response codespacesListSecretsForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<CodespacesListSecretsForAuthenticatedUser200Response> localVarResp = codespacesListSecretsForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List secrets for the authenticated user
     * Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CodespacesListSecretsForAuthenticatedUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user">List secrets for the authenticated user Documentation</a>
     */
    public ApiResponse<CodespacesListSecretsForAuthenticatedUser200Response> codespacesListSecretsForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = codespacesListSecretsForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<CodespacesListSecretsForAuthenticatedUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List secrets for the authenticated user (asynchronously)
     * Lists all secrets available for a user&#39;s Codespaces without revealing their encrypted values.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have read access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user">List secrets for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesListSecretsForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<CodespacesListSecretsForAuthenticatedUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListSecretsForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CodespacesListSecretsForAuthenticatedUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesListSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesListSelectedReposForOrgSecretCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesListSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesListSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesListSelectedReposForOrgSecret(Async)");
        }

        return codespacesListSelectedReposForOrgSecretCall(org, secretName, page, perPage, _callback);

    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ActionsListSelectedReposForOrgSecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ActionsListSelectedReposForOrgSecret200Response codespacesListSelectedReposForOrgSecret(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActionsListSelectedReposForOrgSecret200Response> localVarResp = codespacesListSelectedReposForOrgSecretWithHttpInfo(org, secretName, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;ActionsListSelectedReposForOrgSecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<ActionsListSelectedReposForOrgSecret200Response> codespacesListSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = codespacesListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for an organization secret (asynchronously)
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesListSelectedReposForOrgSecretAsync(String org, String secretName, Integer page, Integer perPage, final ApiCallback<ActionsListSelectedReposForOrgSecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesPreFlightWithRepoForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. (optional)
     * @param clientIp An alternative IP for default location auto-detection, such as when proxying a request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when a user is able to create codespaces from the repository. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace">Get default attributes for a codespace Documentation</a>
     */
    public okhttp3.Call codespacesPreFlightWithRepoForAuthenticatedUserCall(String owner, String repo, String ref, String clientIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/new"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_ip", clientIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesPreFlightWithRepoForAuthenticatedUserValidateBeforeCall(String owner, String repo, String ref, String clientIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesPreFlightWithRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesPreFlightWithRepoForAuthenticatedUser(Async)");
        }

        return codespacesPreFlightWithRepoForAuthenticatedUserCall(owner, repo, ref, clientIp, _callback);

    }

    /**
     * Get default attributes for a codespace
     * Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. (optional)
     * @param clientIp An alternative IP for default location auto-detection, such as when proxying a request. (optional)
     * @return CodespacesPreFlightWithRepoForAuthenticatedUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when a user is able to create codespaces from the repository. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace">Get default attributes for a codespace Documentation</a>
     */
    public CodespacesPreFlightWithRepoForAuthenticatedUser200Response codespacesPreFlightWithRepoForAuthenticatedUser(String owner, String repo, String ref, String clientIp) throws ApiException {
        ApiResponse<CodespacesPreFlightWithRepoForAuthenticatedUser200Response> localVarResp = codespacesPreFlightWithRepoForAuthenticatedUserWithHttpInfo(owner, repo, ref, clientIp);
        return localVarResp.getData();
    }

    /**
     * Get default attributes for a codespace
     * Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. (optional)
     * @param clientIp An alternative IP for default location auto-detection, such as when proxying a request. (optional)
     * @return ApiResponse&lt;CodespacesPreFlightWithRepoForAuthenticatedUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when a user is able to create codespaces from the repository. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace">Get default attributes for a codespace Documentation</a>
     */
    public ApiResponse<CodespacesPreFlightWithRepoForAuthenticatedUser200Response> codespacesPreFlightWithRepoForAuthenticatedUserWithHttpInfo(String owner, String repo, String ref, String clientIp) throws ApiException {
        okhttp3.Call localVarCall = codespacesPreFlightWithRepoForAuthenticatedUserValidateBeforeCall(owner, repo, ref, clientIp, null);
        Type localVarReturnType = new TypeToken<CodespacesPreFlightWithRepoForAuthenticatedUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default attributes for a codespace (asynchronously)
     * Gets the default attributes for codespaces created by the user with the repository.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. (optional)
     * @param clientIp An alternative IP for default location auto-detection, such as when proxying a request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when a user is able to create codespaces from the repository. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace">Get default attributes for a codespace Documentation</a>
     */
    public okhttp3.Call codespacesPreFlightWithRepoForAuthenticatedUserAsync(String owner, String repo, String ref, String clientIp, final ApiCallback<CodespacesPreFlightWithRepoForAuthenticatedUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesPreFlightWithRepoForAuthenticatedUserValidateBeforeCall(owner, repo, ref, clientIp, _callback);
        Type localVarReturnType = new TypeToken<CodespacesPreFlightWithRepoForAuthenticatedUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesPublishForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesPublishForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace">Create a repository from an unpublished codespace Documentation</a>
     */
    public okhttp3.Call codespacesPublishForAuthenticatedUserCall(String codespaceName, CodespacesPublishForAuthenticatedUserRequest codespacesPublishForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesPublishForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/publish"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesPublishForAuthenticatedUserValidateBeforeCall(String codespaceName, CodespacesPublishForAuthenticatedUserRequest codespacesPublishForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesPublishForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'codespacesPublishForAuthenticatedUserRequest' is set
        if (codespacesPublishForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesPublishForAuthenticatedUserRequest' when calling codespacesPublishForAuthenticatedUser(Async)");
        }

        return codespacesPublishForAuthenticatedUserCall(codespaceName, codespacesPublishForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a repository from an unpublished codespace
     * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.  The codespace&#39;s token is granted write permissions to the repository, allowing the user to push their changes.  This will fail for a codespace that is already published, meaning it has an associated repository.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesPublishForAuthenticatedUserRequest  (required)
     * @return CodespaceWithFullRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace">Create a repository from an unpublished codespace Documentation</a>
     */
    public CodespaceWithFullRepository codespacesPublishForAuthenticatedUser(String codespaceName, CodespacesPublishForAuthenticatedUserRequest codespacesPublishForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<CodespaceWithFullRepository> localVarResp = codespacesPublishForAuthenticatedUserWithHttpInfo(codespaceName, codespacesPublishForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a repository from an unpublished codespace
     * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.  The codespace&#39;s token is granted write permissions to the repository, allowing the user to push their changes.  This will fail for a codespace that is already published, meaning it has an associated repository.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesPublishForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;CodespaceWithFullRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace">Create a repository from an unpublished codespace Documentation</a>
     */
    public ApiResponse<CodespaceWithFullRepository> codespacesPublishForAuthenticatedUserWithHttpInfo(String codespaceName, CodespacesPublishForAuthenticatedUserRequest codespacesPublishForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesPublishForAuthenticatedUserValidateBeforeCall(codespaceName, codespacesPublishForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<CodespaceWithFullRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository from an unpublished codespace (asynchronously)
     * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.  The codespace&#39;s token is granted write permissions to the repository, allowing the user to push their changes.  This will fail for a codespace that is already published, meaning it has an associated repository.  You must authenticate using a personal access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesPublishForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace">Create a repository from an unpublished codespace Documentation</a>
     */
    public okhttp3.Call codespacesPublishForAuthenticatedUserAsync(String codespaceName, CodespacesPublishForAuthenticatedUserRequest codespacesPublishForAuthenticatedUserRequest, final ApiCallback<CodespaceWithFullRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesPublishForAuthenticatedUserValidateBeforeCall(codespaceName, codespacesPublishForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CodespaceWithFullRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesRemoveRepositoryForSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret">Remove a selected repository from a user secret Documentation</a>
     */
    public okhttp3.Call codespacesRemoveRepositoryForSecretForAuthenticatedUserCall(String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesRemoveRepositoryForSecretForAuthenticatedUserValidateBeforeCall(String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesRemoveRepositoryForSecretForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling codespacesRemoveRepositoryForSecretForAuthenticatedUser(Async)");
        }

        return codespacesRemoveRepositoryForSecretForAuthenticatedUserCall(secretName, repositoryId, _callback);

    }

    /**
     * Remove a selected repository from a user secret
     * Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret">Remove a selected repository from a user secret Documentation</a>
     */
    public void codespacesRemoveRepositoryForSecretForAuthenticatedUser(String secretName, Integer repositoryId) throws ApiException {
        codespacesRemoveRepositoryForSecretForAuthenticatedUserWithHttpInfo(secretName, repositoryId);
    }

    /**
     * Remove a selected repository from a user secret
     * Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret">Remove a selected repository from a user secret Documentation</a>
     */
    public ApiResponse<Void> codespacesRemoveRepositoryForSecretForAuthenticatedUserWithHttpInfo(String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = codespacesRemoveRepositoryForSecretForAuthenticatedUserValidateBeforeCall(secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a selected repository from a user secret (asynchronously)
     * Removes a repository from the selected repositories for a user&#39;s codespace secret. You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint. GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret">Remove a selected repository from a user secret Documentation</a>
     */
    public okhttp3.Call codespacesRemoveRepositoryForSecretForAuthenticatedUserAsync(String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesRemoveRepositoryForSecretForAuthenticatedUserValidateBeforeCall(secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesRemoveSelectedRepoFromOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesRemoveSelectedRepoFromOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesRemoveSelectedRepoFromOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling codespacesRemoveSelectedRepoFromOrgSecret(Async)");
        }

        return codespacesRemoveSelectedRepoFromOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public void codespacesRemoveSelectedRepoFromOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        codespacesRemoveSelectedRepoFromOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public ApiResponse<Void> codespacesRemoveSelectedRepoFromOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = codespacesRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove selected repository from an organization secret (asynchronously)
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesRemoveSelectedRepoFromOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesRepoMachinesForAuthenticatedUser
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param location The location to check for available machines. Assigned by IP if not provided. (optional)
     * @param clientIp IP for location auto-detection when proxying a request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository">List available machine types for a repository Documentation</a>
     */
    public okhttp3.Call codespacesRepoMachinesForAuthenticatedUserCall(String owner, String repo, String location, String clientIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/codespaces/machines"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_ip", clientIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesRepoMachinesForAuthenticatedUserValidateBeforeCall(String owner, String repo, String location, String clientIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codespacesRepoMachinesForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codespacesRepoMachinesForAuthenticatedUser(Async)");
        }

        return codespacesRepoMachinesForAuthenticatedUserCall(owner, repo, location, clientIp, _callback);

    }

    /**
     * List available machine types for a repository
     * List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param location The location to check for available machines. Assigned by IP if not provided. (optional)
     * @param clientIp IP for location auto-detection when proxying a request (optional)
     * @return CodespacesRepoMachinesForAuthenticatedUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository">List available machine types for a repository Documentation</a>
     */
    public CodespacesRepoMachinesForAuthenticatedUser200Response codespacesRepoMachinesForAuthenticatedUser(String owner, String repo, String location, String clientIp) throws ApiException {
        ApiResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> localVarResp = codespacesRepoMachinesForAuthenticatedUserWithHttpInfo(owner, repo, location, clientIp);
        return localVarResp.getData();
    }

    /**
     * List available machine types for a repository
     * List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param location The location to check for available machines. Assigned by IP if not provided. (optional)
     * @param clientIp IP for location auto-detection when proxying a request (optional)
     * @return ApiResponse&lt;CodespacesRepoMachinesForAuthenticatedUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository">List available machine types for a repository Documentation</a>
     */
    public ApiResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> codespacesRepoMachinesForAuthenticatedUserWithHttpInfo(String owner, String repo, String location, String clientIp) throws ApiException {
        okhttp3.Call localVarCall = codespacesRepoMachinesForAuthenticatedUserValidateBeforeCall(owner, repo, location, clientIp, null);
        Type localVarReturnType = new TypeToken<CodespacesRepoMachinesForAuthenticatedUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List available machine types for a repository (asynchronously)
     * List the machine types available for a given repository based on its configuration.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_metadata&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param location The location to check for available machines. Assigned by IP if not provided. (optional)
     * @param clientIp IP for location auto-detection when proxying a request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository">List available machine types for a repository Documentation</a>
     */
    public okhttp3.Call codespacesRepoMachinesForAuthenticatedUserAsync(String owner, String repo, String location, String clientIp, final ApiCallback<CodespacesRepoMachinesForAuthenticatedUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesRepoMachinesForAuthenticatedUserValidateBeforeCall(owner, repo, location, clientIp, _callback);
        Type localVarReturnType = new TypeToken<CodespacesRepoMachinesForAuthenticatedUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesSetCodespacesBilling
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing">Manage access control for organization codespaces Documentation</a>
     */
    public okhttp3.Call codespacesSetCodespacesBillingCall(String org, CodespacesSetCodespacesBillingRequest codespacesSetCodespacesBillingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesSetCodespacesBillingRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/billing"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesSetCodespacesBillingValidateBeforeCall(String org, CodespacesSetCodespacesBillingRequest codespacesSetCodespacesBillingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesSetCodespacesBilling(Async)");
        }

        // verify the required parameter 'codespacesSetCodespacesBillingRequest' is set
        if (codespacesSetCodespacesBillingRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesSetCodespacesBillingRequest' when calling codespacesSetCodespacesBilling(Async)");
        }

        return codespacesSetCodespacesBillingCall(org, codespacesSetCodespacesBillingRequest, _callback);

    }

    /**
     * Manage access control for organization codespaces
     * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing">Manage access control for organization codespaces Documentation</a>
     */
    public void codespacesSetCodespacesBilling(String org, CodespacesSetCodespacesBillingRequest codespacesSetCodespacesBillingRequest) throws ApiException {
        codespacesSetCodespacesBillingWithHttpInfo(org, codespacesSetCodespacesBillingRequest);
    }

    /**
     * Manage access control for organization codespaces
     * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing">Manage access control for organization codespaces Documentation</a>
     */
    public ApiResponse<Void> codespacesSetCodespacesBillingWithHttpInfo(String org, CodespacesSetCodespacesBillingRequest codespacesSetCodespacesBillingRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesSetCodespacesBillingValidateBeforeCall(org, codespacesSetCodespacesBillingRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Manage access control for organization codespaces (asynchronously)
     * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing">Manage access control for organization codespaces Documentation</a>
     */
    public okhttp3.Call codespacesSetCodespacesBillingAsync(String org, CodespacesSetCodespacesBillingRequest codespacesSetCodespacesBillingRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesSetCodespacesBillingValidateBeforeCall(org, codespacesSetCodespacesBillingRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesSetCodespacesBillingUsers
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users">Add users to Codespaces billing for an organization Documentation</a>
     */
    public okhttp3.Call codespacesSetCodespacesBillingUsersCall(String org, CodespacesSetCodespacesBillingUsersRequest codespacesSetCodespacesBillingUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesSetCodespacesBillingUsersRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/billing/selected_users"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesSetCodespacesBillingUsersValidateBeforeCall(String org, CodespacesSetCodespacesBillingUsersRequest codespacesSetCodespacesBillingUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesSetCodespacesBillingUsers(Async)");
        }

        // verify the required parameter 'codespacesSetCodespacesBillingUsersRequest' is set
        if (codespacesSetCodespacesBillingUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesSetCodespacesBillingUsersRequest' when calling codespacesSetCodespacesBillingUsers(Async)");
        }

        return codespacesSetCodespacesBillingUsersCall(org, codespacesSetCodespacesBillingUsersRequest, _callback);

    }

    /**
     * Add users to Codespaces billing for an organization
     * Codespaces for the specified users will be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingUsersRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users">Add users to Codespaces billing for an organization Documentation</a>
     */
    public void codespacesSetCodespacesBillingUsers(String org, CodespacesSetCodespacesBillingUsersRequest codespacesSetCodespacesBillingUsersRequest) throws ApiException {
        codespacesSetCodespacesBillingUsersWithHttpInfo(org, codespacesSetCodespacesBillingUsersRequest);
    }

    /**
     * Add users to Codespaces billing for an organization
     * Codespaces for the specified users will be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingUsersRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users">Add users to Codespaces billing for an organization Documentation</a>
     */
    public ApiResponse<Void> codespacesSetCodespacesBillingUsersWithHttpInfo(String org, CodespacesSetCodespacesBillingUsersRequest codespacesSetCodespacesBillingUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesSetCodespacesBillingUsersValidateBeforeCall(org, codespacesSetCodespacesBillingUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add users to Codespaces billing for an organization (asynchronously)
     * Codespaces for the specified users will be billed to the organization. To use this endpoint, the billing settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param codespacesSetCodespacesBillingUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when successfully modifying permissions. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Users are neither members nor collaborators of this organization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users">Add users to Codespaces billing for an organization Documentation</a>
     */
    public okhttp3.Call codespacesSetCodespacesBillingUsersAsync(String org, CodespacesSetCodespacesBillingUsersRequest codespacesSetCodespacesBillingUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesSetCodespacesBillingUsersValidateBeforeCall(org, codespacesSetCodespacesBillingUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesSetRepositoriesForSecretForAuthenticatedUser
     * @param secretName The name of the secret. (required)
     * @param codespacesSetRepositoriesForSecretForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repositories were added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret">Set selected repositories for a user secret Documentation</a>
     */
    public okhttp3.Call codespacesSetRepositoriesForSecretForAuthenticatedUserCall(String secretName, CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesSetRepositoriesForSecretForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/codespaces/secrets/{secret_name}/repositories"
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesSetRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(String secretName, CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesSetRepositoriesForSecretForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'codespacesSetRepositoriesForSecretForAuthenticatedUserRequest' is set
        if (codespacesSetRepositoriesForSecretForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesSetRepositoriesForSecretForAuthenticatedUserRequest' when calling codespacesSetRepositoriesForSecretForAuthenticatedUser(Async)");
        }

        return codespacesSetRepositoriesForSecretForAuthenticatedUserCall(secretName, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, _callback);

    }

    /**
     * Set selected repositories for a user secret
     * Select the repositories that will use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param codespacesSetRepositoriesForSecretForAuthenticatedUserRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repositories were added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret">Set selected repositories for a user secret Documentation</a>
     */
    public void codespacesSetRepositoriesForSecretForAuthenticatedUser(String secretName, CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest codespacesSetRepositoriesForSecretForAuthenticatedUserRequest) throws ApiException {
        codespacesSetRepositoriesForSecretForAuthenticatedUserWithHttpInfo(secretName, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest);
    }

    /**
     * Set selected repositories for a user secret
     * Select the repositories that will use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param codespacesSetRepositoriesForSecretForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repositories were added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret">Set selected repositories for a user secret Documentation</a>
     */
    public ApiResponse<Void> codespacesSetRepositoriesForSecretForAuthenticatedUserWithHttpInfo(String secretName, CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest codespacesSetRepositoriesForSecretForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesSetRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(secretName, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories for a user secret (asynchronously)
     * Select the repositories that will use a user&#39;s codespace secret.  You must authenticate using an access token with the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint. User must have Codespaces access to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_user_secrets&#x60; user permission and write access to the &#x60;codespaces_secrets&#x60; repository permission on all referenced repositories to use this endpoint.
     * @param secretName The name of the secret. (required)
     * @param codespacesSetRepositoriesForSecretForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repositories were added to the selected list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret">Set selected repositories for a user secret Documentation</a>
     */
    public okhttp3.Call codespacesSetRepositoriesForSecretForAuthenticatedUserAsync(String secretName, CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesSetRepositoriesForSecretForAuthenticatedUserValidateBeforeCall(secretName, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesSetSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesSetSelectedReposForOrgSecretCall(String org, String secretName, CodespacesSetSelectedReposForOrgSecretRequest codespacesSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesSetSelectedReposForOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/codespaces/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesSetSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, CodespacesSetSelectedReposForOrgSecretRequest codespacesSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling codespacesSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'codespacesSetSelectedReposForOrgSecretRequest' is set
        if (codespacesSetSelectedReposForOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'codespacesSetSelectedReposForOrgSecretRequest' when calling codespacesSetSelectedReposForOrgSecret(Async)");
        }

        return codespacesSetSelectedReposForOrgSecretCall(org, secretName, codespacesSetSelectedReposForOrgSecretRequest, _callback);

    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesSetSelectedReposForOrgSecretRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public void codespacesSetSelectedReposForOrgSecret(String org, String secretName, CodespacesSetSelectedReposForOrgSecretRequest codespacesSetSelectedReposForOrgSecretRequest) throws ApiException {
        codespacesSetSelectedReposForOrgSecretWithHttpInfo(org, secretName, codespacesSetSelectedReposForOrgSecretRequest);
    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesSetSelectedReposForOrgSecretRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<Void> codespacesSetSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, CodespacesSetSelectedReposForOrgSecretRequest codespacesSetSelectedReposForOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, codespacesSetSelectedReposForOrgSecretRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories for an organization secret (asynchronously)
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param codespacesSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call codespacesSetSelectedReposForOrgSecretAsync(String org, String secretName, CodespacesSetSelectedReposForOrgSecretRequest codespacesSetSelectedReposForOrgSecretRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, codespacesSetSelectedReposForOrgSecretRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesStartForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user">Start a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesStartForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/start"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesStartForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesStartForAuthenticatedUser(Async)");
        }

        return codespacesStartForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * Start a codespace for the authenticated user
     * Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user">Start a codespace for the authenticated user Documentation</a>
     */
    public Codespace codespacesStartForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesStartForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * Start a codespace for the authenticated user
     * Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user">Start a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesStartForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesStartForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a codespace for the authenticated user (asynchronously)
     * Starts a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user">Start a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesStartForAuthenticatedUserAsync(String codespaceName, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesStartForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesStopForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user">Stop a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesStopForAuthenticatedUserCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}/stop"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesStopForAuthenticatedUserValidateBeforeCall(String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesStopForAuthenticatedUser(Async)");
        }

        return codespacesStopForAuthenticatedUserCall(codespaceName, _callback);

    }

    /**
     * Stop a codespace for the authenticated user
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user">Stop a codespace for the authenticated user Documentation</a>
     */
    public Codespace codespacesStopForAuthenticatedUser(String codespaceName) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesStopForAuthenticatedUserWithHttpInfo(codespaceName);
        return localVarResp.getData();
    }

    /**
     * Stop a codespace for the authenticated user
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user">Stop a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesStopForAuthenticatedUserWithHttpInfo(String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesStopForAuthenticatedUserValidateBeforeCall(codespaceName, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a codespace for the authenticated user (asynchronously)
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces_lifecycle_admin&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user">Stop a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesStopForAuthenticatedUserAsync(String codespaceName, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesStopForAuthenticatedUserValidateBeforeCall(codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesStopInOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Stop a codespace for an organization user Documentation</a>
     */
    public okhttp3.Call codespacesStopInOrganizationCall(String org, String username, String codespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesStopInOrganizationValidateBeforeCall(String org, String username, String codespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling codespacesStopInOrganization(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling codespacesStopInOrganization(Async)");
        }

        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesStopInOrganization(Async)");
        }

        return codespacesStopInOrganizationCall(org, username, codespaceName, _callback);

    }

    /**
     * Stop a codespace for an organization user
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Stop a codespace for an organization user Documentation</a>
     */
    public Codespace codespacesStopInOrganization(String org, String username, String codespaceName) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesStopInOrganizationWithHttpInfo(org, username, codespaceName);
        return localVarResp.getData();
    }

    /**
     * Stop a codespace for an organization user
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Stop a codespace for an organization user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesStopInOrganizationWithHttpInfo(String org, String username, String codespaceName) throws ApiException {
        okhttp3.Call localVarCall = codespacesStopInOrganizationValidateBeforeCall(org, username, codespaceName, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a codespace for an organization user (asynchronously)
     * Stops a user&#39;s codespace.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param username The handle for the GitHub user account. (required)
     * @param codespaceName The name of the codespace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces">Stop a codespace for an organization user Documentation</a>
     */
    public okhttp3.Call codespacesStopInOrganizationAsync(String org, String username, String codespaceName, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesStopInOrganizationValidateBeforeCall(org, username, codespaceName, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codespacesUpdateForAuthenticatedUser
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesUpdateForAuthenticatedUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user">Update a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesUpdateForAuthenticatedUserCall(String codespaceName, CodespacesUpdateForAuthenticatedUserRequest codespacesUpdateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codespacesUpdateForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/codespaces/{codespace_name}"
            .replace("{" + "codespace_name" + "}", localVarApiClient.escapeString(codespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codespacesUpdateForAuthenticatedUserValidateBeforeCall(String codespaceName, CodespacesUpdateForAuthenticatedUserRequest codespacesUpdateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codespaceName' is set
        if (codespaceName == null) {
            throw new ApiException("Missing the required parameter 'codespaceName' when calling codespacesUpdateForAuthenticatedUser(Async)");
        }

        return codespacesUpdateForAuthenticatedUserCall(codespaceName, codespacesUpdateForAuthenticatedUserRequest, _callback);

    }

    /**
     * Update a codespace for the authenticated user
     * Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesUpdateForAuthenticatedUserRequest  (optional)
     * @return Codespace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user">Update a codespace for the authenticated user Documentation</a>
     */
    public Codespace codespacesUpdateForAuthenticatedUser(String codespaceName, CodespacesUpdateForAuthenticatedUserRequest codespacesUpdateForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Codespace> localVarResp = codespacesUpdateForAuthenticatedUserWithHttpInfo(codespaceName, codespacesUpdateForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update a codespace for the authenticated user
     * Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesUpdateForAuthenticatedUserRequest  (optional)
     * @return ApiResponse&lt;Codespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user">Update a codespace for the authenticated user Documentation</a>
     */
    public ApiResponse<Codespace> codespacesUpdateForAuthenticatedUserWithHttpInfo(String codespaceName, CodespacesUpdateForAuthenticatedUserRequest codespacesUpdateForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = codespacesUpdateForAuthenticatedUserValidateBeforeCall(codespaceName, codespacesUpdateForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a codespace for the authenticated user (asynchronously)
     * Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  You must authenticate using an access token with the &#x60;codespace&#x60; scope to use this endpoint.  GitHub Apps must have write access to the &#x60;codespaces&#x60; repository permission to use this endpoint.
     * @param codespaceName The name of the codespace. (required)
     * @param codespacesUpdateForAuthenticatedUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user">Update a codespace for the authenticated user Documentation</a>
     */
    public okhttp3.Call codespacesUpdateForAuthenticatedUserAsync(String codespaceName, CodespacesUpdateForAuthenticatedUserRequest codespacesUpdateForAuthenticatedUserRequest, final ApiCallback<Codespace> _callback) throws ApiException {

        okhttp3.Call localVarCall = codespacesUpdateForAuthenticatedUserValidateBeforeCall(codespaceName, codespacesUpdateForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Codespace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
