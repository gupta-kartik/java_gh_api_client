/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Migration;
import org.openapitools.client.model.MigrationsMapCommitAuthorRequest;
import org.openapitools.client.model.MigrationsSetLfsPreferenceRequest;
import org.openapitools.client.model.MigrationsStartForAuthenticatedUserRequest;
import org.openapitools.client.model.MigrationsStartForOrgRequest;
import org.openapitools.client.model.MigrationsStartImportRequest;
import org.openapitools.client.model.MigrationsUpdateImportRequest;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.ModelImport;
import org.openapitools.client.model.PorterAuthor;
import org.openapitools.client.model.PorterLargeFile;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MigrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MigrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MigrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for migrationsCancelImport
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#cancel-an-import">Cancel an import Documentation</a>
     */
    public okhttp3.Call migrationsCancelImportCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsCancelImportValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsCancelImport(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsCancelImport(Async)");
        }

        return migrationsCancelImportCall(owner, repo, _callback);

    }

    /**
     * Cancel an import
     * Stop an import for a repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#cancel-an-import">Cancel an import Documentation</a>
     */
    public void migrationsCancelImport(String owner, String repo) throws ApiException {
        migrationsCancelImportWithHttpInfo(owner, repo);
    }

    /**
     * Cancel an import
     * Stop an import for a repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#cancel-an-import">Cancel an import Documentation</a>
     */
    public ApiResponse<Void> migrationsCancelImportWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = migrationsCancelImportValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel an import (asynchronously)
     * Stop an import for a repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#cancel-an-import">Cancel an import Documentation</a>
     */
    public okhttp3.Call migrationsCancelImportAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsCancelImportValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsDeleteArchiveForAuthenticatedUser
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive">Delete a user migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDeleteArchiveForAuthenticatedUserCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations/{migration_id}/archive"
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsDeleteArchiveForAuthenticatedUserValidateBeforeCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsDeleteArchiveForAuthenticatedUser(Async)");
        }

        return migrationsDeleteArchiveForAuthenticatedUserCall(migrationId, _callback);

    }

    /**
     * Delete a user migration archive
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     * @param migrationId The unique identifier of the migration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive">Delete a user migration archive Documentation</a>
     */
    public void migrationsDeleteArchiveForAuthenticatedUser(Integer migrationId) throws ApiException {
        migrationsDeleteArchiveForAuthenticatedUserWithHttpInfo(migrationId);
    }

    /**
     * Delete a user migration archive
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     * @param migrationId The unique identifier of the migration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive">Delete a user migration archive Documentation</a>
     */
    public ApiResponse<Void> migrationsDeleteArchiveForAuthenticatedUserWithHttpInfo(Integer migrationId) throws ApiException {
        okhttp3.Call localVarCall = migrationsDeleteArchiveForAuthenticatedUserValidateBeforeCall(migrationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user migration archive (asynchronously)
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive">Delete a user migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDeleteArchiveForAuthenticatedUserAsync(Integer migrationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsDeleteArchiveForAuthenticatedUserValidateBeforeCall(migrationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsDeleteArchiveForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive">Delete an organization migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDeleteArchiveForOrgCall(String org, Integer migrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations/{migration_id}/archive"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsDeleteArchiveForOrgValidateBeforeCall(String org, Integer migrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsDeleteArchiveForOrg(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsDeleteArchiveForOrg(Async)");
        }

        return migrationsDeleteArchiveForOrgCall(org, migrationId, _callback);

    }

    /**
     * Delete an organization migration archive
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive">Delete an organization migration archive Documentation</a>
     */
    public void migrationsDeleteArchiveForOrg(String org, Integer migrationId) throws ApiException {
        migrationsDeleteArchiveForOrgWithHttpInfo(org, migrationId);
    }

    /**
     * Delete an organization migration archive
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive">Delete an organization migration archive Documentation</a>
     */
    public ApiResponse<Void> migrationsDeleteArchiveForOrgWithHttpInfo(String org, Integer migrationId) throws ApiException {
        okhttp3.Call localVarCall = migrationsDeleteArchiveForOrgValidateBeforeCall(org, migrationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization migration archive (asynchronously)
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive">Delete an organization migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDeleteArchiveForOrgAsync(String org, Integer migrationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsDeleteArchiveForOrgValidateBeforeCall(org, migrationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsDownloadArchiveForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive">Download an organization migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDownloadArchiveForOrgCall(String org, Integer migrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations/{migration_id}/archive"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsDownloadArchiveForOrgValidateBeforeCall(String org, Integer migrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsDownloadArchiveForOrg(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsDownloadArchiveForOrg(Async)");
        }

        return migrationsDownloadArchiveForOrgCall(org, migrationId, _callback);

    }

    /**
     * Download an organization migration archive
     * Fetches the URL to a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive">Download an organization migration archive Documentation</a>
     */
    public void migrationsDownloadArchiveForOrg(String org, Integer migrationId) throws ApiException {
        migrationsDownloadArchiveForOrgWithHttpInfo(org, migrationId);
    }

    /**
     * Download an organization migration archive
     * Fetches the URL to a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive">Download an organization migration archive Documentation</a>
     */
    public ApiResponse<Void> migrationsDownloadArchiveForOrgWithHttpInfo(String org, Integer migrationId) throws ApiException {
        okhttp3.Call localVarCall = migrationsDownloadArchiveForOrgValidateBeforeCall(org, migrationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download an organization migration archive (asynchronously)
     * Fetches the URL to a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive">Download an organization migration archive Documentation</a>
     */
    public okhttp3.Call migrationsDownloadArchiveForOrgAsync(String org, Integer migrationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsDownloadArchiveForOrgValidateBeforeCall(org, migrationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetArchiveForAuthenticatedUser
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#download-a-user-migration-archive">Download a user migration archive Documentation</a>
     */
    public okhttp3.Call migrationsGetArchiveForAuthenticatedUserCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations/{migration_id}/archive"
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetArchiveForAuthenticatedUserValidateBeforeCall(Integer migrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsGetArchiveForAuthenticatedUser(Async)");
        }

        return migrationsGetArchiveForAuthenticatedUserCall(migrationId, _callback);

    }

    /**
     * Download a user migration archive
     * Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
     * @param migrationId The unique identifier of the migration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#download-a-user-migration-archive">Download a user migration archive Documentation</a>
     */
    public void migrationsGetArchiveForAuthenticatedUser(Integer migrationId) throws ApiException {
        migrationsGetArchiveForAuthenticatedUserWithHttpInfo(migrationId);
    }

    /**
     * Download a user migration archive
     * Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
     * @param migrationId The unique identifier of the migration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#download-a-user-migration-archive">Download a user migration archive Documentation</a>
     */
    public ApiResponse<Void> migrationsGetArchiveForAuthenticatedUserWithHttpInfo(Integer migrationId) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetArchiveForAuthenticatedUserValidateBeforeCall(migrationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a user migration archive (asynchronously)
     * Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
     * @param migrationId The unique identifier of the migration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#download-a-user-migration-archive">Download a user migration archive Documentation</a>
     */
    public okhttp3.Call migrationsGetArchiveForAuthenticatedUserAsync(Integer migrationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetArchiveForAuthenticatedUserValidateBeforeCall(migrationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetCommitAuthors
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-commit-authors">Get commit authors Documentation</a>
     */
    public okhttp3.Call migrationsGetCommitAuthorsCall(String owner, String repo, Integer since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import/authors"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetCommitAuthorsValidateBeforeCall(String owner, String repo, Integer since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsGetCommitAuthors(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsGetCommitAuthors(Async)");
        }

        return migrationsGetCommitAuthorsCall(owner, repo, since, _callback);

    }

    /**
     * Get commit authors
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username &#x60;hubot&#x60; into something like &#x60;hubot &lt;hubot@12341234-abab-fefe-8787-fedcba987654&gt;&#x60;.  This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @return List&lt;PorterAuthor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-commit-authors">Get commit authors Documentation</a>
     */
    public List<PorterAuthor> migrationsGetCommitAuthors(String owner, String repo, Integer since) throws ApiException {
        ApiResponse<List<PorterAuthor>> localVarResp = migrationsGetCommitAuthorsWithHttpInfo(owner, repo, since);
        return localVarResp.getData();
    }

    /**
     * Get commit authors
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username &#x60;hubot&#x60; into something like &#x60;hubot &lt;hubot@12341234-abab-fefe-8787-fedcba987654&gt;&#x60;.  This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @return ApiResponse&lt;List&lt;PorterAuthor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-commit-authors">Get commit authors Documentation</a>
     */
    public ApiResponse<List<PorterAuthor>> migrationsGetCommitAuthorsWithHttpInfo(String owner, String repo, Integer since) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetCommitAuthorsValidateBeforeCall(owner, repo, since, null);
        Type localVarReturnType = new TypeToken<List<PorterAuthor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commit authors (asynchronously)
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username &#x60;hubot&#x60; into something like &#x60;hubot &lt;hubot@12341234-abab-fefe-8787-fedcba987654&gt;&#x60;.  This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param since A user ID. Only return users with an ID greater than this ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-commit-authors">Get commit authors Documentation</a>
     */
    public okhttp3.Call migrationsGetCommitAuthorsAsync(String owner, String repo, Integer since, final ApiCallback<List<PorterAuthor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetCommitAuthorsValidateBeforeCall(owner, repo, since, _callback);
        Type localVarReturnType = new TypeToken<List<PorterAuthor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetImportStatus
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-an-import-status">Get an import status Documentation</a>
     */
    public okhttp3.Call migrationsGetImportStatusCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetImportStatusValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsGetImportStatus(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsGetImportStatus(Async)");
        }

        return migrationsGetImportStatusCall(owner, repo, _callback);

    }

    /**
     * Get an import status
     * View the progress of an import.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.  **Import status**  This section includes details about the possible values of the &#x60;status&#x60; field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   &#x60;detecting&#x60; - the \&quot;detection\&quot; step of the import is in progress because the request did not include a &#x60;vcs&#x60; parameter. The import is identifying the type of source control present at the URL. *   &#x60;importing&#x60; - the \&quot;raw\&quot; step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include &#x60;commit_count&#x60; (the total number of raw commits that will be imported) and &#x60;percent&#x60; (0 - 100, the current progress through the import). *   &#x60;mapping&#x60; - the \&quot;rewrite\&quot; step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   &#x60;pushing&#x60; - the \&quot;push\&quot; step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include &#x60;push_percent&#x60;, which is the percent value reported by &#x60;git push&#x60; when it is \&quot;Writing objects\&quot;. *   &#x60;complete&#x60; - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the &#x60;status&#x60; field:  *   &#x60;auth_failed&#x60; - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;error&#x60; - the import encountered an error. The import progress response will include the &#x60;failed_step&#x60; and an error message. Contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api) for more information. *   &#x60;detection_needs_auth&#x60; - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;detection_found_nothing&#x60; - the importer didn&#39;t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   &#x60;detection_found_multiple&#x60; - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a &#x60;project_choices&#x60; field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a &#x60;project_choices&#x60; field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   &#x60;use_lfs&#x60; - describes whether the import has been opted in or out of using Git LFS. The value can be &#x60;opt_in&#x60;, &#x60;opt_out&#x60;, or &#x60;undecided&#x60; if no action has been taken. *   &#x60;has_large_files&#x60; - the boolean value describing whether files larger than 100MB were found during the &#x60;importing&#x60; step. *   &#x60;large_files_size&#x60; - the total size in gigabytes of files larger than 100MB found in the originating repository. *   &#x60;large_files_count&#x60; - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \&quot;Get Large Files\&quot; request.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-an-import-status">Get an import status Documentation</a>
     */
    public ModelImport migrationsGetImportStatus(String owner, String repo) throws ApiException {
        ApiResponse<ModelImport> localVarResp = migrationsGetImportStatusWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get an import status
     * View the progress of an import.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.  **Import status**  This section includes details about the possible values of the &#x60;status&#x60; field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   &#x60;detecting&#x60; - the \&quot;detection\&quot; step of the import is in progress because the request did not include a &#x60;vcs&#x60; parameter. The import is identifying the type of source control present at the URL. *   &#x60;importing&#x60; - the \&quot;raw\&quot; step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include &#x60;commit_count&#x60; (the total number of raw commits that will be imported) and &#x60;percent&#x60; (0 - 100, the current progress through the import). *   &#x60;mapping&#x60; - the \&quot;rewrite\&quot; step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   &#x60;pushing&#x60; - the \&quot;push\&quot; step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include &#x60;push_percent&#x60;, which is the percent value reported by &#x60;git push&#x60; when it is \&quot;Writing objects\&quot;. *   &#x60;complete&#x60; - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the &#x60;status&#x60; field:  *   &#x60;auth_failed&#x60; - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;error&#x60; - the import encountered an error. The import progress response will include the &#x60;failed_step&#x60; and an error message. Contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api) for more information. *   &#x60;detection_needs_auth&#x60; - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;detection_found_nothing&#x60; - the importer didn&#39;t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   &#x60;detection_found_multiple&#x60; - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a &#x60;project_choices&#x60; field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a &#x60;project_choices&#x60; field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   &#x60;use_lfs&#x60; - describes whether the import has been opted in or out of using Git LFS. The value can be &#x60;opt_in&#x60;, &#x60;opt_out&#x60;, or &#x60;undecided&#x60; if no action has been taken. *   &#x60;has_large_files&#x60; - the boolean value describing whether files larger than 100MB were found during the &#x60;importing&#x60; step. *   &#x60;large_files_size&#x60; - the total size in gigabytes of files larger than 100MB found in the originating repository. *   &#x60;large_files_count&#x60; - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \&quot;Get Large Files\&quot; request.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-an-import-status">Get an import status Documentation</a>
     */
    public ApiResponse<ModelImport> migrationsGetImportStatusWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetImportStatusValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an import status (asynchronously)
     * View the progress of an import.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.  **Import status**  This section includes details about the possible values of the &#x60;status&#x60; field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   &#x60;detecting&#x60; - the \&quot;detection\&quot; step of the import is in progress because the request did not include a &#x60;vcs&#x60; parameter. The import is identifying the type of source control present at the URL. *   &#x60;importing&#x60; - the \&quot;raw\&quot; step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include &#x60;commit_count&#x60; (the total number of raw commits that will be imported) and &#x60;percent&#x60; (0 - 100, the current progress through the import). *   &#x60;mapping&#x60; - the \&quot;rewrite\&quot; step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   &#x60;pushing&#x60; - the \&quot;push\&quot; step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include &#x60;push_percent&#x60;, which is the percent value reported by &#x60;git push&#x60; when it is \&quot;Writing objects\&quot;. *   &#x60;complete&#x60; - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the &#x60;status&#x60; field:  *   &#x60;auth_failed&#x60; - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;error&#x60; - the import encountered an error. The import progress response will include the &#x60;failed_step&#x60; and an error message. Contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api) for more information. *   &#x60;detection_needs_auth&#x60; - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   &#x60;detection_found_nothing&#x60; - the importer didn&#39;t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   &#x60;detection_found_multiple&#x60; - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a &#x60;project_choices&#x60; field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a &#x60;project_choices&#x60; field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   &#x60;use_lfs&#x60; - describes whether the import has been opted in or out of using Git LFS. The value can be &#x60;opt_in&#x60;, &#x60;opt_out&#x60;, or &#x60;undecided&#x60; if no action has been taken. *   &#x60;has_large_files&#x60; - the boolean value describing whether files larger than 100MB were found during the &#x60;importing&#x60; step. *   &#x60;large_files_size&#x60; - the total size in gigabytes of files larger than 100MB found in the originating repository. *   &#x60;large_files_count&#x60; - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \&quot;Get Large Files\&quot; request.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-an-import-status">Get an import status Documentation</a>
     */
    public okhttp3.Call migrationsGetImportStatusAsync(String owner, String repo, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetImportStatusValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetLargeFiles
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-large-files">Get large files Documentation</a>
     */
    public okhttp3.Call migrationsGetLargeFilesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import/large_files"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetLargeFilesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsGetLargeFiles(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsGetLargeFiles(Async)");
        }

        return migrationsGetLargeFilesCall(owner, repo, _callback);

    }

    /**
     * Get large files
     * List files larger than 100MB found during the import  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return List&lt;PorterLargeFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-large-files">Get large files Documentation</a>
     */
    public List<PorterLargeFile> migrationsGetLargeFiles(String owner, String repo) throws ApiException {
        ApiResponse<List<PorterLargeFile>> localVarResp = migrationsGetLargeFilesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get large files
     * List files larger than 100MB found during the import  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;List&lt;PorterLargeFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-large-files">Get large files Documentation</a>
     */
    public ApiResponse<List<PorterLargeFile>> migrationsGetLargeFilesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetLargeFilesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<PorterLargeFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get large files (asynchronously)
     * List files larger than 100MB found during the import  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#get-large-files">Get large files Documentation</a>
     */
    public okhttp3.Call migrationsGetLargeFilesAsync(String owner, String repo, final ApiCallback<List<PorterLargeFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetLargeFilesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<PorterLargeFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetStatusForAuthenticatedUser
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#get-a-user-migration-status">Get a user migration status Documentation</a>
     */
    public okhttp3.Call migrationsGetStatusForAuthenticatedUserCall(Integer migrationId, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations/{migration_id}"
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetStatusForAuthenticatedUserValidateBeforeCall(Integer migrationId, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsGetStatusForAuthenticatedUser(Async)");
        }

        return migrationsGetStatusForAuthenticatedUserCall(migrationId, exclude, _callback);

    }

    /**
     * Get a user migration status
     * Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:  *   &#x60;pending&#x60; - the migration hasn&#39;t started yet. *   &#x60;exporting&#x60; - the migration is in progress. *   &#x60;exported&#x60; - the migration finished successfully. *   &#x60;failed&#x60; - the migration failed.  Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude  (optional)
     * @return Migration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#get-a-user-migration-status">Get a user migration status Documentation</a>
     */
    public Migration migrationsGetStatusForAuthenticatedUser(Integer migrationId, List<String> exclude) throws ApiException {
        ApiResponse<Migration> localVarResp = migrationsGetStatusForAuthenticatedUserWithHttpInfo(migrationId, exclude);
        return localVarResp.getData();
    }

    /**
     * Get a user migration status
     * Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:  *   &#x60;pending&#x60; - the migration hasn&#39;t started yet. *   &#x60;exporting&#x60; - the migration is in progress. *   &#x60;exported&#x60; - the migration finished successfully. *   &#x60;failed&#x60; - the migration failed.  Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude  (optional)
     * @return ApiResponse&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#get-a-user-migration-status">Get a user migration status Documentation</a>
     */
    public ApiResponse<Migration> migrationsGetStatusForAuthenticatedUserWithHttpInfo(Integer migrationId, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetStatusForAuthenticatedUserValidateBeforeCall(migrationId, exclude, null);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user migration status (asynchronously)
     * Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:  *   &#x60;pending&#x60; - the migration hasn&#39;t started yet. *   &#x60;exporting&#x60; - the migration is in progress. *   &#x60;exported&#x60; - the migration finished successfully. *   &#x60;failed&#x60; - the migration failed.  Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#get-a-user-migration-status">Get a user migration status Documentation</a>
     */
    public okhttp3.Call migrationsGetStatusForAuthenticatedUserAsync(Integer migrationId, List<String> exclude, final ApiCallback<Migration> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetStatusForAuthenticatedUserValidateBeforeCall(migrationId, exclude, _callback);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsGetStatusForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status">Get an organization migration status Documentation</a>
     */
    public okhttp3.Call migrationsGetStatusForOrgCall(String org, Integer migrationId, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations/{migration_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsGetStatusForOrgValidateBeforeCall(String org, Integer migrationId, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsGetStatusForOrg(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsGetStatusForOrg(Async)");
        }

        return migrationsGetStatusForOrgCall(org, migrationId, exclude, _callback);

    }

    /**
     * Get an organization migration status
     * Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @return Migration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status">Get an organization migration status Documentation</a>
     */
    public Migration migrationsGetStatusForOrg(String org, Integer migrationId, List<String> exclude) throws ApiException {
        ApiResponse<Migration> localVarResp = migrationsGetStatusForOrgWithHttpInfo(org, migrationId, exclude);
        return localVarResp.getData();
    }

    /**
     * Get an organization migration status
     * Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @return ApiResponse&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status">Get an organization migration status Documentation</a>
     */
    public ApiResponse<Migration> migrationsGetStatusForOrgWithHttpInfo(String org, Integer migrationId, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = migrationsGetStatusForOrgValidateBeforeCall(org, migrationId, exclude, null);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization migration status (asynchronously)
     * Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status">Get an organization migration status Documentation</a>
     */
    public okhttp3.Call migrationsGetStatusForOrgAsync(String org, Integer migrationId, List<String> exclude, final ApiCallback<Migration> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsGetStatusForOrgValidateBeforeCall(org, migrationId, exclude, _callback);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsListForAuthenticatedUser
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-user-migrations">List user migrations Documentation</a>
     */
    public okhttp3.Call migrationsListForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsListForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return migrationsListForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List user migrations
     * Lists all migrations a user has started.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-user-migrations">List user migrations Documentation</a>
     */
    public List<Migration> migrationsListForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Migration>> localVarResp = migrationsListForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List user migrations
     * Lists all migrations a user has started.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Migration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-user-migrations">List user migrations Documentation</a>
     */
    public ApiResponse<List<Migration>> migrationsListForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = migrationsListForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user migrations (asynchronously)
     * Lists all migrations a user has started.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-user-migrations">List user migrations Documentation</a>
     */
    public okhttp3.Call migrationsListForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<Migration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsListForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsListForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-organization-migrations">List organization migrations Documentation</a>
     */
    public okhttp3.Call migrationsListForOrgCall(String org, Integer perPage, Integer page, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsListForOrgValidateBeforeCall(String org, Integer perPage, Integer page, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsListForOrg(Async)");
        }

        return migrationsListForOrgCall(org, perPage, page, exclude, _callback);

    }

    /**
     * List organization migrations
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of &#x60;repositories&#x60; is only returned for export migrations.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @return List&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-organization-migrations">List organization migrations Documentation</a>
     */
    public List<Migration> migrationsListForOrg(String org, Integer perPage, Integer page, List<String> exclude) throws ApiException {
        ApiResponse<List<Migration>> localVarResp = migrationsListForOrgWithHttpInfo(org, perPage, page, exclude);
        return localVarResp.getData();
    }

    /**
     * List organization migrations
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of &#x60;repositories&#x60; is only returned for export migrations.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @return ApiResponse&lt;List&lt;Migration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-organization-migrations">List organization migrations Documentation</a>
     */
    public ApiResponse<List<Migration>> migrationsListForOrgWithHttpInfo(String org, Integer perPage, Integer page, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = migrationsListForOrgValidateBeforeCall(org, perPage, page, exclude, null);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization migrations (asynchronously)
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of &#x60;repositories&#x60; is only returned for export migrations.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param exclude Exclude attributes from the API response to improve performance (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-organization-migrations">List organization migrations Documentation</a>
     */
    public okhttp3.Call migrationsListForOrgAsync(String org, Integer perPage, Integer page, List<String> exclude, final ApiCallback<List<Migration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsListForOrgValidateBeforeCall(org, perPage, page, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<Migration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsListReposForAuthenticatedUser
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration">List repositories for a user migration Documentation</a>
     */
    public okhttp3.Call migrationsListReposForAuthenticatedUserCall(Integer migrationId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations/{migration_id}/repositories"
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsListReposForAuthenticatedUserValidateBeforeCall(Integer migrationId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsListReposForAuthenticatedUser(Async)");
        }

        return migrationsListReposForAuthenticatedUserCall(migrationId, perPage, page, _callback);

    }

    /**
     * List repositories for a user migration
     * Lists all the repositories for this user migration.
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration">List repositories for a user migration Documentation</a>
     */
    public List<MinimalRepository> migrationsListReposForAuthenticatedUser(Integer migrationId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = migrationsListReposForAuthenticatedUserWithHttpInfo(migrationId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories for a user migration
     * Lists all the repositories for this user migration.
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration">List repositories for a user migration Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> migrationsListReposForAuthenticatedUserWithHttpInfo(Integer migrationId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = migrationsListReposForAuthenticatedUserValidateBeforeCall(migrationId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories for a user migration (asynchronously)
     * Lists all the repositories for this user migration.
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration">List repositories for a user migration Documentation</a>
     */
    public okhttp3.Call migrationsListReposForAuthenticatedUserAsync(Integer migrationId, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsListReposForAuthenticatedUserValidateBeforeCall(migrationId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsListReposForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration">List repositories in an organization migration Documentation</a>
     */
    public okhttp3.Call migrationsListReposForOrgCall(String org, Integer migrationId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations/{migration_id}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsListReposForOrgValidateBeforeCall(String org, Integer migrationId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsListReposForOrg(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsListReposForOrg(Async)");
        }

        return migrationsListReposForOrgCall(org, migrationId, perPage, page, _callback);

    }

    /**
     * List repositories in an organization migration
     * List all the repositories for this organization migration.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration">List repositories in an organization migration Documentation</a>
     */
    public List<MinimalRepository> migrationsListReposForOrg(String org, Integer migrationId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = migrationsListReposForOrgWithHttpInfo(org, migrationId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories in an organization migration
     * List all the repositories for this organization migration.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration">List repositories in an organization migration Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> migrationsListReposForOrgWithHttpInfo(String org, Integer migrationId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = migrationsListReposForOrgValidateBeforeCall(org, migrationId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories in an organization migration (asynchronously)
     * List all the repositories for this organization migration.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration">List repositories in an organization migration Documentation</a>
     */
    public okhttp3.Call migrationsListReposForOrgAsync(String org, Integer migrationId, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsListReposForOrgValidateBeforeCall(org, migrationId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsMapCommitAuthor
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param authorId  (required)
     * @param migrationsMapCommitAuthorRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#map-a-commit-author">Map a commit author Documentation</a>
     */
    public okhttp3.Call migrationsMapCommitAuthorCall(String owner, String repo, Integer authorId, MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsMapCommitAuthorRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import/authors/{author_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "author_id" + "}", localVarApiClient.escapeString(authorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsMapCommitAuthorValidateBeforeCall(String owner, String repo, Integer authorId, MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsMapCommitAuthor(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsMapCommitAuthor(Async)");
        }

        // verify the required parameter 'authorId' is set
        if (authorId == null) {
            throw new ApiException("Missing the required parameter 'authorId' when calling migrationsMapCommitAuthor(Async)");
        }

        return migrationsMapCommitAuthorCall(owner, repo, authorId, migrationsMapCommitAuthorRequest, _callback);

    }

    /**
     * Map a commit author
     * Update an author&#39;s identity for the import. Your application can continue updating authors any time before you push new commits to the repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param authorId  (required)
     * @param migrationsMapCommitAuthorRequest  (optional)
     * @return PorterAuthor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#map-a-commit-author">Map a commit author Documentation</a>
     */
    public PorterAuthor migrationsMapCommitAuthor(String owner, String repo, Integer authorId, MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest) throws ApiException {
        ApiResponse<PorterAuthor> localVarResp = migrationsMapCommitAuthorWithHttpInfo(owner, repo, authorId, migrationsMapCommitAuthorRequest);
        return localVarResp.getData();
    }

    /**
     * Map a commit author
     * Update an author&#39;s identity for the import. Your application can continue updating authors any time before you push new commits to the repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param authorId  (required)
     * @param migrationsMapCommitAuthorRequest  (optional)
     * @return ApiResponse&lt;PorterAuthor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#map-a-commit-author">Map a commit author Documentation</a>
     */
    public ApiResponse<PorterAuthor> migrationsMapCommitAuthorWithHttpInfo(String owner, String repo, Integer authorId, MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsMapCommitAuthorValidateBeforeCall(owner, repo, authorId, migrationsMapCommitAuthorRequest, null);
        Type localVarReturnType = new TypeToken<PorterAuthor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Map a commit author (asynchronously)
     * Update an author&#39;s identity for the import. Your application can continue updating authors any time before you push new commits to the repository.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param authorId  (required)
     * @param migrationsMapCommitAuthorRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#map-a-commit-author">Map a commit author Documentation</a>
     */
    public okhttp3.Call migrationsMapCommitAuthorAsync(String owner, String repo, Integer authorId, MigrationsMapCommitAuthorRequest migrationsMapCommitAuthorRequest, final ApiCallback<PorterAuthor> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsMapCommitAuthorValidateBeforeCall(owner, repo, authorId, migrationsMapCommitAuthorRequest, _callback);
        Type localVarReturnType = new TypeToken<PorterAuthor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsSetLfsPreference
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsSetLfsPreferenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference">Update Git LFS preference Documentation</a>
     */
    public okhttp3.Call migrationsSetLfsPreferenceCall(String owner, String repo, MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsSetLfsPreferenceRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import/lfs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsSetLfsPreferenceValidateBeforeCall(String owner, String repo, MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsSetLfsPreference(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsSetLfsPreference(Async)");
        }

        // verify the required parameter 'migrationsSetLfsPreferenceRequest' is set
        if (migrationsSetLfsPreferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationsSetLfsPreferenceRequest' when calling migrationsSetLfsPreference(Async)");
        }

        return migrationsSetLfsPreferenceCall(owner, repo, migrationsSetLfsPreferenceRequest, _callback);

    }

    /**
     * Update Git LFS preference
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com).  You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsSetLfsPreferenceRequest  (required)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference">Update Git LFS preference Documentation</a>
     */
    public ModelImport migrationsSetLfsPreference(String owner, String repo, MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest) throws ApiException {
        ApiResponse<ModelImport> localVarResp = migrationsSetLfsPreferenceWithHttpInfo(owner, repo, migrationsSetLfsPreferenceRequest);
        return localVarResp.getData();
    }

    /**
     * Update Git LFS preference
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com).  You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsSetLfsPreferenceRequest  (required)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference">Update Git LFS preference Documentation</a>
     */
    public ApiResponse<ModelImport> migrationsSetLfsPreferenceWithHttpInfo(String owner, String repo, MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsSetLfsPreferenceValidateBeforeCall(owner, repo, migrationsSetLfsPreferenceRequest, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Git LFS preference (asynchronously)
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com).  You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API. 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsSetLfsPreferenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference">Update Git LFS preference Documentation</a>
     */
    public okhttp3.Call migrationsSetLfsPreferenceAsync(String owner, String repo, MigrationsSetLfsPreferenceRequest migrationsSetLfsPreferenceRequest, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsSetLfsPreferenceValidateBeforeCall(owner, repo, migrationsSetLfsPreferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsStartForAuthenticatedUser
     * @param migrationsStartForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#start-a-user-migration">Start a user migration Documentation</a>
     */
    public okhttp3.Call migrationsStartForAuthenticatedUserCall(MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsStartForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/migrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsStartForAuthenticatedUserValidateBeforeCall(MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationsStartForAuthenticatedUserRequest' is set
        if (migrationsStartForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationsStartForAuthenticatedUserRequest' when calling migrationsStartForAuthenticatedUser(Async)");
        }

        return migrationsStartForAuthenticatedUserCall(migrationsStartForAuthenticatedUserRequest, _callback);

    }

    /**
     * Start a user migration
     * Initiates the generation of a user migration archive.
     * @param migrationsStartForAuthenticatedUserRequest  (required)
     * @return Migration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#start-a-user-migration">Start a user migration Documentation</a>
     */
    public Migration migrationsStartForAuthenticatedUser(MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Migration> localVarResp = migrationsStartForAuthenticatedUserWithHttpInfo(migrationsStartForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Start a user migration
     * Initiates the generation of a user migration archive.
     * @param migrationsStartForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#start-a-user-migration">Start a user migration Documentation</a>
     */
    public ApiResponse<Migration> migrationsStartForAuthenticatedUserWithHttpInfo(MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsStartForAuthenticatedUserValidateBeforeCall(migrationsStartForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a user migration (asynchronously)
     * Initiates the generation of a user migration archive.
     * @param migrationsStartForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#start-a-user-migration">Start a user migration Documentation</a>
     */
    public okhttp3.Call migrationsStartForAuthenticatedUserAsync(MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest, final ApiCallback<Migration> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsStartForAuthenticatedUserValidateBeforeCall(migrationsStartForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsStartForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationsStartForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#start-an-organization-migration">Start an organization migration Documentation</a>
     */
    public okhttp3.Call migrationsStartForOrgCall(String org, MigrationsStartForOrgRequest migrationsStartForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsStartForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsStartForOrgValidateBeforeCall(String org, MigrationsStartForOrgRequest migrationsStartForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsStartForOrg(Async)");
        }

        // verify the required parameter 'migrationsStartForOrgRequest' is set
        if (migrationsStartForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationsStartForOrgRequest' when calling migrationsStartForOrg(Async)");
        }

        return migrationsStartForOrgCall(org, migrationsStartForOrgRequest, _callback);

    }

    /**
     * Start an organization migration
     * Initiates the generation of a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationsStartForOrgRequest  (required)
     * @return Migration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#start-an-organization-migration">Start an organization migration Documentation</a>
     */
    public Migration migrationsStartForOrg(String org, MigrationsStartForOrgRequest migrationsStartForOrgRequest) throws ApiException {
        ApiResponse<Migration> localVarResp = migrationsStartForOrgWithHttpInfo(org, migrationsStartForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Start an organization migration
     * Initiates the generation of a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationsStartForOrgRequest  (required)
     * @return ApiResponse&lt;Migration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#start-an-organization-migration">Start an organization migration Documentation</a>
     */
    public ApiResponse<Migration> migrationsStartForOrgWithHttpInfo(String org, MigrationsStartForOrgRequest migrationsStartForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsStartForOrgValidateBeforeCall(org, migrationsStartForOrgRequest, null);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start an organization migration (asynchronously)
     * Initiates the generation of a migration archive.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationsStartForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#start-an-organization-migration">Start an organization migration Documentation</a>
     */
    public okhttp3.Call migrationsStartForOrgAsync(String org, MigrationsStartForOrgRequest migrationsStartForOrgRequest, final ApiCallback<Migration> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsStartForOrgValidateBeforeCall(org, migrationsStartForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Migration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsStartImport
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsStartImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#start-an-import">Start an import Documentation</a>
     */
    public okhttp3.Call migrationsStartImportCall(String owner, String repo, MigrationsStartImportRequest migrationsStartImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsStartImportRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsStartImportValidateBeforeCall(String owner, String repo, MigrationsStartImportRequest migrationsStartImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsStartImport(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsStartImport(Async)");
        }

        // verify the required parameter 'migrationsStartImportRequest' is set
        if (migrationsStartImportRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationsStartImportRequest' when calling migrationsStartImport(Async)");
        }

        return migrationsStartImportCall(owner, repo, migrationsStartImportRequest, _callback);

    }

    /**
     * Start an import
     * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status &#x60;422 Unprocessable Entity&#x60; response. **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsStartImportRequest  (required)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#start-an-import">Start an import Documentation</a>
     */
    public ModelImport migrationsStartImport(String owner, String repo, MigrationsStartImportRequest migrationsStartImportRequest) throws ApiException {
        ApiResponse<ModelImport> localVarResp = migrationsStartImportWithHttpInfo(owner, repo, migrationsStartImportRequest);
        return localVarResp.getData();
    }

    /**
     * Start an import
     * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status &#x60;422 Unprocessable Entity&#x60; response. **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsStartImportRequest  (required)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#start-an-import">Start an import Documentation</a>
     */
    public ApiResponse<ModelImport> migrationsStartImportWithHttpInfo(String owner, String repo, MigrationsStartImportRequest migrationsStartImportRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsStartImportValidateBeforeCall(owner, repo, migrationsStartImportRequest, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start an import (asynchronously)
     * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status &#x60;422 Unprocessable Entity&#x60; response. **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsStartImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#start-an-import">Start an import Documentation</a>
     */
    public okhttp3.Call migrationsStartImportAsync(String owner, String repo, MigrationsStartImportRequest migrationsStartImportRequest, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsStartImportValidateBeforeCall(owner, repo, migrationsStartImportRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsUnlockRepoForAuthenticatedUser
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#unlock-a-user-repository">Unlock a user repository Documentation</a>
     */
    public okhttp3.Call migrationsUnlockRepoForAuthenticatedUserCall(Integer migrationId, String repoName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/migrations/{migration_id}/repos/{repo_name}/lock"
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()))
            .replace("{" + "repo_name" + "}", localVarApiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsUnlockRepoForAuthenticatedUserValidateBeforeCall(Integer migrationId, String repoName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsUnlockRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling migrationsUnlockRepoForAuthenticatedUser(Async)");
        }

        return migrationsUnlockRepoForAuthenticatedUserCall(migrationId, repoName, _callback);

    }

    /**
     * Unlock a user repository
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#unlock-a-user-repository">Unlock a user repository Documentation</a>
     */
    public void migrationsUnlockRepoForAuthenticatedUser(Integer migrationId, String repoName) throws ApiException {
        migrationsUnlockRepoForAuthenticatedUserWithHttpInfo(migrationId, repoName);
    }

    /**
     * Unlock a user repository
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#unlock-a-user-repository">Unlock a user repository Documentation</a>
     */
    public ApiResponse<Void> migrationsUnlockRepoForAuthenticatedUserWithHttpInfo(Integer migrationId, String repoName) throws ApiException {
        okhttp3.Call localVarCall = migrationsUnlockRepoForAuthenticatedUserValidateBeforeCall(migrationId, repoName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlock a user repository (asynchronously)
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/users#unlock-a-user-repository">Unlock a user repository Documentation</a>
     */
    public okhttp3.Call migrationsUnlockRepoForAuthenticatedUserAsync(Integer migrationId, String repoName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsUnlockRepoForAuthenticatedUserValidateBeforeCall(migrationId, repoName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsUnlockRepoForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository">Unlock an organization repository Documentation</a>
     */
    public okhttp3.Call migrationsUnlockRepoForOrgCall(String org, Integer migrationId, String repoName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "migration_id" + "}", localVarApiClient.escapeString(migrationId.toString()))
            .replace("{" + "repo_name" + "}", localVarApiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsUnlockRepoForOrgValidateBeforeCall(String org, Integer migrationId, String repoName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling migrationsUnlockRepoForOrg(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling migrationsUnlockRepoForOrg(Async)");
        }

        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling migrationsUnlockRepoForOrg(Async)");
        }

        return migrationsUnlockRepoForOrgCall(org, migrationId, repoName, _callback);

    }

    /**
     * Unlock an organization repository
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository">Unlock an organization repository Documentation</a>
     */
    public void migrationsUnlockRepoForOrg(String org, Integer migrationId, String repoName) throws ApiException {
        migrationsUnlockRepoForOrgWithHttpInfo(org, migrationId, repoName);
    }

    /**
     * Unlock an organization repository
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository">Unlock an organization repository Documentation</a>
     */
    public ApiResponse<Void> migrationsUnlockRepoForOrgWithHttpInfo(String org, Integer migrationId, String repoName) throws ApiException {
        okhttp3.Call localVarCall = migrationsUnlockRepoForOrgValidateBeforeCall(org, migrationId, repoName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlock an organization repository (asynchronously)
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param migrationId The unique identifier of the migration. (required)
     * @param repoName repo_name parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository">Unlock an organization repository Documentation</a>
     */
    public okhttp3.Call migrationsUnlockRepoForOrgAsync(String org, Integer migrationId, String repoName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsUnlockRepoForOrgValidateBeforeCall(org, migrationId, repoName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrationsUpdateImport
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsUpdateImportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-an-import">Update an import Documentation</a>
     */
    public okhttp3.Call migrationsUpdateImportCall(String owner, String repo, MigrationsUpdateImportRequest migrationsUpdateImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationsUpdateImportRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/import"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrationsUpdateImportValidateBeforeCall(String owner, String repo, MigrationsUpdateImportRequest migrationsUpdateImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling migrationsUpdateImport(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling migrationsUpdateImport(Async)");
        }

        return migrationsUpdateImportCall(owner, repo, migrationsUpdateImportRequest, _callback);

    }

    /**
     * Update an import
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status &#x60;detection_found_multiple&#x60; and the Import Progress response will include a &#x60;project_choices&#x60; array. You can select the project to import by providing one of the objects in the &#x60;project_choices&#x60; array in the update request.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsUpdateImportRequest  (optional)
     * @return ModelImport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-an-import">Update an import Documentation</a>
     */
    public ModelImport migrationsUpdateImport(String owner, String repo, MigrationsUpdateImportRequest migrationsUpdateImportRequest) throws ApiException {
        ApiResponse<ModelImport> localVarResp = migrationsUpdateImportWithHttpInfo(owner, repo, migrationsUpdateImportRequest);
        return localVarResp.getData();
    }

    /**
     * Update an import
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status &#x60;detection_found_multiple&#x60; and the Import Progress response will include a &#x60;project_choices&#x60; array. You can select the project to import by providing one of the objects in the &#x60;project_choices&#x60; array in the update request.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsUpdateImportRequest  (optional)
     * @return ApiResponse&lt;ModelImport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-an-import">Update an import Documentation</a>
     */
    public ApiResponse<ModelImport> migrationsUpdateImportWithHttpInfo(String owner, String repo, MigrationsUpdateImportRequest migrationsUpdateImportRequest) throws ApiException {
        okhttp3.Call localVarCall = migrationsUpdateImportValidateBeforeCall(owner, repo, migrationsUpdateImportRequest, null);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an import (asynchronously)
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status &#x60;detection_found_multiple&#x60; and the Import Progress response will include a &#x60;project_choices&#x60; array. You can select the project to import by providing one of the objects in the &#x60;project_choices&#x60; array in the update request.  **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the \&quot;Source imports\&quot; API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param migrationsUpdateImportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unavailable due to service under maintenance. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/rest/migrations/source-imports#update-an-import">Update an import Documentation</a>
     */
    public okhttp3.Call migrationsUpdateImportAsync(String owner, String repo, MigrationsUpdateImportRequest migrationsUpdateImportRequest, final ApiCallback<ModelImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrationsUpdateImportValidateBeforeCall(owner, repo, migrationsUpdateImportRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
