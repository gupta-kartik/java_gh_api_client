/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrgsUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class OrgsUpdateRequest {
  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS = "has_organization_projects";
  @SerializedName(SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS)
  private Boolean hasOrganizationProjects;

  public static final String SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS = "has_repository_projects";
  @SerializedName(SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS)
  private Boolean hasRepositoryProjects;

  /**
   * Default permission level members have for organization repositories.
   */
  @JsonAdapter(DefaultRepositoryPermissionEnum.Adapter.class)
  public enum DefaultRepositoryPermissionEnum {
    READ("read"),
    
    WRITE("write"),
    
    ADMIN("admin"),
    
    NONE("none");

    private String value;

    DefaultRepositoryPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultRepositoryPermissionEnum fromValue(String value) {
      for (DefaultRepositoryPermissionEnum b : DefaultRepositoryPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultRepositoryPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultRepositoryPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultRepositoryPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultRepositoryPermissionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION = "default_repository_permission";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION)
  private DefaultRepositoryPermissionEnum defaultRepositoryPermission = DefaultRepositoryPermissionEnum.READ;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES = "members_can_create_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES)
  private Boolean membersCanCreateRepositories = true;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES = "members_can_create_internal_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES)
  private Boolean membersCanCreateInternalRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES = "members_can_create_private_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES)
  private Boolean membersCanCreatePrivateRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES = "members_can_create_public_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES)
  private Boolean membersCanCreatePublicRepositories;

  /**
   * Specifies which types of repositories non-admin organization members can create. &#x60;private&#x60; is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in &#x60;members_can_create_repositories&#x60;. See the parameter deprecation notice in the operation description for details.
   */
  @JsonAdapter(MembersAllowedRepositoryCreationTypeEnum.Adapter.class)
  public enum MembersAllowedRepositoryCreationTypeEnum {
    ALL("all"),
    
    PRIVATE("private"),
    
    NONE("none");

    private String value;

    MembersAllowedRepositoryCreationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembersAllowedRepositoryCreationTypeEnum fromValue(String value) {
      for (MembersAllowedRepositoryCreationTypeEnum b : MembersAllowedRepositoryCreationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembersAllowedRepositoryCreationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembersAllowedRepositoryCreationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembersAllowedRepositoryCreationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MembersAllowedRepositoryCreationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE = "members_allowed_repository_creation_type";
  @SerializedName(SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE)
  private MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES = "members_can_create_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES)
  private Boolean membersCanCreatePages = true;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_PAGES = "members_can_create_public_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_PAGES)
  private Boolean membersCanCreatePublicPages = true;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_PAGES = "members_can_create_private_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_PAGES)
  private Boolean membersCanCreatePrivatePages = true;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_FORK_PRIVATE_REPOSITORIES = "members_can_fork_private_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_FORK_PRIVATE_REPOSITORIES)
  private Boolean membersCanForkPrivateRepositories = false;

  public static final String SERIALIZED_NAME_WEB_COMMIT_SIGNOFF_REQUIRED = "web_commit_signoff_required";
  @SerializedName(SERIALIZED_NAME_WEB_COMMIT_SIGNOFF_REQUIRED)
  private Boolean webCommitSignoffRequired = false;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private String blog;

  public static final String SERIALIZED_NAME_ADVANCED_SECURITY_ENABLED_FOR_NEW_REPOSITORIES = "advanced_security_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_ADVANCED_SECURITY_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean advancedSecurityEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_DEPENDABOT_ALERTS_ENABLED_FOR_NEW_REPOSITORIES = "dependabot_alerts_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_DEPENDABOT_ALERTS_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean dependabotAlertsEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_DEPENDABOT_SECURITY_UPDATES_ENABLED_FOR_NEW_REPOSITORIES = "dependabot_security_updates_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_DEPENDABOT_SECURITY_UPDATES_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_DEPENDENCY_GRAPH_ENABLED_FOR_NEW_REPOSITORIES = "dependency_graph_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_GRAPH_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean dependencyGraphEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_SECRET_SCANNING_ENABLED_FOR_NEW_REPOSITORIES = "secret_scanning_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean secretScanningEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_ENABLED_FOR_NEW_REPOSITORIES = "secret_scanning_push_protection_enabled_for_new_repositories";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_ENABLED_FOR_NEW_REPOSITORIES)
  private Boolean secretScanningPushProtectionEnabledForNewRepositories;

  public static final String SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_CUSTOM_LINK_ENABLED = "secret_scanning_push_protection_custom_link_enabled";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_CUSTOM_LINK_ENABLED)
  private Boolean secretScanningPushProtectionCustomLinkEnabled;

  public static final String SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_CUSTOM_LINK = "secret_scanning_push_protection_custom_link";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION_CUSTOM_LINK)
  private String secretScanningPushProtectionCustomLink;

  public OrgsUpdateRequest() {
  }

  public OrgsUpdateRequest billingEmail(String billingEmail) {
    
    this.billingEmail = billingEmail;
    return this;
  }

   /**
   * Billing email address. This address is not publicized.
   * @return billingEmail
  **/
  @javax.annotation.Nullable

  public String getBillingEmail() {
    return billingEmail;
  }


  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public OrgsUpdateRequest company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * The company name.
   * @return company
  **/
  @javax.annotation.Nullable

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public OrgsUpdateRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The publicly visible email address.
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public OrgsUpdateRequest twitterUsername(String twitterUsername) {
    
    this.twitterUsername = twitterUsername;
    return this;
  }

   /**
   * The Twitter username of the company.
   * @return twitterUsername
  **/
  @javax.annotation.Nullable

  public String getTwitterUsername() {
    return twitterUsername;
  }


  public void setTwitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
  }


  public OrgsUpdateRequest location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * The location.
   * @return location
  **/
  @javax.annotation.Nullable

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public OrgsUpdateRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The shorthand name of the company.
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public OrgsUpdateRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the company.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public OrgsUpdateRequest hasOrganizationProjects(Boolean hasOrganizationProjects) {
    
    this.hasOrganizationProjects = hasOrganizationProjects;
    return this;
  }

   /**
   * Whether an organization can use organization projects.
   * @return hasOrganizationProjects
  **/
  @javax.annotation.Nullable

  public Boolean getHasOrganizationProjects() {
    return hasOrganizationProjects;
  }


  public void setHasOrganizationProjects(Boolean hasOrganizationProjects) {
    this.hasOrganizationProjects = hasOrganizationProjects;
  }


  public OrgsUpdateRequest hasRepositoryProjects(Boolean hasRepositoryProjects) {
    
    this.hasRepositoryProjects = hasRepositoryProjects;
    return this;
  }

   /**
   * Whether repositories that belong to the organization can use repository projects.
   * @return hasRepositoryProjects
  **/
  @javax.annotation.Nullable

  public Boolean getHasRepositoryProjects() {
    return hasRepositoryProjects;
  }


  public void setHasRepositoryProjects(Boolean hasRepositoryProjects) {
    this.hasRepositoryProjects = hasRepositoryProjects;
  }


  public OrgsUpdateRequest defaultRepositoryPermission(DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
    
    this.defaultRepositoryPermission = defaultRepositoryPermission;
    return this;
  }

   /**
   * Default permission level members have for organization repositories.
   * @return defaultRepositoryPermission
  **/
  @javax.annotation.Nullable

  public DefaultRepositoryPermissionEnum getDefaultRepositoryPermission() {
    return defaultRepositoryPermission;
  }


  public void setDefaultRepositoryPermission(DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
    this.defaultRepositoryPermission = defaultRepositoryPermission;
  }


  public OrgsUpdateRequest membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    
    this.membersCanCreateRepositories = membersCanCreateRepositories;
    return this;
  }

   /**
   * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See &#x60;members_allowed_repository_creation_type&#x60; in this table for details.
   * @return membersCanCreateRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreateRepositories() {
    return membersCanCreateRepositories;
  }


  public void setMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    this.membersCanCreateRepositories = membersCanCreateRepositories;
  }


  public OrgsUpdateRequest membersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
    return this;
  }

   /**
   * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreateInternalRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreateInternalRepositories() {
    return membersCanCreateInternalRepositories;
  }


  public void setMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
  }


  public OrgsUpdateRequest membersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
    return this;
  }

   /**
   * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreatePrivateRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreatePrivateRepositories() {
    return membersCanCreatePrivateRepositories;
  }


  public void setMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
  }


  public OrgsUpdateRequest membersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
    return this;
  }

   /**
   * Whether organization members can create public repositories, which are visible to anyone. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreatePublicRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreatePublicRepositories() {
    return membersCanCreatePublicRepositories;
  }


  public void setMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
  }


  public OrgsUpdateRequest membersAllowedRepositoryCreationType(MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
    
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
    return this;
  }

   /**
   * Specifies which types of repositories non-admin organization members can create. &#x60;private&#x60; is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in &#x60;members_can_create_repositories&#x60;. See the parameter deprecation notice in the operation description for details.
   * @return membersAllowedRepositoryCreationType
  **/
  @javax.annotation.Nullable

  public MembersAllowedRepositoryCreationTypeEnum getMembersAllowedRepositoryCreationType() {
    return membersAllowedRepositoryCreationType;
  }


  public void setMembersAllowedRepositoryCreationType(MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
  }


  public OrgsUpdateRequest membersCanCreatePages(Boolean membersCanCreatePages) {
    
    this.membersCanCreatePages = membersCanCreatePages;
    return this;
  }

   /**
   * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   * @return membersCanCreatePages
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreatePages() {
    return membersCanCreatePages;
  }


  public void setMembersCanCreatePages(Boolean membersCanCreatePages) {
    this.membersCanCreatePages = membersCanCreatePages;
  }


  public OrgsUpdateRequest membersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
    
    this.membersCanCreatePublicPages = membersCanCreatePublicPages;
    return this;
  }

   /**
   * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
   * @return membersCanCreatePublicPages
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreatePublicPages() {
    return membersCanCreatePublicPages;
  }


  public void setMembersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
    this.membersCanCreatePublicPages = membersCanCreatePublicPages;
  }


  public OrgsUpdateRequest membersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
    
    this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
    return this;
  }

   /**
   * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
   * @return membersCanCreatePrivatePages
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanCreatePrivatePages() {
    return membersCanCreatePrivatePages;
  }


  public void setMembersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
    this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
  }


  public OrgsUpdateRequest membersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
    
    this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
    return this;
  }

   /**
   * Whether organization members can fork private organization repositories.
   * @return membersCanForkPrivateRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getMembersCanForkPrivateRepositories() {
    return membersCanForkPrivateRepositories;
  }


  public void setMembersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
    this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
  }


  public OrgsUpdateRequest webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
    
    this.webCommitSignoffRequired = webCommitSignoffRequired;
    return this;
  }

   /**
   * Whether contributors to organization repositories are required to sign off on commits they make through GitHub&#39;s web interface.
   * @return webCommitSignoffRequired
  **/
  @javax.annotation.Nullable

  public Boolean getWebCommitSignoffRequired() {
    return webCommitSignoffRequired;
  }


  public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
    this.webCommitSignoffRequired = webCommitSignoffRequired;
  }


  public OrgsUpdateRequest blog(String blog) {
    
    this.blog = blog;
    return this;
  }

   /**
   * Get blog
   * @return blog
  **/
  @javax.annotation.Nullable

  public String getBlog() {
    return blog;
  }


  public void setBlog(String blog) {
    this.blog = blog;
  }


  public OrgsUpdateRequest advancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
    
    this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether GitHub Advanced Security is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return advancedSecurityEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getAdvancedSecurityEnabledForNewRepositories() {
    return advancedSecurityEnabledForNewRepositories;
  }


  public void setAdvancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
    this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
  }


  public OrgsUpdateRequest dependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
    
    this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether Dependabot alerts is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return dependabotAlertsEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getDependabotAlertsEnabledForNewRepositories() {
    return dependabotAlertsEnabledForNewRepositories;
  }


  public void setDependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
    this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
  }


  public OrgsUpdateRequest dependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
    
    this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether Dependabot security updates is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return dependabotSecurityUpdatesEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getDependabotSecurityUpdatesEnabledForNewRepositories() {
    return dependabotSecurityUpdatesEnabledForNewRepositories;
  }


  public void setDependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
    this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
  }


  public OrgsUpdateRequest dependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
    
    this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether dependency graph is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return dependencyGraphEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getDependencyGraphEnabledForNewRepositories() {
    return dependencyGraphEnabledForNewRepositories;
  }


  public void setDependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
    this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
  }


  public OrgsUpdateRequest secretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
    
    this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether secret scanning is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return secretScanningEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getSecretScanningEnabledForNewRepositories() {
    return secretScanningEnabledForNewRepositories;
  }


  public void setSecretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
    this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
  }


  public OrgsUpdateRequest secretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
    
    this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
    return this;
  }

   /**
   * Whether secret scanning push protection is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  You can check which security and analysis features are currently enabled by using a &#x60;GET /orgs/{org}&#x60; request.
   * @return secretScanningPushProtectionEnabledForNewRepositories
  **/
  @javax.annotation.Nullable

  public Boolean getSecretScanningPushProtectionEnabledForNewRepositories() {
    return secretScanningPushProtectionEnabledForNewRepositories;
  }


  public void setSecretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
    this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
  }


  public OrgsUpdateRequest secretScanningPushProtectionCustomLinkEnabled(Boolean secretScanningPushProtectionCustomLinkEnabled) {
    
    this.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled;
    return this;
  }

   /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   * @return secretScanningPushProtectionCustomLinkEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getSecretScanningPushProtectionCustomLinkEnabled() {
    return secretScanningPushProtectionCustomLinkEnabled;
  }


  public void setSecretScanningPushProtectionCustomLinkEnabled(Boolean secretScanningPushProtectionCustomLinkEnabled) {
    this.secretScanningPushProtectionCustomLinkEnabled = secretScanningPushProtectionCustomLinkEnabled;
  }


  public OrgsUpdateRequest secretScanningPushProtectionCustomLink(String secretScanningPushProtectionCustomLink) {
    
    this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
    return this;
  }

   /**
   * If &#x60;secret_scanning_push_protection_custom_link_enabled&#x60; is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
   * @return secretScanningPushProtectionCustomLink
  **/
  @javax.annotation.Nullable

  public String getSecretScanningPushProtectionCustomLink() {
    return secretScanningPushProtectionCustomLink;
  }


  public void setSecretScanningPushProtectionCustomLink(String secretScanningPushProtectionCustomLink) {
    this.secretScanningPushProtectionCustomLink = secretScanningPushProtectionCustomLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgsUpdateRequest orgsUpdateRequest = (OrgsUpdateRequest) o;
    return Objects.equals(this.billingEmail, orgsUpdateRequest.billingEmail) &&
        Objects.equals(this.company, orgsUpdateRequest.company) &&
        Objects.equals(this.email, orgsUpdateRequest.email) &&
        Objects.equals(this.twitterUsername, orgsUpdateRequest.twitterUsername) &&
        Objects.equals(this.location, orgsUpdateRequest.location) &&
        Objects.equals(this.name, orgsUpdateRequest.name) &&
        Objects.equals(this.description, orgsUpdateRequest.description) &&
        Objects.equals(this.hasOrganizationProjects, orgsUpdateRequest.hasOrganizationProjects) &&
        Objects.equals(this.hasRepositoryProjects, orgsUpdateRequest.hasRepositoryProjects) &&
        Objects.equals(this.defaultRepositoryPermission, orgsUpdateRequest.defaultRepositoryPermission) &&
        Objects.equals(this.membersCanCreateRepositories, orgsUpdateRequest.membersCanCreateRepositories) &&
        Objects.equals(this.membersCanCreateInternalRepositories, orgsUpdateRequest.membersCanCreateInternalRepositories) &&
        Objects.equals(this.membersCanCreatePrivateRepositories, orgsUpdateRequest.membersCanCreatePrivateRepositories) &&
        Objects.equals(this.membersCanCreatePublicRepositories, orgsUpdateRequest.membersCanCreatePublicRepositories) &&
        Objects.equals(this.membersAllowedRepositoryCreationType, orgsUpdateRequest.membersAllowedRepositoryCreationType) &&
        Objects.equals(this.membersCanCreatePages, orgsUpdateRequest.membersCanCreatePages) &&
        Objects.equals(this.membersCanCreatePublicPages, orgsUpdateRequest.membersCanCreatePublicPages) &&
        Objects.equals(this.membersCanCreatePrivatePages, orgsUpdateRequest.membersCanCreatePrivatePages) &&
        Objects.equals(this.membersCanForkPrivateRepositories, orgsUpdateRequest.membersCanForkPrivateRepositories) &&
        Objects.equals(this.webCommitSignoffRequired, orgsUpdateRequest.webCommitSignoffRequired) &&
        Objects.equals(this.blog, orgsUpdateRequest.blog) &&
        Objects.equals(this.advancedSecurityEnabledForNewRepositories, orgsUpdateRequest.advancedSecurityEnabledForNewRepositories) &&
        Objects.equals(this.dependabotAlertsEnabledForNewRepositories, orgsUpdateRequest.dependabotAlertsEnabledForNewRepositories) &&
        Objects.equals(this.dependabotSecurityUpdatesEnabledForNewRepositories, orgsUpdateRequest.dependabotSecurityUpdatesEnabledForNewRepositories) &&
        Objects.equals(this.dependencyGraphEnabledForNewRepositories, orgsUpdateRequest.dependencyGraphEnabledForNewRepositories) &&
        Objects.equals(this.secretScanningEnabledForNewRepositories, orgsUpdateRequest.secretScanningEnabledForNewRepositories) &&
        Objects.equals(this.secretScanningPushProtectionEnabledForNewRepositories, orgsUpdateRequest.secretScanningPushProtectionEnabledForNewRepositories) &&
        Objects.equals(this.secretScanningPushProtectionCustomLinkEnabled, orgsUpdateRequest.secretScanningPushProtectionCustomLinkEnabled) &&
        Objects.equals(this.secretScanningPushProtectionCustomLink, orgsUpdateRequest.secretScanningPushProtectionCustomLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingEmail, company, email, twitterUsername, location, name, description, hasOrganizationProjects, hasRepositoryProjects, defaultRepositoryPermission, membersCanCreateRepositories, membersCanCreateInternalRepositories, membersCanCreatePrivateRepositories, membersCanCreatePublicRepositories, membersAllowedRepositoryCreationType, membersCanCreatePages, membersCanCreatePublicPages, membersCanCreatePrivatePages, membersCanForkPrivateRepositories, webCommitSignoffRequired, blog, advancedSecurityEnabledForNewRepositories, dependabotAlertsEnabledForNewRepositories, dependabotSecurityUpdatesEnabledForNewRepositories, dependencyGraphEnabledForNewRepositories, secretScanningEnabledForNewRepositories, secretScanningPushProtectionEnabledForNewRepositories, secretScanningPushProtectionCustomLinkEnabled, secretScanningPushProtectionCustomLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgsUpdateRequest {\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasOrganizationProjects: ").append(toIndentedString(hasOrganizationProjects)).append("\n");
    sb.append("    hasRepositoryProjects: ").append(toIndentedString(hasRepositoryProjects)).append("\n");
    sb.append("    defaultRepositoryPermission: ").append(toIndentedString(defaultRepositoryPermission)).append("\n");
    sb.append("    membersCanCreateRepositories: ").append(toIndentedString(membersCanCreateRepositories)).append("\n");
    sb.append("    membersCanCreateInternalRepositories: ").append(toIndentedString(membersCanCreateInternalRepositories)).append("\n");
    sb.append("    membersCanCreatePrivateRepositories: ").append(toIndentedString(membersCanCreatePrivateRepositories)).append("\n");
    sb.append("    membersCanCreatePublicRepositories: ").append(toIndentedString(membersCanCreatePublicRepositories)).append("\n");
    sb.append("    membersAllowedRepositoryCreationType: ").append(toIndentedString(membersAllowedRepositoryCreationType)).append("\n");
    sb.append("    membersCanCreatePages: ").append(toIndentedString(membersCanCreatePages)).append("\n");
    sb.append("    membersCanCreatePublicPages: ").append(toIndentedString(membersCanCreatePublicPages)).append("\n");
    sb.append("    membersCanCreatePrivatePages: ").append(toIndentedString(membersCanCreatePrivatePages)).append("\n");
    sb.append("    membersCanForkPrivateRepositories: ").append(toIndentedString(membersCanForkPrivateRepositories)).append("\n");
    sb.append("    webCommitSignoffRequired: ").append(toIndentedString(webCommitSignoffRequired)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    advancedSecurityEnabledForNewRepositories: ").append(toIndentedString(advancedSecurityEnabledForNewRepositories)).append("\n");
    sb.append("    dependabotAlertsEnabledForNewRepositories: ").append(toIndentedString(dependabotAlertsEnabledForNewRepositories)).append("\n");
    sb.append("    dependabotSecurityUpdatesEnabledForNewRepositories: ").append(toIndentedString(dependabotSecurityUpdatesEnabledForNewRepositories)).append("\n");
    sb.append("    dependencyGraphEnabledForNewRepositories: ").append(toIndentedString(dependencyGraphEnabledForNewRepositories)).append("\n");
    sb.append("    secretScanningEnabledForNewRepositories: ").append(toIndentedString(secretScanningEnabledForNewRepositories)).append("\n");
    sb.append("    secretScanningPushProtectionEnabledForNewRepositories: ").append(toIndentedString(secretScanningPushProtectionEnabledForNewRepositories)).append("\n");
    sb.append("    secretScanningPushProtectionCustomLinkEnabled: ").append(toIndentedString(secretScanningPushProtectionCustomLinkEnabled)).append("\n");
    sb.append("    secretScanningPushProtectionCustomLink: ").append(toIndentedString(secretScanningPushProtectionCustomLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_email");
    openapiFields.add("company");
    openapiFields.add("email");
    openapiFields.add("twitter_username");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("has_organization_projects");
    openapiFields.add("has_repository_projects");
    openapiFields.add("default_repository_permission");
    openapiFields.add("members_can_create_repositories");
    openapiFields.add("members_can_create_internal_repositories");
    openapiFields.add("members_can_create_private_repositories");
    openapiFields.add("members_can_create_public_repositories");
    openapiFields.add("members_allowed_repository_creation_type");
    openapiFields.add("members_can_create_pages");
    openapiFields.add("members_can_create_public_pages");
    openapiFields.add("members_can_create_private_pages");
    openapiFields.add("members_can_fork_private_repositories");
    openapiFields.add("web_commit_signoff_required");
    openapiFields.add("blog");
    openapiFields.add("advanced_security_enabled_for_new_repositories");
    openapiFields.add("dependabot_alerts_enabled_for_new_repositories");
    openapiFields.add("dependabot_security_updates_enabled_for_new_repositories");
    openapiFields.add("dependency_graph_enabled_for_new_repositories");
    openapiFields.add("secret_scanning_enabled_for_new_repositories");
    openapiFields.add("secret_scanning_push_protection_enabled_for_new_repositories");
    openapiFields.add("secret_scanning_push_protection_custom_link_enabled");
    openapiFields.add("secret_scanning_push_protection_custom_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrgsUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrgsUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgsUpdateRequest is not found in the empty JSON string", OrgsUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrgsUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrgsUpdateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("default_repository_permission") != null && !jsonObj.get("default_repository_permission").isJsonNull()) && !jsonObj.get("default_repository_permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_repository_permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_repository_permission").toString()));
      }
      if ((jsonObj.get("members_allowed_repository_creation_type") != null && !jsonObj.get("members_allowed_repository_creation_type").isJsonNull()) && !jsonObj.get("members_allowed_repository_creation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members_allowed_repository_creation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members_allowed_repository_creation_type").toString()));
      }
      if ((jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) && !jsonObj.get("blog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      if ((jsonObj.get("secret_scanning_push_protection_custom_link") != null && !jsonObj.get("secret_scanning_push_protection_custom_link").isJsonNull()) && !jsonObj.get("secret_scanning_push_protection_custom_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_scanning_push_protection_custom_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_scanning_push_protection_custom_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgsUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgsUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgsUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgsUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgsUpdateRequest>() {
           @Override
           public void write(JsonWriter out, OrgsUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgsUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrgsUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrgsUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to OrgsUpdateRequest
  */
  public static OrgsUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgsUpdateRequest.class);
  }

 /**
  * Convert an instance of OrgsUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

