/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullRequestLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class PullRequestLinks {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Link comments;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private Link commits;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private Link html;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private Link issue;

  public static final String SERIALIZED_NAME_REVIEW_COMMENT = "review_comment";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENT)
  private Link reviewComment;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS = "review_comments";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS)
  private Link reviewComments;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private Link statuses;

  public PullRequestLinks() {
  }

  public PullRequestLinks comments(Link comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nonnull

  public Link getComments() {
    return comments;
  }


  public void setComments(Link comments) {
    this.comments = comments;
  }


  public PullRequestLinks commits(Link commits) {
    
    this.commits = commits;
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @javax.annotation.Nonnull

  public Link getCommits() {
    return commits;
  }


  public void setCommits(Link commits) {
    this.commits = commits;
  }


  public PullRequestLinks html(Link html) {
    
    this.html = html;
    return this;
  }

   /**
   * Get html
   * @return html
  **/
  @javax.annotation.Nonnull

  public Link getHtml() {
    return html;
  }


  public void setHtml(Link html) {
    this.html = html;
  }


  public PullRequestLinks issue(Link issue) {
    
    this.issue = issue;
    return this;
  }

   /**
   * Get issue
   * @return issue
  **/
  @javax.annotation.Nonnull

  public Link getIssue() {
    return issue;
  }


  public void setIssue(Link issue) {
    this.issue = issue;
  }


  public PullRequestLinks reviewComment(Link reviewComment) {
    
    this.reviewComment = reviewComment;
    return this;
  }

   /**
   * Get reviewComment
   * @return reviewComment
  **/
  @javax.annotation.Nonnull

  public Link getReviewComment() {
    return reviewComment;
  }


  public void setReviewComment(Link reviewComment) {
    this.reviewComment = reviewComment;
  }


  public PullRequestLinks reviewComments(Link reviewComments) {
    
    this.reviewComments = reviewComments;
    return this;
  }

   /**
   * Get reviewComments
   * @return reviewComments
  **/
  @javax.annotation.Nonnull

  public Link getReviewComments() {
    return reviewComments;
  }


  public void setReviewComments(Link reviewComments) {
    this.reviewComments = reviewComments;
  }


  public PullRequestLinks self(Link self) {
    
    this.self = self;
    return this;
  }

   /**
   * Get self
   * @return self
  **/
  @javax.annotation.Nonnull

  public Link getSelf() {
    return self;
  }


  public void setSelf(Link self) {
    this.self = self;
  }


  public PullRequestLinks statuses(Link statuses) {
    
    this.statuses = statuses;
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nonnull

  public Link getStatuses() {
    return statuses;
  }


  public void setStatuses(Link statuses) {
    this.statuses = statuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequestLinks pullRequestLinks = (PullRequestLinks) o;
    return Objects.equals(this.comments, pullRequestLinks.comments) &&
        Objects.equals(this.commits, pullRequestLinks.commits) &&
        Objects.equals(this.html, pullRequestLinks.html) &&
        Objects.equals(this.issue, pullRequestLinks.issue) &&
        Objects.equals(this.reviewComment, pullRequestLinks.reviewComment) &&
        Objects.equals(this.reviewComments, pullRequestLinks.reviewComments) &&
        Objects.equals(this.self, pullRequestLinks.self) &&
        Objects.equals(this.statuses, pullRequestLinks.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, commits, html, issue, reviewComment, reviewComments, self, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequestLinks {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    reviewComment: ").append(toIndentedString(reviewComment)).append("\n");
    sb.append("    reviewComments: ").append(toIndentedString(reviewComments)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("commits");
    openapiFields.add("html");
    openapiFields.add("issue");
    openapiFields.add("review_comment");
    openapiFields.add("review_comments");
    openapiFields.add("self");
    openapiFields.add("statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("commits");
    openapiRequiredFields.add("html");
    openapiRequiredFields.add("issue");
    openapiRequiredFields.add("review_comment");
    openapiRequiredFields.add("review_comments");
    openapiRequiredFields.add("self");
    openapiRequiredFields.add("statuses");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PullRequestLinks
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PullRequestLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullRequestLinks is not found in the empty JSON string", PullRequestLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PullRequestLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullRequestLinks` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullRequestLinks.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `comments`
      Link.validateJsonObject(jsonObj.getAsJsonObject("comments"));
      // validate the required field `commits`
      Link.validateJsonObject(jsonObj.getAsJsonObject("commits"));
      // validate the required field `html`
      Link.validateJsonObject(jsonObj.getAsJsonObject("html"));
      // validate the required field `issue`
      Link.validateJsonObject(jsonObj.getAsJsonObject("issue"));
      // validate the required field `review_comment`
      Link.validateJsonObject(jsonObj.getAsJsonObject("review_comment"));
      // validate the required field `review_comments`
      Link.validateJsonObject(jsonObj.getAsJsonObject("review_comments"));
      // validate the required field `self`
      Link.validateJsonObject(jsonObj.getAsJsonObject("self"));
      // validate the required field `statuses`
      Link.validateJsonObject(jsonObj.getAsJsonObject("statuses"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullRequestLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullRequestLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullRequestLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullRequestLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<PullRequestLinks>() {
           @Override
           public void write(JsonWriter out, PullRequestLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullRequestLinks read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PullRequestLinks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PullRequestLinks
  * @throws IOException if the JSON string is invalid with respect to PullRequestLinks
  */
  public static PullRequestLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullRequestLinks.class);
  }

 /**
  * Convert an instance of PullRequestLinks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

