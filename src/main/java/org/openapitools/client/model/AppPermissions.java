/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of permissions for the GitHub app
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class AppPermissions {
  /**
   * Gets or Sets actions
   */
  @JsonAdapter(ActionsEnum.Adapter.class)
  public enum ActionsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    ActionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionsEnum fromValue(String value) {
      for (ActionsEnum b : ActionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private ActionsEnum actions;

  /**
   * Gets or Sets administration
   */
  @JsonAdapter(AdministrationEnum.Adapter.class)
  public enum AdministrationEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    AdministrationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdministrationEnum fromValue(String value) {
      for (AdministrationEnum b : AdministrationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdministrationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdministrationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdministrationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdministrationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADMINISTRATION = "administration";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATION)
  private AdministrationEnum administration;

  /**
   * Gets or Sets checks
   */
  @JsonAdapter(ChecksEnum.Adapter.class)
  public enum ChecksEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    ChecksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChecksEnum fromValue(String value) {
      for (ChecksEnum b : ChecksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChecksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChecksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChecksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChecksEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private ChecksEnum checks;

  /**
   * Gets or Sets contentReferences
   */
  @JsonAdapter(ContentReferencesEnum.Adapter.class)
  public enum ContentReferencesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    ContentReferencesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentReferencesEnum fromValue(String value) {
      for (ContentReferencesEnum b : ContentReferencesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentReferencesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentReferencesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentReferencesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentReferencesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_REFERENCES = "content_references";
  @SerializedName(SERIALIZED_NAME_CONTENT_REFERENCES)
  private ContentReferencesEnum contentReferences;

  /**
   * Gets or Sets contents
   */
  @JsonAdapter(ContentsEnum.Adapter.class)
  public enum ContentsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    ContentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentsEnum fromValue(String value) {
      for (ContentsEnum b : ContentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private ContentsEnum contents;

  /**
   * Gets or Sets deployments
   */
  @JsonAdapter(DeploymentsEnum.Adapter.class)
  public enum DeploymentsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    DeploymentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentsEnum fromValue(String value) {
      for (DeploymentsEnum b : DeploymentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENTS = "deployments";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS)
  private DeploymentsEnum deployments;

  /**
   * Gets or Sets discussions
   */
  @JsonAdapter(DiscussionsEnum.Adapter.class)
  public enum DiscussionsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    DiscussionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscussionsEnum fromValue(String value) {
      for (DiscussionsEnum b : DiscussionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscussionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscussionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscussionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscussionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISCUSSIONS = "discussions";
  @SerializedName(SERIALIZED_NAME_DISCUSSIONS)
  private DiscussionsEnum discussions;

  /**
   * Gets or Sets emails
   */
  @JsonAdapter(EmailsEnum.Adapter.class)
  public enum EmailsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    EmailsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailsEnum fromValue(String value) {
      for (EmailsEnum b : EmailsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private EmailsEnum emails;

  /**
   * Gets or Sets environments
   */
  @JsonAdapter(EnvironmentsEnum.Adapter.class)
  public enum EnvironmentsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    EnvironmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentsEnum fromValue(String value) {
      for (EnvironmentsEnum b : EnvironmentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENTS = "environments";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENTS)
  private EnvironmentsEnum environments;

  /**
   * Gets or Sets issues
   */
  @JsonAdapter(IssuesEnum.Adapter.class)
  public enum IssuesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    IssuesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuesEnum fromValue(String value) {
      for (IssuesEnum b : IssuesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IssuesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssuesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private IssuesEnum issues;

  /**
   * Gets or Sets keys
   */
  @JsonAdapter(KeysEnum.Adapter.class)
  public enum KeysEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    KeysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeysEnum fromValue(String value) {
      for (KeysEnum b : KeysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeysEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private KeysEnum keys;

  /**
   * Gets or Sets members
   */
  @JsonAdapter(MembersEnum.Adapter.class)
  public enum MembersEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    MembersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembersEnum fromValue(String value) {
      for (MembersEnum b : MembersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MembersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private MembersEnum members;

  /**
   * Gets or Sets metadata
   */
  @JsonAdapter(MetadataEnum.Adapter.class)
  public enum MetadataEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    MetadataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetadataEnum fromValue(String value) {
      for (MetadataEnum b : MetadataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetadataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetadataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetadataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetadataEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private MetadataEnum metadata;

  /**
   * Gets or Sets organizationAdministration
   */
  @JsonAdapter(OrganizationAdministrationEnum.Adapter.class)
  public enum OrganizationAdministrationEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationAdministrationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationAdministrationEnum fromValue(String value) {
      for (OrganizationAdministrationEnum b : OrganizationAdministrationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationAdministrationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationAdministrationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationAdministrationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationAdministrationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_ADMINISTRATION = "organization_administration";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ADMINISTRATION)
  private OrganizationAdministrationEnum organizationAdministration;

  /**
   * Gets or Sets organizationHooks
   */
  @JsonAdapter(OrganizationHooksEnum.Adapter.class)
  public enum OrganizationHooksEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationHooksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationHooksEnum fromValue(String value) {
      for (OrganizationHooksEnum b : OrganizationHooksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationHooksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationHooksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationHooksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationHooksEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_HOOKS = "organization_hooks";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_HOOKS)
  private OrganizationHooksEnum organizationHooks;

  /**
   * Gets or Sets organizationPackages
   */
  @JsonAdapter(OrganizationPackagesEnum.Adapter.class)
  public enum OrganizationPackagesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationPackagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationPackagesEnum fromValue(String value) {
      for (OrganizationPackagesEnum b : OrganizationPackagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationPackagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationPackagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationPackagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationPackagesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_PACKAGES = "organization_packages";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_PACKAGES)
  private OrganizationPackagesEnum organizationPackages;

  /**
   * Gets or Sets organizationPlan
   */
  @JsonAdapter(OrganizationPlanEnum.Adapter.class)
  public enum OrganizationPlanEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationPlanEnum fromValue(String value) {
      for (OrganizationPlanEnum b : OrganizationPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationPlanEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_PLAN = "organization_plan";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_PLAN)
  private OrganizationPlanEnum organizationPlan;

  /**
   * Gets or Sets organizationProjects
   */
  @JsonAdapter(OrganizationProjectsEnum.Adapter.class)
  public enum OrganizationProjectsEnum {
    READ("read"),
    
    WRITE("write"),
    
    ADMIN("admin");

    private String value;

    OrganizationProjectsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationProjectsEnum fromValue(String value) {
      for (OrganizationProjectsEnum b : OrganizationProjectsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationProjectsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationProjectsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationProjectsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationProjectsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_PROJECTS = "organization_projects";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_PROJECTS)
  private OrganizationProjectsEnum organizationProjects;

  /**
   * Gets or Sets organizationSecrets
   */
  @JsonAdapter(OrganizationSecretsEnum.Adapter.class)
  public enum OrganizationSecretsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationSecretsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationSecretsEnum fromValue(String value) {
      for (OrganizationSecretsEnum b : OrganizationSecretsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationSecretsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationSecretsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationSecretsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationSecretsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_SECRETS = "organization_secrets";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_SECRETS)
  private OrganizationSecretsEnum organizationSecrets;

  /**
   * Gets or Sets organizationSelfHostedRunners
   */
  @JsonAdapter(OrganizationSelfHostedRunnersEnum.Adapter.class)
  public enum OrganizationSelfHostedRunnersEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationSelfHostedRunnersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationSelfHostedRunnersEnum fromValue(String value) {
      for (OrganizationSelfHostedRunnersEnum b : OrganizationSelfHostedRunnersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationSelfHostedRunnersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationSelfHostedRunnersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationSelfHostedRunnersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationSelfHostedRunnersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_SELF_HOSTED_RUNNERS = "organization_self_hosted_runners";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_SELF_HOSTED_RUNNERS)
  private OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners;

  /**
   * Gets or Sets organizationUserBlocking
   */
  @JsonAdapter(OrganizationUserBlockingEnum.Adapter.class)
  public enum OrganizationUserBlockingEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    OrganizationUserBlockingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationUserBlockingEnum fromValue(String value) {
      for (OrganizationUserBlockingEnum b : OrganizationUserBlockingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationUserBlockingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationUserBlockingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationUserBlockingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationUserBlockingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_USER_BLOCKING = "organization_user_blocking";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_USER_BLOCKING)
  private OrganizationUserBlockingEnum organizationUserBlocking;

  /**
   * Gets or Sets packages
   */
  @JsonAdapter(PackagesEnum.Adapter.class)
  public enum PackagesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    PackagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackagesEnum fromValue(String value) {
      for (PackagesEnum b : PackagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackagesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private PackagesEnum packages;

  /**
   * Gets or Sets pages
   */
  @JsonAdapter(PagesEnum.Adapter.class)
  public enum PagesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    PagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PagesEnum fromValue(String value) {
      for (PagesEnum b : PagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PagesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private PagesEnum pages;

  /**
   * Gets or Sets pullRequests
   */
  @JsonAdapter(PullRequestsEnum.Adapter.class)
  public enum PullRequestsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    PullRequestsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PullRequestsEnum fromValue(String value) {
      for (PullRequestsEnum b : PullRequestsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PullRequestsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PullRequestsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PullRequestsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PullRequestsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private PullRequestsEnum pullRequests;

  /**
   * Gets or Sets repositoryHooks
   */
  @JsonAdapter(RepositoryHooksEnum.Adapter.class)
  public enum RepositoryHooksEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    RepositoryHooksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositoryHooksEnum fromValue(String value) {
      for (RepositoryHooksEnum b : RepositoryHooksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositoryHooksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositoryHooksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositoryHooksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositoryHooksEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_HOOKS = "repository_hooks";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_HOOKS)
  private RepositoryHooksEnum repositoryHooks;

  /**
   * Gets or Sets repositoryProjects
   */
  @JsonAdapter(RepositoryProjectsEnum.Adapter.class)
  public enum RepositoryProjectsEnum {
    READ("read"),
    
    WRITE("write"),
    
    ADMIN("admin");

    private String value;

    RepositoryProjectsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositoryProjectsEnum fromValue(String value) {
      for (RepositoryProjectsEnum b : RepositoryProjectsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositoryProjectsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositoryProjectsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositoryProjectsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositoryProjectsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_PROJECTS = "repository_projects";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_PROJECTS)
  private RepositoryProjectsEnum repositoryProjects;

  /**
   * Gets or Sets secretScanningAlerts
   */
  @JsonAdapter(SecretScanningAlertsEnum.Adapter.class)
  public enum SecretScanningAlertsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    SecretScanningAlertsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretScanningAlertsEnum fromValue(String value) {
      for (SecretScanningAlertsEnum b : SecretScanningAlertsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretScanningAlertsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretScanningAlertsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretScanningAlertsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretScanningAlertsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECRET_SCANNING_ALERTS = "secret_scanning_alerts";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_ALERTS)
  private SecretScanningAlertsEnum secretScanningAlerts;

  /**
   * Gets or Sets secrets
   */
  @JsonAdapter(SecretsEnum.Adapter.class)
  public enum SecretsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    SecretsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretsEnum fromValue(String value) {
      for (SecretsEnum b : SecretsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private SecretsEnum secrets;

  /**
   * Gets or Sets securityEvents
   */
  @JsonAdapter(SecurityEventsEnum.Adapter.class)
  public enum SecurityEventsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    SecurityEventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityEventsEnum fromValue(String value) {
      for (SecurityEventsEnum b : SecurityEventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityEventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityEventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityEventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityEventsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_EVENTS = "security_events";
  @SerializedName(SERIALIZED_NAME_SECURITY_EVENTS)
  private SecurityEventsEnum securityEvents;

  /**
   * Gets or Sets securityScanningAlert
   */
  @JsonAdapter(SecurityScanningAlertEnum.Adapter.class)
  public enum SecurityScanningAlertEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    SecurityScanningAlertEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityScanningAlertEnum fromValue(String value) {
      for (SecurityScanningAlertEnum b : SecurityScanningAlertEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityScanningAlertEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityScanningAlertEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityScanningAlertEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityScanningAlertEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_SCANNING_ALERT = "security_scanning_alert";
  @SerializedName(SERIALIZED_NAME_SECURITY_SCANNING_ALERT)
  private SecurityScanningAlertEnum securityScanningAlert;

  /**
   * Gets or Sets singleFile
   */
  @JsonAdapter(SingleFileEnum.Adapter.class)
  public enum SingleFileEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    SingleFileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SingleFileEnum fromValue(String value) {
      for (SingleFileEnum b : SingleFileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SingleFileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SingleFileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SingleFileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SingleFileEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SINGLE_FILE = "single_file";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE)
  private SingleFileEnum singleFile;

  /**
   * Gets or Sets statuses
   */
  @JsonAdapter(StatusesEnum.Adapter.class)
  public enum StatusesEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    StatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusesEnum fromValue(String value) {
      for (StatusesEnum b : StatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private StatusesEnum statuses;

  /**
   * Gets or Sets teamDiscussions
   */
  @JsonAdapter(TeamDiscussionsEnum.Adapter.class)
  public enum TeamDiscussionsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    TeamDiscussionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TeamDiscussionsEnum fromValue(String value) {
      for (TeamDiscussionsEnum b : TeamDiscussionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TeamDiscussionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TeamDiscussionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TeamDiscussionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TeamDiscussionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEAM_DISCUSSIONS = "team_discussions";
  @SerializedName(SERIALIZED_NAME_TEAM_DISCUSSIONS)
  private TeamDiscussionsEnum teamDiscussions;

  /**
   * Gets or Sets vulnerabilityAlerts
   */
  @JsonAdapter(VulnerabilityAlertsEnum.Adapter.class)
  public enum VulnerabilityAlertsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    VulnerabilityAlertsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VulnerabilityAlertsEnum fromValue(String value) {
      for (VulnerabilityAlertsEnum b : VulnerabilityAlertsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VulnerabilityAlertsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VulnerabilityAlertsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VulnerabilityAlertsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VulnerabilityAlertsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VULNERABILITY_ALERTS = "vulnerability_alerts";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_ALERTS)
  private VulnerabilityAlertsEnum vulnerabilityAlerts;

  /**
   * Gets or Sets workflows
   */
  @JsonAdapter(WorkflowsEnum.Adapter.class)
  public enum WorkflowsEnum {
    READ("read"),
    
    WRITE("write");

    private String value;

    WorkflowsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowsEnum fromValue(String value) {
      for (WorkflowsEnum b : WorkflowsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkflowsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkflowsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORKFLOWS = "workflows";
  @SerializedName(SERIALIZED_NAME_WORKFLOWS)
  private WorkflowsEnum workflows;

  public AppPermissions() {
  }

  public AppPermissions actions(ActionsEnum actions) {
    
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable

  public ActionsEnum getActions() {
    return actions;
  }


  public void setActions(ActionsEnum actions) {
    this.actions = actions;
  }


  public AppPermissions administration(AdministrationEnum administration) {
    
    this.administration = administration;
    return this;
  }

   /**
   * Get administration
   * @return administration
  **/
  @javax.annotation.Nullable

  public AdministrationEnum getAdministration() {
    return administration;
  }


  public void setAdministration(AdministrationEnum administration) {
    this.administration = administration;
  }


  public AppPermissions checks(ChecksEnum checks) {
    
    this.checks = checks;
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable

  public ChecksEnum getChecks() {
    return checks;
  }


  public void setChecks(ChecksEnum checks) {
    this.checks = checks;
  }


  public AppPermissions contentReferences(ContentReferencesEnum contentReferences) {
    
    this.contentReferences = contentReferences;
    return this;
  }

   /**
   * Get contentReferences
   * @return contentReferences
  **/
  @javax.annotation.Nullable

  public ContentReferencesEnum getContentReferences() {
    return contentReferences;
  }


  public void setContentReferences(ContentReferencesEnum contentReferences) {
    this.contentReferences = contentReferences;
  }


  public AppPermissions contents(ContentsEnum contents) {
    
    this.contents = contents;
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable

  public ContentsEnum getContents() {
    return contents;
  }


  public void setContents(ContentsEnum contents) {
    this.contents = contents;
  }


  public AppPermissions deployments(DeploymentsEnum deployments) {
    
    this.deployments = deployments;
    return this;
  }

   /**
   * Get deployments
   * @return deployments
  **/
  @javax.annotation.Nullable

  public DeploymentsEnum getDeployments() {
    return deployments;
  }


  public void setDeployments(DeploymentsEnum deployments) {
    this.deployments = deployments;
  }


  public AppPermissions discussions(DiscussionsEnum discussions) {
    
    this.discussions = discussions;
    return this;
  }

   /**
   * Get discussions
   * @return discussions
  **/
  @javax.annotation.Nullable

  public DiscussionsEnum getDiscussions() {
    return discussions;
  }


  public void setDiscussions(DiscussionsEnum discussions) {
    this.discussions = discussions;
  }


  public AppPermissions emails(EmailsEnum emails) {
    
    this.emails = emails;
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nullable

  public EmailsEnum getEmails() {
    return emails;
  }


  public void setEmails(EmailsEnum emails) {
    this.emails = emails;
  }


  public AppPermissions environments(EnvironmentsEnum environments) {
    
    this.environments = environments;
    return this;
  }

   /**
   * Get environments
   * @return environments
  **/
  @javax.annotation.Nullable

  public EnvironmentsEnum getEnvironments() {
    return environments;
  }


  public void setEnvironments(EnvironmentsEnum environments) {
    this.environments = environments;
  }


  public AppPermissions issues(IssuesEnum issues) {
    
    this.issues = issues;
    return this;
  }

   /**
   * Get issues
   * @return issues
  **/
  @javax.annotation.Nullable

  public IssuesEnum getIssues() {
    return issues;
  }


  public void setIssues(IssuesEnum issues) {
    this.issues = issues;
  }


  public AppPermissions keys(KeysEnum keys) {
    
    this.keys = keys;
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @javax.annotation.Nullable

  public KeysEnum getKeys() {
    return keys;
  }


  public void setKeys(KeysEnum keys) {
    this.keys = keys;
  }


  public AppPermissions members(MembersEnum members) {
    
    this.members = members;
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @javax.annotation.Nullable

  public MembersEnum getMembers() {
    return members;
  }


  public void setMembers(MembersEnum members) {
    this.members = members;
  }


  public AppPermissions metadata(MetadataEnum metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable

  public MetadataEnum getMetadata() {
    return metadata;
  }


  public void setMetadata(MetadataEnum metadata) {
    this.metadata = metadata;
  }


  public AppPermissions organizationAdministration(OrganizationAdministrationEnum organizationAdministration) {
    
    this.organizationAdministration = organizationAdministration;
    return this;
  }

   /**
   * Get organizationAdministration
   * @return organizationAdministration
  **/
  @javax.annotation.Nullable

  public OrganizationAdministrationEnum getOrganizationAdministration() {
    return organizationAdministration;
  }


  public void setOrganizationAdministration(OrganizationAdministrationEnum organizationAdministration) {
    this.organizationAdministration = organizationAdministration;
  }


  public AppPermissions organizationHooks(OrganizationHooksEnum organizationHooks) {
    
    this.organizationHooks = organizationHooks;
    return this;
  }

   /**
   * Get organizationHooks
   * @return organizationHooks
  **/
  @javax.annotation.Nullable

  public OrganizationHooksEnum getOrganizationHooks() {
    return organizationHooks;
  }


  public void setOrganizationHooks(OrganizationHooksEnum organizationHooks) {
    this.organizationHooks = organizationHooks;
  }


  public AppPermissions organizationPackages(OrganizationPackagesEnum organizationPackages) {
    
    this.organizationPackages = organizationPackages;
    return this;
  }

   /**
   * Get organizationPackages
   * @return organizationPackages
  **/
  @javax.annotation.Nullable

  public OrganizationPackagesEnum getOrganizationPackages() {
    return organizationPackages;
  }


  public void setOrganizationPackages(OrganizationPackagesEnum organizationPackages) {
    this.organizationPackages = organizationPackages;
  }


  public AppPermissions organizationPlan(OrganizationPlanEnum organizationPlan) {
    
    this.organizationPlan = organizationPlan;
    return this;
  }

   /**
   * Get organizationPlan
   * @return organizationPlan
  **/
  @javax.annotation.Nullable

  public OrganizationPlanEnum getOrganizationPlan() {
    return organizationPlan;
  }


  public void setOrganizationPlan(OrganizationPlanEnum organizationPlan) {
    this.organizationPlan = organizationPlan;
  }


  public AppPermissions organizationProjects(OrganizationProjectsEnum organizationProjects) {
    
    this.organizationProjects = organizationProjects;
    return this;
  }

   /**
   * Get organizationProjects
   * @return organizationProjects
  **/
  @javax.annotation.Nullable

  public OrganizationProjectsEnum getOrganizationProjects() {
    return organizationProjects;
  }


  public void setOrganizationProjects(OrganizationProjectsEnum organizationProjects) {
    this.organizationProjects = organizationProjects;
  }


  public AppPermissions organizationSecrets(OrganizationSecretsEnum organizationSecrets) {
    
    this.organizationSecrets = organizationSecrets;
    return this;
  }

   /**
   * Get organizationSecrets
   * @return organizationSecrets
  **/
  @javax.annotation.Nullable

  public OrganizationSecretsEnum getOrganizationSecrets() {
    return organizationSecrets;
  }


  public void setOrganizationSecrets(OrganizationSecretsEnum organizationSecrets) {
    this.organizationSecrets = organizationSecrets;
  }


  public AppPermissions organizationSelfHostedRunners(OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners) {
    
    this.organizationSelfHostedRunners = organizationSelfHostedRunners;
    return this;
  }

   /**
   * Get organizationSelfHostedRunners
   * @return organizationSelfHostedRunners
  **/
  @javax.annotation.Nullable

  public OrganizationSelfHostedRunnersEnum getOrganizationSelfHostedRunners() {
    return organizationSelfHostedRunners;
  }


  public void setOrganizationSelfHostedRunners(OrganizationSelfHostedRunnersEnum organizationSelfHostedRunners) {
    this.organizationSelfHostedRunners = organizationSelfHostedRunners;
  }


  public AppPermissions organizationUserBlocking(OrganizationUserBlockingEnum organizationUserBlocking) {
    
    this.organizationUserBlocking = organizationUserBlocking;
    return this;
  }

   /**
   * Get organizationUserBlocking
   * @return organizationUserBlocking
  **/
  @javax.annotation.Nullable

  public OrganizationUserBlockingEnum getOrganizationUserBlocking() {
    return organizationUserBlocking;
  }


  public void setOrganizationUserBlocking(OrganizationUserBlockingEnum organizationUserBlocking) {
    this.organizationUserBlocking = organizationUserBlocking;
  }


  public AppPermissions packages(PackagesEnum packages) {
    
    this.packages = packages;
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @javax.annotation.Nullable

  public PackagesEnum getPackages() {
    return packages;
  }


  public void setPackages(PackagesEnum packages) {
    this.packages = packages;
  }


  public AppPermissions pages(PagesEnum pages) {
    
    this.pages = pages;
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable

  public PagesEnum getPages() {
    return pages;
  }


  public void setPages(PagesEnum pages) {
    this.pages = pages;
  }


  public AppPermissions pullRequests(PullRequestsEnum pullRequests) {
    
    this.pullRequests = pullRequests;
    return this;
  }

   /**
   * Get pullRequests
   * @return pullRequests
  **/
  @javax.annotation.Nullable

  public PullRequestsEnum getPullRequests() {
    return pullRequests;
  }


  public void setPullRequests(PullRequestsEnum pullRequests) {
    this.pullRequests = pullRequests;
  }


  public AppPermissions repositoryHooks(RepositoryHooksEnum repositoryHooks) {
    
    this.repositoryHooks = repositoryHooks;
    return this;
  }

   /**
   * Get repositoryHooks
   * @return repositoryHooks
  **/
  @javax.annotation.Nullable

  public RepositoryHooksEnum getRepositoryHooks() {
    return repositoryHooks;
  }


  public void setRepositoryHooks(RepositoryHooksEnum repositoryHooks) {
    this.repositoryHooks = repositoryHooks;
  }


  public AppPermissions repositoryProjects(RepositoryProjectsEnum repositoryProjects) {
    
    this.repositoryProjects = repositoryProjects;
    return this;
  }

   /**
   * Get repositoryProjects
   * @return repositoryProjects
  **/
  @javax.annotation.Nullable

  public RepositoryProjectsEnum getRepositoryProjects() {
    return repositoryProjects;
  }


  public void setRepositoryProjects(RepositoryProjectsEnum repositoryProjects) {
    this.repositoryProjects = repositoryProjects;
  }


  public AppPermissions secretScanningAlerts(SecretScanningAlertsEnum secretScanningAlerts) {
    
    this.secretScanningAlerts = secretScanningAlerts;
    return this;
  }

   /**
   * Get secretScanningAlerts
   * @return secretScanningAlerts
  **/
  @javax.annotation.Nullable

  public SecretScanningAlertsEnum getSecretScanningAlerts() {
    return secretScanningAlerts;
  }


  public void setSecretScanningAlerts(SecretScanningAlertsEnum secretScanningAlerts) {
    this.secretScanningAlerts = secretScanningAlerts;
  }


  public AppPermissions secrets(SecretsEnum secrets) {
    
    this.secrets = secrets;
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nullable

  public SecretsEnum getSecrets() {
    return secrets;
  }


  public void setSecrets(SecretsEnum secrets) {
    this.secrets = secrets;
  }


  public AppPermissions securityEvents(SecurityEventsEnum securityEvents) {
    
    this.securityEvents = securityEvents;
    return this;
  }

   /**
   * Get securityEvents
   * @return securityEvents
  **/
  @javax.annotation.Nullable

  public SecurityEventsEnum getSecurityEvents() {
    return securityEvents;
  }


  public void setSecurityEvents(SecurityEventsEnum securityEvents) {
    this.securityEvents = securityEvents;
  }


  public AppPermissions securityScanningAlert(SecurityScanningAlertEnum securityScanningAlert) {
    
    this.securityScanningAlert = securityScanningAlert;
    return this;
  }

   /**
   * Get securityScanningAlert
   * @return securityScanningAlert
  **/
  @javax.annotation.Nullable

  public SecurityScanningAlertEnum getSecurityScanningAlert() {
    return securityScanningAlert;
  }


  public void setSecurityScanningAlert(SecurityScanningAlertEnum securityScanningAlert) {
    this.securityScanningAlert = securityScanningAlert;
  }


  public AppPermissions singleFile(SingleFileEnum singleFile) {
    
    this.singleFile = singleFile;
    return this;
  }

   /**
   * Get singleFile
   * @return singleFile
  **/
  @javax.annotation.Nullable

  public SingleFileEnum getSingleFile() {
    return singleFile;
  }


  public void setSingleFile(SingleFileEnum singleFile) {
    this.singleFile = singleFile;
  }


  public AppPermissions statuses(StatusesEnum statuses) {
    
    this.statuses = statuses;
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable

  public StatusesEnum getStatuses() {
    return statuses;
  }


  public void setStatuses(StatusesEnum statuses) {
    this.statuses = statuses;
  }


  public AppPermissions teamDiscussions(TeamDiscussionsEnum teamDiscussions) {
    
    this.teamDiscussions = teamDiscussions;
    return this;
  }

   /**
   * Get teamDiscussions
   * @return teamDiscussions
  **/
  @javax.annotation.Nullable

  public TeamDiscussionsEnum getTeamDiscussions() {
    return teamDiscussions;
  }


  public void setTeamDiscussions(TeamDiscussionsEnum teamDiscussions) {
    this.teamDiscussions = teamDiscussions;
  }


  public AppPermissions vulnerabilityAlerts(VulnerabilityAlertsEnum vulnerabilityAlerts) {
    
    this.vulnerabilityAlerts = vulnerabilityAlerts;
    return this;
  }

   /**
   * Get vulnerabilityAlerts
   * @return vulnerabilityAlerts
  **/
  @javax.annotation.Nullable

  public VulnerabilityAlertsEnum getVulnerabilityAlerts() {
    return vulnerabilityAlerts;
  }


  public void setVulnerabilityAlerts(VulnerabilityAlertsEnum vulnerabilityAlerts) {
    this.vulnerabilityAlerts = vulnerabilityAlerts;
  }


  public AppPermissions workflows(WorkflowsEnum workflows) {
    
    this.workflows = workflows;
    return this;
  }

   /**
   * Get workflows
   * @return workflows
  **/
  @javax.annotation.Nullable

  public WorkflowsEnum getWorkflows() {
    return workflows;
  }


  public void setWorkflows(WorkflowsEnum workflows) {
    this.workflows = workflows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPermissions appPermissions = (AppPermissions) o;
    return Objects.equals(this.actions, appPermissions.actions) &&
        Objects.equals(this.administration, appPermissions.administration) &&
        Objects.equals(this.checks, appPermissions.checks) &&
        Objects.equals(this.contentReferences, appPermissions.contentReferences) &&
        Objects.equals(this.contents, appPermissions.contents) &&
        Objects.equals(this.deployments, appPermissions.deployments) &&
        Objects.equals(this.discussions, appPermissions.discussions) &&
        Objects.equals(this.emails, appPermissions.emails) &&
        Objects.equals(this.environments, appPermissions.environments) &&
        Objects.equals(this.issues, appPermissions.issues) &&
        Objects.equals(this.keys, appPermissions.keys) &&
        Objects.equals(this.members, appPermissions.members) &&
        Objects.equals(this.metadata, appPermissions.metadata) &&
        Objects.equals(this.organizationAdministration, appPermissions.organizationAdministration) &&
        Objects.equals(this.organizationHooks, appPermissions.organizationHooks) &&
        Objects.equals(this.organizationPackages, appPermissions.organizationPackages) &&
        Objects.equals(this.organizationPlan, appPermissions.organizationPlan) &&
        Objects.equals(this.organizationProjects, appPermissions.organizationProjects) &&
        Objects.equals(this.organizationSecrets, appPermissions.organizationSecrets) &&
        Objects.equals(this.organizationSelfHostedRunners, appPermissions.organizationSelfHostedRunners) &&
        Objects.equals(this.organizationUserBlocking, appPermissions.organizationUserBlocking) &&
        Objects.equals(this.packages, appPermissions.packages) &&
        Objects.equals(this.pages, appPermissions.pages) &&
        Objects.equals(this.pullRequests, appPermissions.pullRequests) &&
        Objects.equals(this.repositoryHooks, appPermissions.repositoryHooks) &&
        Objects.equals(this.repositoryProjects, appPermissions.repositoryProjects) &&
        Objects.equals(this.secretScanningAlerts, appPermissions.secretScanningAlerts) &&
        Objects.equals(this.secrets, appPermissions.secrets) &&
        Objects.equals(this.securityEvents, appPermissions.securityEvents) &&
        Objects.equals(this.securityScanningAlert, appPermissions.securityScanningAlert) &&
        Objects.equals(this.singleFile, appPermissions.singleFile) &&
        Objects.equals(this.statuses, appPermissions.statuses) &&
        Objects.equals(this.teamDiscussions, appPermissions.teamDiscussions) &&
        Objects.equals(this.vulnerabilityAlerts, appPermissions.vulnerabilityAlerts) &&
        Objects.equals(this.workflows, appPermissions.workflows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, administration, checks, contentReferences, contents, deployments, discussions, emails, environments, issues, keys, members, metadata, organizationAdministration, organizationHooks, organizationPackages, organizationPlan, organizationProjects, organizationSecrets, organizationSelfHostedRunners, organizationUserBlocking, packages, pages, pullRequests, repositoryHooks, repositoryProjects, secretScanningAlerts, secrets, securityEvents, securityScanningAlert, singleFile, statuses, teamDiscussions, vulnerabilityAlerts, workflows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPermissions {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    administration: ").append(toIndentedString(administration)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    contentReferences: ").append(toIndentedString(contentReferences)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    discussions: ").append(toIndentedString(discussions)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    organizationAdministration: ").append(toIndentedString(organizationAdministration)).append("\n");
    sb.append("    organizationHooks: ").append(toIndentedString(organizationHooks)).append("\n");
    sb.append("    organizationPackages: ").append(toIndentedString(organizationPackages)).append("\n");
    sb.append("    organizationPlan: ").append(toIndentedString(organizationPlan)).append("\n");
    sb.append("    organizationProjects: ").append(toIndentedString(organizationProjects)).append("\n");
    sb.append("    organizationSecrets: ").append(toIndentedString(organizationSecrets)).append("\n");
    sb.append("    organizationSelfHostedRunners: ").append(toIndentedString(organizationSelfHostedRunners)).append("\n");
    sb.append("    organizationUserBlocking: ").append(toIndentedString(organizationUserBlocking)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    repositoryHooks: ").append(toIndentedString(repositoryHooks)).append("\n");
    sb.append("    repositoryProjects: ").append(toIndentedString(repositoryProjects)).append("\n");
    sb.append("    secretScanningAlerts: ").append(toIndentedString(secretScanningAlerts)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    securityEvents: ").append(toIndentedString(securityEvents)).append("\n");
    sb.append("    securityScanningAlert: ").append(toIndentedString(securityScanningAlert)).append("\n");
    sb.append("    singleFile: ").append(toIndentedString(singleFile)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    teamDiscussions: ").append(toIndentedString(teamDiscussions)).append("\n");
    sb.append("    vulnerabilityAlerts: ").append(toIndentedString(vulnerabilityAlerts)).append("\n");
    sb.append("    workflows: ").append(toIndentedString(workflows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("administration");
    openapiFields.add("checks");
    openapiFields.add("content_references");
    openapiFields.add("contents");
    openapiFields.add("deployments");
    openapiFields.add("discussions");
    openapiFields.add("emails");
    openapiFields.add("environments");
    openapiFields.add("issues");
    openapiFields.add("keys");
    openapiFields.add("members");
    openapiFields.add("metadata");
    openapiFields.add("organization_administration");
    openapiFields.add("organization_hooks");
    openapiFields.add("organization_packages");
    openapiFields.add("organization_plan");
    openapiFields.add("organization_projects");
    openapiFields.add("organization_secrets");
    openapiFields.add("organization_self_hosted_runners");
    openapiFields.add("organization_user_blocking");
    openapiFields.add("packages");
    openapiFields.add("pages");
    openapiFields.add("pull_requests");
    openapiFields.add("repository_hooks");
    openapiFields.add("repository_projects");
    openapiFields.add("secret_scanning_alerts");
    openapiFields.add("secrets");
    openapiFields.add("security_events");
    openapiFields.add("security_scanning_alert");
    openapiFields.add("single_file");
    openapiFields.add("statuses");
    openapiFields.add("team_discussions");
    openapiFields.add("vulnerability_alerts");
    openapiFields.add("workflows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppPermissions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPermissions is not found in the empty JSON string", AppPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPermissions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) && !jsonObj.get("actions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      if ((jsonObj.get("administration") != null && !jsonObj.get("administration").isJsonNull()) && !jsonObj.get("administration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administration").toString()));
      }
      if ((jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) && !jsonObj.get("checks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      if ((jsonObj.get("content_references") != null && !jsonObj.get("content_references").isJsonNull()) && !jsonObj.get("content_references").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_references` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_references").toString()));
      }
      if ((jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) && !jsonObj.get("contents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents").toString()));
      }
      if ((jsonObj.get("deployments") != null && !jsonObj.get("deployments").isJsonNull()) && !jsonObj.get("deployments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments").toString()));
      }
      if ((jsonObj.get("discussions") != null && !jsonObj.get("discussions").isJsonNull()) && !jsonObj.get("discussions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discussions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discussions").toString()));
      }
      if ((jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull()) && !jsonObj.get("emails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("environments") != null && !jsonObj.get("environments").isJsonNull()) && !jsonObj.get("environments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environments").toString()));
      }
      if ((jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) && !jsonObj.get("issues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      if ((jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull()) && !jsonObj.get("keys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      if ((jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) && !jsonObj.get("members").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("organization_administration") != null && !jsonObj.get("organization_administration").isJsonNull()) && !jsonObj.get("organization_administration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_administration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_administration").toString()));
      }
      if ((jsonObj.get("organization_hooks") != null && !jsonObj.get("organization_hooks").isJsonNull()) && !jsonObj.get("organization_hooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_hooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_hooks").toString()));
      }
      if ((jsonObj.get("organization_packages") != null && !jsonObj.get("organization_packages").isJsonNull()) && !jsonObj.get("organization_packages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_packages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_packages").toString()));
      }
      if ((jsonObj.get("organization_plan") != null && !jsonObj.get("organization_plan").isJsonNull()) && !jsonObj.get("organization_plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_plan").toString()));
      }
      if ((jsonObj.get("organization_projects") != null && !jsonObj.get("organization_projects").isJsonNull()) && !jsonObj.get("organization_projects").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_projects` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_projects").toString()));
      }
      if ((jsonObj.get("organization_secrets") != null && !jsonObj.get("organization_secrets").isJsonNull()) && !jsonObj.get("organization_secrets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_secrets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_secrets").toString()));
      }
      if ((jsonObj.get("organization_self_hosted_runners") != null && !jsonObj.get("organization_self_hosted_runners").isJsonNull()) && !jsonObj.get("organization_self_hosted_runners").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_self_hosted_runners` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_self_hosted_runners").toString()));
      }
      if ((jsonObj.get("organization_user_blocking") != null && !jsonObj.get("organization_user_blocking").isJsonNull()) && !jsonObj.get("organization_user_blocking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_user_blocking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_user_blocking").toString()));
      }
      if ((jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) && !jsonObj.get("packages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      if ((jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) && !jsonObj.get("pages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
      if ((jsonObj.get("pull_requests") != null && !jsonObj.get("pull_requests").isJsonNull()) && !jsonObj.get("pull_requests").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_requests` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull_requests").toString()));
      }
      if ((jsonObj.get("repository_hooks") != null && !jsonObj.get("repository_hooks").isJsonNull()) && !jsonObj.get("repository_hooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_hooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_hooks").toString()));
      }
      if ((jsonObj.get("repository_projects") != null && !jsonObj.get("repository_projects").isJsonNull()) && !jsonObj.get("repository_projects").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_projects` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_projects").toString()));
      }
      if ((jsonObj.get("secret_scanning_alerts") != null && !jsonObj.get("secret_scanning_alerts").isJsonNull()) && !jsonObj.get("secret_scanning_alerts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_scanning_alerts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_scanning_alerts").toString()));
      }
      if ((jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) && !jsonObj.get("secrets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secrets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
      }
      if ((jsonObj.get("security_events") != null && !jsonObj.get("security_events").isJsonNull()) && !jsonObj.get("security_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_events").toString()));
      }
      if ((jsonObj.get("security_scanning_alert") != null && !jsonObj.get("security_scanning_alert").isJsonNull()) && !jsonObj.get("security_scanning_alert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_scanning_alert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_scanning_alert").toString()));
      }
      if ((jsonObj.get("single_file") != null && !jsonObj.get("single_file").isJsonNull()) && !jsonObj.get("single_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("single_file").toString()));
      }
      if ((jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) && !jsonObj.get("statuses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      if ((jsonObj.get("team_discussions") != null && !jsonObj.get("team_discussions").isJsonNull()) && !jsonObj.get("team_discussions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_discussions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_discussions").toString()));
      }
      if ((jsonObj.get("vulnerability_alerts") != null && !jsonObj.get("vulnerability_alerts").isJsonNull()) && !jsonObj.get("vulnerability_alerts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerability_alerts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulnerability_alerts").toString()));
      }
      if ((jsonObj.get("workflows") != null && !jsonObj.get("workflows").isJsonNull()) && !jsonObj.get("workflows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPermissions>() {
           @Override
           public void write(JsonWriter out, AppPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPermissions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppPermissions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppPermissions
  * @throws IOException if the JSON string is invalid with respect to AppPermissions
  */
  public static AppPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPermissions.class);
  }

 /**
  * Convert an instance of AppPermissions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

