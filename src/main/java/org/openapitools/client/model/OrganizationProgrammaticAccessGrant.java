/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.OrganizationProgrammaticAccessGrantRequestPermissions;
import org.openapitools.client.model.SimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Minimal representation of an organization programmatic access grant for enumerations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class OrganizationProgrammaticAccessGrant {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private SimpleUser owner;

  /**
   * Type of repository selection requested.
   */
  @JsonAdapter(RepositorySelectionEnum.Adapter.class)
  public enum RepositorySelectionEnum {
    NONE("none"),
    
    ALL("all"),
    
    SUBSET("subset");

    private String value;

    RepositorySelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositorySelectionEnum fromValue(String value) {
      for (RepositorySelectionEnum b : RepositorySelectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositorySelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositorySelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositorySelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositorySelectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_SELECTION = "repository_selection";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SELECTION)
  private RepositorySelectionEnum repositorySelection;

  public static final String SERIALIZED_NAME_REPOSITORIES_URL = "repositories_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES_URL)
  private String repositoriesUrl;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private OrganizationProgrammaticAccessGrantRequestPermissions permissions;

  public static final String SERIALIZED_NAME_ACCESS_GRANTED_AT = "access_granted_at";
  @SerializedName(SERIALIZED_NAME_ACCESS_GRANTED_AT)
  private String accessGrantedAt;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRED = "token_expired";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRED)
  private Boolean tokenExpired;

  public static final String SERIALIZED_NAME_TOKEN_EXPIRES_AT = "token_expires_at";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXPIRES_AT)
  private String tokenExpiresAt;

  public static final String SERIALIZED_NAME_TOKEN_LAST_USED_AT = "token_last_used_at";
  @SerializedName(SERIALIZED_NAME_TOKEN_LAST_USED_AT)
  private String tokenLastUsedAt;

  public OrganizationProgrammaticAccessGrant() {
  }

  public OrganizationProgrammaticAccessGrant id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the fine-grained personal access token. The &#x60;pat_id&#x60; used to get details about an approved fine-grained personal access token.
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public OrganizationProgrammaticAccessGrant owner(SimpleUser owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nonnull

  public SimpleUser getOwner() {
    return owner;
  }


  public void setOwner(SimpleUser owner) {
    this.owner = owner;
  }


  public OrganizationProgrammaticAccessGrant repositorySelection(RepositorySelectionEnum repositorySelection) {
    
    this.repositorySelection = repositorySelection;
    return this;
  }

   /**
   * Type of repository selection requested.
   * @return repositorySelection
  **/
  @javax.annotation.Nonnull

  public RepositorySelectionEnum getRepositorySelection() {
    return repositorySelection;
  }


  public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
    this.repositorySelection = repositorySelection;
  }


  public OrganizationProgrammaticAccessGrant repositoriesUrl(String repositoriesUrl) {
    
    this.repositoriesUrl = repositoriesUrl;
    return this;
  }

   /**
   * URL to the list of repositories the fine-grained personal access token can access. Only follow when &#x60;repository_selection&#x60; is &#x60;subset&#x60;.
   * @return repositoriesUrl
  **/
  @javax.annotation.Nonnull

  public String getRepositoriesUrl() {
    return repositoriesUrl;
  }


  public void setRepositoriesUrl(String repositoriesUrl) {
    this.repositoriesUrl = repositoriesUrl;
  }


  public OrganizationProgrammaticAccessGrant permissions(OrganizationProgrammaticAccessGrantRequestPermissions permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull

  public OrganizationProgrammaticAccessGrantRequestPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(OrganizationProgrammaticAccessGrantRequestPermissions permissions) {
    this.permissions = permissions;
  }


  public OrganizationProgrammaticAccessGrant accessGrantedAt(String accessGrantedAt) {
    
    this.accessGrantedAt = accessGrantedAt;
    return this;
  }

   /**
   * Date and time when the fine-grained personal access token was approved to access the organization.
   * @return accessGrantedAt
  **/
  @javax.annotation.Nonnull

  public String getAccessGrantedAt() {
    return accessGrantedAt;
  }


  public void setAccessGrantedAt(String accessGrantedAt) {
    this.accessGrantedAt = accessGrantedAt;
  }


  public OrganizationProgrammaticAccessGrant tokenExpired(Boolean tokenExpired) {
    
    this.tokenExpired = tokenExpired;
    return this;
  }

   /**
   * Whether the associated fine-grained personal access token has expired.
   * @return tokenExpired
  **/
  @javax.annotation.Nonnull

  public Boolean getTokenExpired() {
    return tokenExpired;
  }


  public void setTokenExpired(Boolean tokenExpired) {
    this.tokenExpired = tokenExpired;
  }


  public OrganizationProgrammaticAccessGrant tokenExpiresAt(String tokenExpiresAt) {
    
    this.tokenExpiresAt = tokenExpiresAt;
    return this;
  }

   /**
   * Date and time when the associated fine-grained personal access token expires.
   * @return tokenExpiresAt
  **/
  @javax.annotation.Nullable

  public String getTokenExpiresAt() {
    return tokenExpiresAt;
  }


  public void setTokenExpiresAt(String tokenExpiresAt) {
    this.tokenExpiresAt = tokenExpiresAt;
  }


  public OrganizationProgrammaticAccessGrant tokenLastUsedAt(String tokenLastUsedAt) {
    
    this.tokenLastUsedAt = tokenLastUsedAt;
    return this;
  }

   /**
   * Date and time when the associated fine-grained personal access token was last used for authentication.
   * @return tokenLastUsedAt
  **/
  @javax.annotation.Nullable

  public String getTokenLastUsedAt() {
    return tokenLastUsedAt;
  }


  public void setTokenLastUsedAt(String tokenLastUsedAt) {
    this.tokenLastUsedAt = tokenLastUsedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationProgrammaticAccessGrant organizationProgrammaticAccessGrant = (OrganizationProgrammaticAccessGrant) o;
    return Objects.equals(this.id, organizationProgrammaticAccessGrant.id) &&
        Objects.equals(this.owner, organizationProgrammaticAccessGrant.owner) &&
        Objects.equals(this.repositorySelection, organizationProgrammaticAccessGrant.repositorySelection) &&
        Objects.equals(this.repositoriesUrl, organizationProgrammaticAccessGrant.repositoriesUrl) &&
        Objects.equals(this.permissions, organizationProgrammaticAccessGrant.permissions) &&
        Objects.equals(this.accessGrantedAt, organizationProgrammaticAccessGrant.accessGrantedAt) &&
        Objects.equals(this.tokenExpired, organizationProgrammaticAccessGrant.tokenExpired) &&
        Objects.equals(this.tokenExpiresAt, organizationProgrammaticAccessGrant.tokenExpiresAt) &&
        Objects.equals(this.tokenLastUsedAt, organizationProgrammaticAccessGrant.tokenLastUsedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, owner, repositorySelection, repositoriesUrl, permissions, accessGrantedAt, tokenExpired, tokenExpiresAt, tokenLastUsedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationProgrammaticAccessGrant {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    repositorySelection: ").append(toIndentedString(repositorySelection)).append("\n");
    sb.append("    repositoriesUrl: ").append(toIndentedString(repositoriesUrl)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    accessGrantedAt: ").append(toIndentedString(accessGrantedAt)).append("\n");
    sb.append("    tokenExpired: ").append(toIndentedString(tokenExpired)).append("\n");
    sb.append("    tokenExpiresAt: ").append(toIndentedString(tokenExpiresAt)).append("\n");
    sb.append("    tokenLastUsedAt: ").append(toIndentedString(tokenLastUsedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("owner");
    openapiFields.add("repository_selection");
    openapiFields.add("repositories_url");
    openapiFields.add("permissions");
    openapiFields.add("access_granted_at");
    openapiFields.add("token_expired");
    openapiFields.add("token_expires_at");
    openapiFields.add("token_last_used_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("repository_selection");
    openapiRequiredFields.add("repositories_url");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("access_granted_at");
    openapiRequiredFields.add("token_expired");
    openapiRequiredFields.add("token_expires_at");
    openapiRequiredFields.add("token_last_used_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrganizationProgrammaticAccessGrant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrganizationProgrammaticAccessGrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationProgrammaticAccessGrant is not found in the empty JSON string", OrganizationProgrammaticAccessGrant.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrganizationProgrammaticAccessGrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationProgrammaticAccessGrant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationProgrammaticAccessGrant.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `owner`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      if (!jsonObj.get("repository_selection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_selection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_selection").toString()));
      }
      if (!jsonObj.get("repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositories_url").toString()));
      }
      // validate the required field `permissions`
      OrganizationProgrammaticAccessGrantRequestPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      if (!jsonObj.get("access_granted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_granted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_granted_at").toString()));
      }
      if (!jsonObj.get("token_expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_expires_at").toString()));
      }
      if (!jsonObj.get("token_last_used_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_last_used_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_last_used_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationProgrammaticAccessGrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationProgrammaticAccessGrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationProgrammaticAccessGrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationProgrammaticAccessGrant.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationProgrammaticAccessGrant>() {
           @Override
           public void write(JsonWriter out, OrganizationProgrammaticAccessGrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationProgrammaticAccessGrant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrganizationProgrammaticAccessGrant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrganizationProgrammaticAccessGrant
  * @throws IOException if the JSON string is invalid with respect to OrganizationProgrammaticAccessGrant
  */
  public static OrganizationProgrammaticAccessGrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationProgrammaticAccessGrant.class);
  }

 /**
  * Convert an instance of OrganizationProgrammaticAccessGrant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

