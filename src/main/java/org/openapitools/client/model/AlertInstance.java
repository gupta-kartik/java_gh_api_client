/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AlertInstanceLocation;
import org.openapitools.client.model.CodeScanningAlertInstanceMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class AlertInstance {
  public static final String SERIALIZED_NAME_ANALYSIS_KEY = "analysis_key";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_KEY)
  private String analysisKey;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<String> classifications;

  public static final String SERIALIZED_NAME_COMMIT_SHA = "commit_sha";
  @SerializedName(SERIALIZED_NAME_COMMIT_SHA)
  private String commitSha;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private AlertInstanceLocation location;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private CodeScanningAlertInstanceMessage message;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  /**
   * State of a code scanning alert.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("open"),
    
    DISMISSED("dismissed"),
    
    FIXED("fixed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public AlertInstance() {
  }

  public AlertInstance analysisKey(String analysisKey) {
    
    this.analysisKey = analysisKey;
    return this;
  }

   /**
   * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
   * @return analysisKey
  **/
  @javax.annotation.Nonnull

  public String getAnalysisKey() {
    return analysisKey;
  }


  public void setAnalysisKey(String analysisKey) {
    this.analysisKey = analysisKey;
  }


  public AlertInstance category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Identifies the configuration under which the analysis was executed.
   * @return category
  **/
  @javax.annotation.Nullable

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public AlertInstance classifications(List<String> classifications) {
    
    this.classifications = classifications;
    return this;
  }

  public AlertInstance addClassificationsItem(String classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @javax.annotation.Nullable

  public List<String> getClassifications() {
    return classifications;
  }


  public void setClassifications(List<String> classifications) {
    this.classifications = classifications;
  }


  public AlertInstance commitSha(String commitSha) {
    
    this.commitSha = commitSha;
    return this;
  }

   /**
   * Get commitSha
   * @return commitSha
  **/
  @javax.annotation.Nullable

  public String getCommitSha() {
    return commitSha;
  }


  public void setCommitSha(String commitSha) {
    this.commitSha = commitSha;
  }


  public AlertInstance environment(String environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
   * @return environment
  **/
  @javax.annotation.Nonnull

  public String getEnvironment() {
    return environment;
  }


  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public AlertInstance location(AlertInstanceLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable

  public AlertInstanceLocation getLocation() {
    return location;
  }


  public void setLocation(AlertInstanceLocation location) {
    this.location = location;
  }


  public AlertInstance message(CodeScanningAlertInstanceMessage message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable

  public CodeScanningAlertInstanceMessage getMessage() {
    return message;
  }


  public void setMessage(CodeScanningAlertInstanceMessage message) {
    this.message = message;
  }


  public AlertInstance ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * The full Git reference, formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;.
   * @return ref
  **/
  @javax.annotation.Nonnull

  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }


  public AlertInstance state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * State of a code scanning alert.
   * @return state
  **/
  @javax.annotation.Nonnull

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertInstance alertInstance = (AlertInstance) o;
    return Objects.equals(this.analysisKey, alertInstance.analysisKey) &&
        Objects.equals(this.category, alertInstance.category) &&
        Objects.equals(this.classifications, alertInstance.classifications) &&
        Objects.equals(this.commitSha, alertInstance.commitSha) &&
        Objects.equals(this.environment, alertInstance.environment) &&
        Objects.equals(this.location, alertInstance.location) &&
        Objects.equals(this.message, alertInstance.message) &&
        Objects.equals(this.ref, alertInstance.ref) &&
        Objects.equals(this.state, alertInstance.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisKey, category, classifications, commitSha, environment, location, message, ref, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertInstance {\n");
    sb.append("    analysisKey: ").append(toIndentedString(analysisKey)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    commitSha: ").append(toIndentedString(commitSha)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysis_key");
    openapiFields.add("category");
    openapiFields.add("classifications");
    openapiFields.add("commit_sha");
    openapiFields.add("environment");
    openapiFields.add("location");
    openapiFields.add("message");
    openapiFields.add("ref");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("analysis_key");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("ref");
    openapiRequiredFields.add("state");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlertInstance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AlertInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertInstance is not found in the empty JSON string", AlertInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AlertInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertInstance` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertInstance.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("analysis_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysis_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysis_key").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
      }
      if ((jsonObj.get("commit_sha") != null && !jsonObj.get("commit_sha").isJsonNull()) && !jsonObj.get("commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_sha").toString()));
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        AlertInstanceLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        CodeScanningAlertInstanceMessage.validateJsonObject(jsonObj.getAsJsonObject("message"));
      }
      if (!jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertInstance>() {
           @Override
           public void write(JsonWriter out, AlertInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertInstance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlertInstance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlertInstance
  * @throws IOException if the JSON string is invalid with respect to AlertInstance
  */
  public static AlertInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertInstance.class);
  }

 /**
  * Convert an instance of AlertInstance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

