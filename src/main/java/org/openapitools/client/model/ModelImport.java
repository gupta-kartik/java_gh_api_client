/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ImportProjectChoicesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A repository import from an external source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ModelImport {
  public static final String SERIALIZED_NAME_VCS = "vcs";
  @SerializedName(SERIALIZED_NAME_VCS)
  private String vcs;

  public static final String SERIALIZED_NAME_USE_LFS = "use_lfs";
  @SerializedName(SERIALIZED_NAME_USE_LFS)
  private Boolean useLfs;

  public static final String SERIALIZED_NAME_VCS_URL = "vcs_url";
  @SerializedName(SERIALIZED_NAME_VCS_URL)
  private String vcsUrl;

  public static final String SERIALIZED_NAME_SVC_ROOT = "svc_root";
  @SerializedName(SERIALIZED_NAME_SVC_ROOT)
  private String svcRoot;

  public static final String SERIALIZED_NAME_TFVC_PROJECT = "tfvc_project";
  @SerializedName(SERIALIZED_NAME_TFVC_PROJECT)
  private String tfvcProject;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AUTH("auth"),
    
    ERROR("error"),
    
    NONE("none"),
    
    DETECTING("detecting"),
    
    CHOOSE("choose"),
    
    AUTH_FAILED("auth_failed"),
    
    IMPORTING("importing"),
    
    MAPPING("mapping"),
    
    WAITING_TO_PUSH("waiting_to_push"),
    
    PUSHING("pushing"),
    
    COMPLETE("complete"),
    
    SETUP("setup"),
    
    UNKNOWN("unknown"),
    
    DETECTION_FOUND_MULTIPLE("detection_found_multiple"),
    
    DETECTION_FOUND_NOTHING("detection_found_nothing"),
    
    DETECTION_NEEDS_AUTH("detection_needs_auth");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_TEXT = "status_text";
  @SerializedName(SERIALIZED_NAME_STATUS_TEXT)
  private String statusText;

  public static final String SERIALIZED_NAME_FAILED_STEP = "failed_step";
  @SerializedName(SERIALIZED_NAME_FAILED_STEP)
  private String failedStep;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_IMPORT_PERCENT = "import_percent";
  @SerializedName(SERIALIZED_NAME_IMPORT_PERCENT)
  private Integer importPercent;

  public static final String SERIALIZED_NAME_COMMIT_COUNT = "commit_count";
  @SerializedName(SERIALIZED_NAME_COMMIT_COUNT)
  private Integer commitCount;

  public static final String SERIALIZED_NAME_PUSH_PERCENT = "push_percent";
  @SerializedName(SERIALIZED_NAME_PUSH_PERCENT)
  private Integer pushPercent;

  public static final String SERIALIZED_NAME_HAS_LARGE_FILES = "has_large_files";
  @SerializedName(SERIALIZED_NAME_HAS_LARGE_FILES)
  private Boolean hasLargeFiles;

  public static final String SERIALIZED_NAME_LARGE_FILES_SIZE = "large_files_size";
  @SerializedName(SERIALIZED_NAME_LARGE_FILES_SIZE)
  private Integer largeFilesSize;

  public static final String SERIALIZED_NAME_LARGE_FILES_COUNT = "large_files_count";
  @SerializedName(SERIALIZED_NAME_LARGE_FILES_COUNT)
  private Integer largeFilesCount;

  public static final String SERIALIZED_NAME_PROJECT_CHOICES = "project_choices";
  @SerializedName(SERIALIZED_NAME_PROJECT_CHOICES)
  private List<ImportProjectChoicesInner> projectChoices;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_AUTHORS_COUNT = "authors_count";
  @SerializedName(SERIALIZED_NAME_AUTHORS_COUNT)
  private Integer authorsCount;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_AUTHORS_URL = "authors_url";
  @SerializedName(SERIALIZED_NAME_AUTHORS_URL)
  private URI authorsUrl;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repository_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private URI repositoryUrl;

  public static final String SERIALIZED_NAME_SVN_ROOT = "svn_root";
  @SerializedName(SERIALIZED_NAME_SVN_ROOT)
  private String svnRoot;

  public ModelImport() {
  }

  public ModelImport vcs(String vcs) {
    
    this.vcs = vcs;
    return this;
  }

   /**
   * Get vcs
   * @return vcs
  **/
  @javax.annotation.Nullable

  public String getVcs() {
    return vcs;
  }


  public void setVcs(String vcs) {
    this.vcs = vcs;
  }


  public ModelImport useLfs(Boolean useLfs) {
    
    this.useLfs = useLfs;
    return this;
  }

   /**
   * Get useLfs
   * @return useLfs
  **/
  @javax.annotation.Nullable

  public Boolean getUseLfs() {
    return useLfs;
  }


  public void setUseLfs(Boolean useLfs) {
    this.useLfs = useLfs;
  }


  public ModelImport vcsUrl(String vcsUrl) {
    
    this.vcsUrl = vcsUrl;
    return this;
  }

   /**
   * The URL of the originating repository.
   * @return vcsUrl
  **/
  @javax.annotation.Nonnull

  public String getVcsUrl() {
    return vcsUrl;
  }


  public void setVcsUrl(String vcsUrl) {
    this.vcsUrl = vcsUrl;
  }


  public ModelImport svcRoot(String svcRoot) {
    
    this.svcRoot = svcRoot;
    return this;
  }

   /**
   * Get svcRoot
   * @return svcRoot
  **/
  @javax.annotation.Nullable

  public String getSvcRoot() {
    return svcRoot;
  }


  public void setSvcRoot(String svcRoot) {
    this.svcRoot = svcRoot;
  }


  public ModelImport tfvcProject(String tfvcProject) {
    
    this.tfvcProject = tfvcProject;
    return this;
  }

   /**
   * Get tfvcProject
   * @return tfvcProject
  **/
  @javax.annotation.Nullable

  public String getTfvcProject() {
    return tfvcProject;
  }


  public void setTfvcProject(String tfvcProject) {
    this.tfvcProject = tfvcProject;
  }


  public ModelImport status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ModelImport statusText(String statusText) {
    
    this.statusText = statusText;
    return this;
  }

   /**
   * Get statusText
   * @return statusText
  **/
  @javax.annotation.Nullable

  public String getStatusText() {
    return statusText;
  }


  public void setStatusText(String statusText) {
    this.statusText = statusText;
  }


  public ModelImport failedStep(String failedStep) {
    
    this.failedStep = failedStep;
    return this;
  }

   /**
   * Get failedStep
   * @return failedStep
  **/
  @javax.annotation.Nullable

  public String getFailedStep() {
    return failedStep;
  }


  public void setFailedStep(String failedStep) {
    this.failedStep = failedStep;
  }


  public ModelImport errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @javax.annotation.Nullable

  public String getErrorMessage() {
    return errorMessage;
  }


  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ModelImport importPercent(Integer importPercent) {
    
    this.importPercent = importPercent;
    return this;
  }

   /**
   * Get importPercent
   * @return importPercent
  **/
  @javax.annotation.Nullable

  public Integer getImportPercent() {
    return importPercent;
  }


  public void setImportPercent(Integer importPercent) {
    this.importPercent = importPercent;
  }


  public ModelImport commitCount(Integer commitCount) {
    
    this.commitCount = commitCount;
    return this;
  }

   /**
   * Get commitCount
   * @return commitCount
  **/
  @javax.annotation.Nullable

  public Integer getCommitCount() {
    return commitCount;
  }


  public void setCommitCount(Integer commitCount) {
    this.commitCount = commitCount;
  }


  public ModelImport pushPercent(Integer pushPercent) {
    
    this.pushPercent = pushPercent;
    return this;
  }

   /**
   * Get pushPercent
   * @return pushPercent
  **/
  @javax.annotation.Nullable

  public Integer getPushPercent() {
    return pushPercent;
  }


  public void setPushPercent(Integer pushPercent) {
    this.pushPercent = pushPercent;
  }


  public ModelImport hasLargeFiles(Boolean hasLargeFiles) {
    
    this.hasLargeFiles = hasLargeFiles;
    return this;
  }

   /**
   * Get hasLargeFiles
   * @return hasLargeFiles
  **/
  @javax.annotation.Nullable

  public Boolean getHasLargeFiles() {
    return hasLargeFiles;
  }


  public void setHasLargeFiles(Boolean hasLargeFiles) {
    this.hasLargeFiles = hasLargeFiles;
  }


  public ModelImport largeFilesSize(Integer largeFilesSize) {
    
    this.largeFilesSize = largeFilesSize;
    return this;
  }

   /**
   * Get largeFilesSize
   * @return largeFilesSize
  **/
  @javax.annotation.Nullable

  public Integer getLargeFilesSize() {
    return largeFilesSize;
  }


  public void setLargeFilesSize(Integer largeFilesSize) {
    this.largeFilesSize = largeFilesSize;
  }


  public ModelImport largeFilesCount(Integer largeFilesCount) {
    
    this.largeFilesCount = largeFilesCount;
    return this;
  }

   /**
   * Get largeFilesCount
   * @return largeFilesCount
  **/
  @javax.annotation.Nullable

  public Integer getLargeFilesCount() {
    return largeFilesCount;
  }


  public void setLargeFilesCount(Integer largeFilesCount) {
    this.largeFilesCount = largeFilesCount;
  }


  public ModelImport projectChoices(List<ImportProjectChoicesInner> projectChoices) {
    
    this.projectChoices = projectChoices;
    return this;
  }

  public ModelImport addProjectChoicesItem(ImportProjectChoicesInner projectChoicesItem) {
    if (this.projectChoices == null) {
      this.projectChoices = new ArrayList<>();
    }
    this.projectChoices.add(projectChoicesItem);
    return this;
  }

   /**
   * Get projectChoices
   * @return projectChoices
  **/
  @javax.annotation.Nullable

  public List<ImportProjectChoicesInner> getProjectChoices() {
    return projectChoices;
  }


  public void setProjectChoices(List<ImportProjectChoicesInner> projectChoices) {
    this.projectChoices = projectChoices;
  }


  public ModelImport message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ModelImport authorsCount(Integer authorsCount) {
    
    this.authorsCount = authorsCount;
    return this;
  }

   /**
   * Get authorsCount
   * @return authorsCount
  **/
  @javax.annotation.Nullable

  public Integer getAuthorsCount() {
    return authorsCount;
  }


  public void setAuthorsCount(Integer authorsCount) {
    this.authorsCount = authorsCount;
  }


  public ModelImport url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public ModelImport htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public ModelImport authorsUrl(URI authorsUrl) {
    
    this.authorsUrl = authorsUrl;
    return this;
  }

   /**
   * Get authorsUrl
   * @return authorsUrl
  **/
  @javax.annotation.Nonnull

  public URI getAuthorsUrl() {
    return authorsUrl;
  }


  public void setAuthorsUrl(URI authorsUrl) {
    this.authorsUrl = authorsUrl;
  }


  public ModelImport repositoryUrl(URI repositoryUrl) {
    
    this.repositoryUrl = repositoryUrl;
    return this;
  }

   /**
   * Get repositoryUrl
   * @return repositoryUrl
  **/
  @javax.annotation.Nonnull

  public URI getRepositoryUrl() {
    return repositoryUrl;
  }


  public void setRepositoryUrl(URI repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public ModelImport svnRoot(String svnRoot) {
    
    this.svnRoot = svnRoot;
    return this;
  }

   /**
   * Get svnRoot
   * @return svnRoot
  **/
  @javax.annotation.Nullable

  public String getSvnRoot() {
    return svnRoot;
  }


  public void setSvnRoot(String svnRoot) {
    this.svnRoot = svnRoot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelImport _import = (ModelImport) o;
    return Objects.equals(this.vcs, _import.vcs) &&
        Objects.equals(this.useLfs, _import.useLfs) &&
        Objects.equals(this.vcsUrl, _import.vcsUrl) &&
        Objects.equals(this.svcRoot, _import.svcRoot) &&
        Objects.equals(this.tfvcProject, _import.tfvcProject) &&
        Objects.equals(this.status, _import.status) &&
        Objects.equals(this.statusText, _import.statusText) &&
        Objects.equals(this.failedStep, _import.failedStep) &&
        Objects.equals(this.errorMessage, _import.errorMessage) &&
        Objects.equals(this.importPercent, _import.importPercent) &&
        Objects.equals(this.commitCount, _import.commitCount) &&
        Objects.equals(this.pushPercent, _import.pushPercent) &&
        Objects.equals(this.hasLargeFiles, _import.hasLargeFiles) &&
        Objects.equals(this.largeFilesSize, _import.largeFilesSize) &&
        Objects.equals(this.largeFilesCount, _import.largeFilesCount) &&
        Objects.equals(this.projectChoices, _import.projectChoices) &&
        Objects.equals(this.message, _import.message) &&
        Objects.equals(this.authorsCount, _import.authorsCount) &&
        Objects.equals(this.url, _import.url) &&
        Objects.equals(this.htmlUrl, _import.htmlUrl) &&
        Objects.equals(this.authorsUrl, _import.authorsUrl) &&
        Objects.equals(this.repositoryUrl, _import.repositoryUrl) &&
        Objects.equals(this.svnRoot, _import.svnRoot);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(vcs, useLfs, vcsUrl, svcRoot, tfvcProject, status, statusText, failedStep, errorMessage, importPercent, commitCount, pushPercent, hasLargeFiles, largeFilesSize, largeFilesCount, projectChoices, message, authorsCount, url, htmlUrl, authorsUrl, repositoryUrl, svnRoot);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelImport {\n");
    sb.append("    vcs: ").append(toIndentedString(vcs)).append("\n");
    sb.append("    useLfs: ").append(toIndentedString(useLfs)).append("\n");
    sb.append("    vcsUrl: ").append(toIndentedString(vcsUrl)).append("\n");
    sb.append("    svcRoot: ").append(toIndentedString(svcRoot)).append("\n");
    sb.append("    tfvcProject: ").append(toIndentedString(tfvcProject)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusText: ").append(toIndentedString(statusText)).append("\n");
    sb.append("    failedStep: ").append(toIndentedString(failedStep)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    importPercent: ").append(toIndentedString(importPercent)).append("\n");
    sb.append("    commitCount: ").append(toIndentedString(commitCount)).append("\n");
    sb.append("    pushPercent: ").append(toIndentedString(pushPercent)).append("\n");
    sb.append("    hasLargeFiles: ").append(toIndentedString(hasLargeFiles)).append("\n");
    sb.append("    largeFilesSize: ").append(toIndentedString(largeFilesSize)).append("\n");
    sb.append("    largeFilesCount: ").append(toIndentedString(largeFilesCount)).append("\n");
    sb.append("    projectChoices: ").append(toIndentedString(projectChoices)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    authorsCount: ").append(toIndentedString(authorsCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    authorsUrl: ").append(toIndentedString(authorsUrl)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    svnRoot: ").append(toIndentedString(svnRoot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vcs");
    openapiFields.add("use_lfs");
    openapiFields.add("vcs_url");
    openapiFields.add("svc_root");
    openapiFields.add("tfvc_project");
    openapiFields.add("status");
    openapiFields.add("status_text");
    openapiFields.add("failed_step");
    openapiFields.add("error_message");
    openapiFields.add("import_percent");
    openapiFields.add("commit_count");
    openapiFields.add("push_percent");
    openapiFields.add("has_large_files");
    openapiFields.add("large_files_size");
    openapiFields.add("large_files_count");
    openapiFields.add("project_choices");
    openapiFields.add("message");
    openapiFields.add("authors_count");
    openapiFields.add("url");
    openapiFields.add("html_url");
    openapiFields.add("authors_url");
    openapiFields.add("repository_url");
    openapiFields.add("svn_root");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vcs");
    openapiRequiredFields.add("vcs_url");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("authors_url");
    openapiRequiredFields.add("repository_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelImport
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelImport.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelImport is not found in the empty JSON string", ModelImport.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ModelImport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelImport` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelImport.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("vcs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs").toString()));
      }
      if (!jsonObj.get("vcs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_url").toString()));
      }
      if ((jsonObj.get("svc_root") != null && !jsonObj.get("svc_root").isJsonNull()) && !jsonObj.get("svc_root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svc_root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svc_root").toString()));
      }
      if ((jsonObj.get("tfvc_project") != null && !jsonObj.get("tfvc_project").isJsonNull()) && !jsonObj.get("tfvc_project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tfvc_project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tfvc_project").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_text") != null && !jsonObj.get("status_text").isJsonNull()) && !jsonObj.get("status_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_text").toString()));
      }
      if ((jsonObj.get("failed_step") != null && !jsonObj.get("failed_step").isJsonNull()) && !jsonObj.get("failed_step").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed_step` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failed_step").toString()));
      }
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if (jsonObj.get("project_choices") != null && !jsonObj.get("project_choices").isJsonNull()) {
        JsonArray jsonArrayprojectChoices = jsonObj.getAsJsonArray("project_choices");
        if (jsonArrayprojectChoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("project_choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `project_choices` to be an array in the JSON string but got `%s`", jsonObj.get("project_choices").toString()));
          }

          // validate the optional field `project_choices` (array)
          for (int i = 0; i < jsonArrayprojectChoices.size(); i++) {
            ImportProjectChoicesInner.validateJsonObject(jsonArrayprojectChoices.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("authors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authors_url").toString()));
      }
      if (!jsonObj.get("repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_url").toString()));
      }
      if ((jsonObj.get("svn_root") != null && !jsonObj.get("svn_root").isJsonNull()) && !jsonObj.get("svn_root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svn_root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svn_root").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelImport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelImport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelImport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelImport.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelImport>() {
           @Override
           public void write(JsonWriter out, ModelImport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelImport read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelImport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelImport
  * @throws IOException if the JSON string is invalid with respect to ModelImport
  */
  public static ModelImport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelImport.class);
  }

 /**
  * Convert an instance of ModelImport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

