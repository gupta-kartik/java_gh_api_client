/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.IssueEventDismissedReview;
import org.openapitools.client.model.IssueEventLabel;
import org.openapitools.client.model.IssueEventMilestone;
import org.openapitools.client.model.IssueEventProjectCard;
import org.openapitools.client.model.IssueEventRename;
import org.openapitools.client.model.NullableIntegration;
import org.openapitools.client.model.NullableIssue;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.Team;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Issue Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class IssueEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private NullableSimpleUser actor;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commit_id";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_COMMIT_URL = "commit_url";
  @SerializedName(SERIALIZED_NAME_COMMIT_URL)
  private String commitUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private NullableIssue issue;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private IssueEventLabel label;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private NullableSimpleUser assignee;

  public static final String SERIALIZED_NAME_ASSIGNER = "assigner";
  @SerializedName(SERIALIZED_NAME_ASSIGNER)
  private NullableSimpleUser assigner;

  public static final String SERIALIZED_NAME_REVIEW_REQUESTER = "review_requester";
  @SerializedName(SERIALIZED_NAME_REVIEW_REQUESTER)
  private NullableSimpleUser reviewRequester;

  public static final String SERIALIZED_NAME_REQUESTED_REVIEWER = "requested_reviewer";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REVIEWER)
  private NullableSimpleUser requestedReviewer;

  public static final String SERIALIZED_NAME_REQUESTED_TEAM = "requested_team";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TEAM)
  private Team requestedTeam;

  public static final String SERIALIZED_NAME_DISMISSED_REVIEW = "dismissed_review";
  @SerializedName(SERIALIZED_NAME_DISMISSED_REVIEW)
  private IssueEventDismissedReview dismissedReview;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private IssueEventMilestone milestone;

  public static final String SERIALIZED_NAME_PROJECT_CARD = "project_card";
  @SerializedName(SERIALIZED_NAME_PROJECT_CARD)
  private IssueEventProjectCard projectCard;

  public static final String SERIALIZED_NAME_RENAME = "rename";
  @SerializedName(SERIALIZED_NAME_RENAME)
  private IssueEventRename rename;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociation authorAssociation;

  public static final String SERIALIZED_NAME_LOCK_REASON = "lock_reason";
  @SerializedName(SERIALIZED_NAME_LOCK_REASON)
  private String lockReason;

  public static final String SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP = "performed_via_github_app";
  @SerializedName(SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP)
  private NullableIntegration performedViaGithubApp;

  public IssueEvent() {
  }

  public IssueEvent id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public IssueEvent nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public IssueEvent url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public IssueEvent actor(NullableSimpleUser actor) {
    
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getActor() {
    return actor;
  }


  public void setActor(NullableSimpleUser actor) {
    this.actor = actor;
  }


  public IssueEvent event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nonnull

  public String getEvent() {
    return event;
  }


  public void setEvent(String event) {
    this.event = event;
  }


  public IssueEvent commitId(String commitId) {
    
    this.commitId = commitId;
    return this;
  }

   /**
   * Get commitId
   * @return commitId
  **/
  @javax.annotation.Nullable

  public String getCommitId() {
    return commitId;
  }


  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public IssueEvent commitUrl(String commitUrl) {
    
    this.commitUrl = commitUrl;
    return this;
  }

   /**
   * Get commitUrl
   * @return commitUrl
  **/
  @javax.annotation.Nullable

  public String getCommitUrl() {
    return commitUrl;
  }


  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public IssueEvent createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public IssueEvent issue(NullableIssue issue) {
    
    this.issue = issue;
    return this;
  }

   /**
   * Get issue
   * @return issue
  **/
  @javax.annotation.Nullable

  public NullableIssue getIssue() {
    return issue;
  }


  public void setIssue(NullableIssue issue) {
    this.issue = issue;
  }


  public IssueEvent label(IssueEventLabel label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable

  public IssueEventLabel getLabel() {
    return label;
  }


  public void setLabel(IssueEventLabel label) {
    this.label = label;
  }


  public IssueEvent assignee(NullableSimpleUser assignee) {
    
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getAssignee() {
    return assignee;
  }


  public void setAssignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
  }


  public IssueEvent assigner(NullableSimpleUser assigner) {
    
    this.assigner = assigner;
    return this;
  }

   /**
   * Get assigner
   * @return assigner
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getAssigner() {
    return assigner;
  }


  public void setAssigner(NullableSimpleUser assigner) {
    this.assigner = assigner;
  }


  public IssueEvent reviewRequester(NullableSimpleUser reviewRequester) {
    
    this.reviewRequester = reviewRequester;
    return this;
  }

   /**
   * Get reviewRequester
   * @return reviewRequester
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getReviewRequester() {
    return reviewRequester;
  }


  public void setReviewRequester(NullableSimpleUser reviewRequester) {
    this.reviewRequester = reviewRequester;
  }


  public IssueEvent requestedReviewer(NullableSimpleUser requestedReviewer) {
    
    this.requestedReviewer = requestedReviewer;
    return this;
  }

   /**
   * Get requestedReviewer
   * @return requestedReviewer
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getRequestedReviewer() {
    return requestedReviewer;
  }


  public void setRequestedReviewer(NullableSimpleUser requestedReviewer) {
    this.requestedReviewer = requestedReviewer;
  }


  public IssueEvent requestedTeam(Team requestedTeam) {
    
    this.requestedTeam = requestedTeam;
    return this;
  }

   /**
   * Get requestedTeam
   * @return requestedTeam
  **/
  @javax.annotation.Nullable

  public Team getRequestedTeam() {
    return requestedTeam;
  }


  public void setRequestedTeam(Team requestedTeam) {
    this.requestedTeam = requestedTeam;
  }


  public IssueEvent dismissedReview(IssueEventDismissedReview dismissedReview) {
    
    this.dismissedReview = dismissedReview;
    return this;
  }

   /**
   * Get dismissedReview
   * @return dismissedReview
  **/
  @javax.annotation.Nullable

  public IssueEventDismissedReview getDismissedReview() {
    return dismissedReview;
  }


  public void setDismissedReview(IssueEventDismissedReview dismissedReview) {
    this.dismissedReview = dismissedReview;
  }


  public IssueEvent milestone(IssueEventMilestone milestone) {
    
    this.milestone = milestone;
    return this;
  }

   /**
   * Get milestone
   * @return milestone
  **/
  @javax.annotation.Nullable

  public IssueEventMilestone getMilestone() {
    return milestone;
  }


  public void setMilestone(IssueEventMilestone milestone) {
    this.milestone = milestone;
  }


  public IssueEvent projectCard(IssueEventProjectCard projectCard) {
    
    this.projectCard = projectCard;
    return this;
  }

   /**
   * Get projectCard
   * @return projectCard
  **/
  @javax.annotation.Nullable

  public IssueEventProjectCard getProjectCard() {
    return projectCard;
  }


  public void setProjectCard(IssueEventProjectCard projectCard) {
    this.projectCard = projectCard;
  }


  public IssueEvent rename(IssueEventRename rename) {
    
    this.rename = rename;
    return this;
  }

   /**
   * Get rename
   * @return rename
  **/
  @javax.annotation.Nullable

  public IssueEventRename getRename() {
    return rename;
  }


  public void setRename(IssueEventRename rename) {
    this.rename = rename;
  }


  public IssueEvent authorAssociation(AuthorAssociation authorAssociation) {
    
    this.authorAssociation = authorAssociation;
    return this;
  }

   /**
   * Get authorAssociation
   * @return authorAssociation
  **/
  @javax.annotation.Nullable

  public AuthorAssociation getAuthorAssociation() {
    return authorAssociation;
  }


  public void setAuthorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public IssueEvent lockReason(String lockReason) {
    
    this.lockReason = lockReason;
    return this;
  }

   /**
   * Get lockReason
   * @return lockReason
  **/
  @javax.annotation.Nullable

  public String getLockReason() {
    return lockReason;
  }


  public void setLockReason(String lockReason) {
    this.lockReason = lockReason;
  }


  public IssueEvent performedViaGithubApp(NullableIntegration performedViaGithubApp) {
    
    this.performedViaGithubApp = performedViaGithubApp;
    return this;
  }

   /**
   * Get performedViaGithubApp
   * @return performedViaGithubApp
  **/
  @javax.annotation.Nullable

  public NullableIntegration getPerformedViaGithubApp() {
    return performedViaGithubApp;
  }


  public void setPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueEvent issueEvent = (IssueEvent) o;
    return Objects.equals(this.id, issueEvent.id) &&
        Objects.equals(this.nodeId, issueEvent.nodeId) &&
        Objects.equals(this.url, issueEvent.url) &&
        Objects.equals(this.actor, issueEvent.actor) &&
        Objects.equals(this.event, issueEvent.event) &&
        Objects.equals(this.commitId, issueEvent.commitId) &&
        Objects.equals(this.commitUrl, issueEvent.commitUrl) &&
        Objects.equals(this.createdAt, issueEvent.createdAt) &&
        Objects.equals(this.issue, issueEvent.issue) &&
        Objects.equals(this.label, issueEvent.label) &&
        Objects.equals(this.assignee, issueEvent.assignee) &&
        Objects.equals(this.assigner, issueEvent.assigner) &&
        Objects.equals(this.reviewRequester, issueEvent.reviewRequester) &&
        Objects.equals(this.requestedReviewer, issueEvent.requestedReviewer) &&
        Objects.equals(this.requestedTeam, issueEvent.requestedTeam) &&
        Objects.equals(this.dismissedReview, issueEvent.dismissedReview) &&
        Objects.equals(this.milestone, issueEvent.milestone) &&
        Objects.equals(this.projectCard, issueEvent.projectCard) &&
        Objects.equals(this.rename, issueEvent.rename) &&
        Objects.equals(this.authorAssociation, issueEvent.authorAssociation) &&
        Objects.equals(this.lockReason, issueEvent.lockReason) &&
        Objects.equals(this.performedViaGithubApp, issueEvent.performedViaGithubApp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nodeId, url, actor, event, commitId, commitUrl, createdAt, issue, label, assignee, assigner, reviewRequester, requestedReviewer, requestedTeam, dismissedReview, milestone, projectCard, rename, authorAssociation, lockReason, performedViaGithubApp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assigner: ").append(toIndentedString(assigner)).append("\n");
    sb.append("    reviewRequester: ").append(toIndentedString(reviewRequester)).append("\n");
    sb.append("    requestedReviewer: ").append(toIndentedString(requestedReviewer)).append("\n");
    sb.append("    requestedTeam: ").append(toIndentedString(requestedTeam)).append("\n");
    sb.append("    dismissedReview: ").append(toIndentedString(dismissedReview)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    projectCard: ").append(toIndentedString(projectCard)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    lockReason: ").append(toIndentedString(lockReason)).append("\n");
    sb.append("    performedViaGithubApp: ").append(toIndentedString(performedViaGithubApp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("url");
    openapiFields.add("actor");
    openapiFields.add("event");
    openapiFields.add("commit_id");
    openapiFields.add("commit_url");
    openapiFields.add("created_at");
    openapiFields.add("issue");
    openapiFields.add("label");
    openapiFields.add("assignee");
    openapiFields.add("assigner");
    openapiFields.add("review_requester");
    openapiFields.add("requested_reviewer");
    openapiFields.add("requested_team");
    openapiFields.add("dismissed_review");
    openapiFields.add("milestone");
    openapiFields.add("project_card");
    openapiFields.add("rename");
    openapiFields.add("author_association");
    openapiFields.add("lock_reason");
    openapiFields.add("performed_via_github_app");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("actor");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("commit_id");
    openapiRequiredFields.add("commit_url");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IssueEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IssueEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueEvent is not found in the empty JSON string", IssueEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IssueEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssueEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `actor`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("actor"));
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if (!jsonObj.get("commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_id").toString()));
      }
      if (!jsonObj.get("commit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_url").toString()));
      }
      // validate the optional field `issue`
      if (jsonObj.get("issue") != null && !jsonObj.get("issue").isJsonNull()) {
        NullableIssue.validateJsonObject(jsonObj.getAsJsonObject("issue"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        IssueEventLabel.validateJsonObject(jsonObj.getAsJsonObject("label"));
      }
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("assignee"));
      }
      // validate the optional field `assigner`
      if (jsonObj.get("assigner") != null && !jsonObj.get("assigner").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("assigner"));
      }
      // validate the optional field `review_requester`
      if (jsonObj.get("review_requester") != null && !jsonObj.get("review_requester").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("review_requester"));
      }
      // validate the optional field `requested_reviewer`
      if (jsonObj.get("requested_reviewer") != null && !jsonObj.get("requested_reviewer").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("requested_reviewer"));
      }
      // validate the optional field `requested_team`
      if (jsonObj.get("requested_team") != null && !jsonObj.get("requested_team").isJsonNull()) {
        Team.validateJsonObject(jsonObj.getAsJsonObject("requested_team"));
      }
      // validate the optional field `dismissed_review`
      if (jsonObj.get("dismissed_review") != null && !jsonObj.get("dismissed_review").isJsonNull()) {
        IssueEventDismissedReview.validateJsonObject(jsonObj.getAsJsonObject("dismissed_review"));
      }
      // validate the optional field `milestone`
      if (jsonObj.get("milestone") != null && !jsonObj.get("milestone").isJsonNull()) {
        IssueEventMilestone.validateJsonObject(jsonObj.getAsJsonObject("milestone"));
      }
      // validate the optional field `project_card`
      if (jsonObj.get("project_card") != null && !jsonObj.get("project_card").isJsonNull()) {
        IssueEventProjectCard.validateJsonObject(jsonObj.getAsJsonObject("project_card"));
      }
      // validate the optional field `rename`
      if (jsonObj.get("rename") != null && !jsonObj.get("rename").isJsonNull()) {
        IssueEventRename.validateJsonObject(jsonObj.getAsJsonObject("rename"));
      }
      if ((jsonObj.get("lock_reason") != null && !jsonObj.get("lock_reason").isJsonNull()) && !jsonObj.get("lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock_reason").toString()));
      }
      // validate the optional field `performed_via_github_app`
      if (jsonObj.get("performed_via_github_app") != null && !jsonObj.get("performed_via_github_app").isJsonNull()) {
        NullableIntegration.validateJsonObject(jsonObj.getAsJsonObject("performed_via_github_app"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueEvent>() {
           @Override
           public void write(JsonWriter out, IssueEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IssueEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IssueEvent
  * @throws IOException if the JSON string is invalid with respect to IssueEvent
  */
  public static IssueEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueEvent.class);
  }

 /**
  * Convert an instance of IssueEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

