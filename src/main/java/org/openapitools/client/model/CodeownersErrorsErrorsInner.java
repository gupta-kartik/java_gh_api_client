/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeownersErrorsErrorsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CodeownersErrorsErrorsInner {
  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private Integer column;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SUGGESTION = "suggestion";
  @SerializedName(SERIALIZED_NAME_SUGGESTION)
  private String suggestion;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public CodeownersErrorsErrorsInner() {
  }

  public CodeownersErrorsErrorsInner line(Integer line) {
    
    this.line = line;
    return this;
  }

   /**
   * The line number where this errors occurs.
   * @return line
  **/
  @javax.annotation.Nonnull

  public Integer getLine() {
    return line;
  }


  public void setLine(Integer line) {
    this.line = line;
  }


  public CodeownersErrorsErrorsInner column(Integer column) {
    
    this.column = column;
    return this;
  }

   /**
   * The column number where this errors occurs.
   * @return column
  **/
  @javax.annotation.Nonnull

  public Integer getColumn() {
    return column;
  }


  public void setColumn(Integer column) {
    this.column = column;
  }


  public CodeownersErrorsErrorsInner source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The contents of the line where the error occurs.
   * @return source
  **/
  @javax.annotation.Nullable

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public CodeownersErrorsErrorsInner kind(String kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * The type of error.
   * @return kind
  **/
  @javax.annotation.Nonnull

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    this.kind = kind;
  }


  public CodeownersErrorsErrorsInner suggestion(String suggestion) {
    
    this.suggestion = suggestion;
    return this;
  }

   /**
   * Suggested action to fix the error. This will usually be &#x60;null&#x60;, but is provided for some common errors.
   * @return suggestion
  **/
  @javax.annotation.Nullable

  public String getSuggestion() {
    return suggestion;
  }


  public void setSuggestion(String suggestion) {
    this.suggestion = suggestion;
  }


  public CodeownersErrorsErrorsInner message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
   * @return message
  **/
  @javax.annotation.Nonnull

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public CodeownersErrorsErrorsInner path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * The path of the file where the error occured.
   * @return path
  **/
  @javax.annotation.Nonnull

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeownersErrorsErrorsInner codeownersErrorsErrorsInner = (CodeownersErrorsErrorsInner) o;
    return Objects.equals(this.line, codeownersErrorsErrorsInner.line) &&
        Objects.equals(this.column, codeownersErrorsErrorsInner.column) &&
        Objects.equals(this.source, codeownersErrorsErrorsInner.source) &&
        Objects.equals(this.kind, codeownersErrorsErrorsInner.kind) &&
        Objects.equals(this.suggestion, codeownersErrorsErrorsInner.suggestion) &&
        Objects.equals(this.message, codeownersErrorsErrorsInner.message) &&
        Objects.equals(this.path, codeownersErrorsErrorsInner.path);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(line, column, source, kind, suggestion, message, path);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeownersErrorsErrorsInner {\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    suggestion: ").append(toIndentedString(suggestion)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line");
    openapiFields.add("column");
    openapiFields.add("source");
    openapiFields.add("kind");
    openapiFields.add("suggestion");
    openapiFields.add("message");
    openapiFields.add("path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("line");
    openapiRequiredFields.add("column");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("path");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CodeownersErrorsErrorsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CodeownersErrorsErrorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeownersErrorsErrorsInner is not found in the empty JSON string", CodeownersErrorsErrorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CodeownersErrorsErrorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeownersErrorsErrorsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeownersErrorsErrorsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("suggestion") != null && !jsonObj.get("suggestion").isJsonNull()) && !jsonObj.get("suggestion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestion").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeownersErrorsErrorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeownersErrorsErrorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeownersErrorsErrorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeownersErrorsErrorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeownersErrorsErrorsInner>() {
           @Override
           public void write(JsonWriter out, CodeownersErrorsErrorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeownersErrorsErrorsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CodeownersErrorsErrorsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CodeownersErrorsErrorsInner
  * @throws IOException if the JSON string is invalid with respect to CodeownersErrorsErrorsInner
  */
  public static CodeownersErrorsErrorsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeownersErrorsErrorsInner.class);
  }

 /**
  * Convert an instance of CodeownersErrorsErrorsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

