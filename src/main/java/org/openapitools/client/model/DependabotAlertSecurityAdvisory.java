/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DependabotAlertSecurityAdvisoryCvss;
import org.openapitools.client.model.DependabotAlertSecurityAdvisoryCwesInner;
import org.openapitools.client.model.DependabotAlertSecurityAdvisoryIdentifiersInner;
import org.openapitools.client.model.DependabotAlertSecurityAdvisoryReferencesInner;
import org.openapitools.client.model.DependabotAlertSecurityVulnerability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for the GitHub Security Advisory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class DependabotAlertSecurityAdvisory {
  public static final String SERIALIZED_NAME_GHSA_ID = "ghsa_id";
  @SerializedName(SERIALIZED_NAME_GHSA_ID)
  private String ghsaId;

  public static final String SERIALIZED_NAME_CVE_ID = "cve_id";
  @SerializedName(SERIALIZED_NAME_CVE_ID)
  private String cveId;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VULNERABILITIES = "vulnerabilities";
  @SerializedName(SERIALIZED_NAME_VULNERABILITIES)
  private List<DependabotAlertSecurityVulnerability> vulnerabilities = new ArrayList<>();

  /**
   * The severity of the advisory.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high"),
    
    CRITICAL("critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_CVSS = "cvss";
  @SerializedName(SERIALIZED_NAME_CVSS)
  private DependabotAlertSecurityAdvisoryCvss cvss;

  public static final String SERIALIZED_NAME_CWES = "cwes";
  @SerializedName(SERIALIZED_NAME_CWES)
  private List<DependabotAlertSecurityAdvisoryCwesInner> cwes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<DependabotAlertSecurityAdvisoryIdentifiersInner> identifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<DependabotAlertSecurityAdvisoryReferencesInner> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WITHDRAWN_AT = "withdrawn_at";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_AT)
  private OffsetDateTime withdrawnAt;

  public DependabotAlertSecurityAdvisory() {
  }

  
  public DependabotAlertSecurityAdvisory(
     String ghsaId, 
     String cveId, 
     String summary, 
     String description, 
     List<DependabotAlertSecurityVulnerability> vulnerabilities, 
     SeverityEnum severity, 
     List<DependabotAlertSecurityAdvisoryCwesInner> cwes, 
     List<DependabotAlertSecurityAdvisoryIdentifiersInner> identifiers, 
     List<DependabotAlertSecurityAdvisoryReferencesInner> references, 
     OffsetDateTime publishedAt, 
     OffsetDateTime updatedAt, 
     OffsetDateTime withdrawnAt
  ) {
    this();
    this.ghsaId = ghsaId;
    this.cveId = cveId;
    this.summary = summary;
    this.description = description;
    this.vulnerabilities = vulnerabilities;
    this.severity = severity;
    this.cwes = cwes;
    this.identifiers = identifiers;
    this.references = references;
    this.publishedAt = publishedAt;
    this.updatedAt = updatedAt;
    this.withdrawnAt = withdrawnAt;
  }

   /**
   * The unique GitHub Security Advisory ID assigned to the advisory.
   * @return ghsaId
  **/
  @javax.annotation.Nonnull

  public String getGhsaId() {
    return ghsaId;
  }




   /**
   * The unique CVE ID assigned to the advisory.
   * @return cveId
  **/
  @javax.annotation.Nullable

  public String getCveId() {
    return cveId;
  }




   /**
   * A short, plain text summary of the advisory.
   * @return summary
  **/
  @javax.annotation.Nonnull

  public String getSummary() {
    return summary;
  }




   /**
   * A long-form Markdown-supported description of the advisory.
   * @return description
  **/
  @javax.annotation.Nonnull

  public String getDescription() {
    return description;
  }




   /**
   * Vulnerable version range information for the advisory.
   * @return vulnerabilities
  **/
  @javax.annotation.Nonnull

  public List<DependabotAlertSecurityVulnerability> getVulnerabilities() {
    return vulnerabilities;
  }




   /**
   * The severity of the advisory.
   * @return severity
  **/
  @javax.annotation.Nonnull

  public SeverityEnum getSeverity() {
    return severity;
  }




  public DependabotAlertSecurityAdvisory cvss(DependabotAlertSecurityAdvisoryCvss cvss) {
    
    this.cvss = cvss;
    return this;
  }

   /**
   * Get cvss
   * @return cvss
  **/
  @javax.annotation.Nonnull

  public DependabotAlertSecurityAdvisoryCvss getCvss() {
    return cvss;
  }


  public void setCvss(DependabotAlertSecurityAdvisoryCvss cvss) {
    this.cvss = cvss;
  }


   /**
   * Details for the advisory pertaining to Common Weakness Enumeration.
   * @return cwes
  **/
  @javax.annotation.Nonnull

  public List<DependabotAlertSecurityAdvisoryCwesInner> getCwes() {
    return cwes;
  }




   /**
   * Values that identify this advisory among security information sources.
   * @return identifiers
  **/
  @javax.annotation.Nonnull

  public List<DependabotAlertSecurityAdvisoryIdentifiersInner> getIdentifiers() {
    return identifiers;
  }




   /**
   * Links to additional advisory information.
   * @return references
  **/
  @javax.annotation.Nonnull

  public List<DependabotAlertSecurityAdvisoryReferencesInner> getReferences() {
    return references;
  }




   /**
   * The time that the advisory was published in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return publishedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }




   /**
   * The time that the advisory was last modified in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




   /**
   * The time that the advisory was withdrawn in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return withdrawnAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getWithdrawnAt() {
    return withdrawnAt;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependabotAlertSecurityAdvisory dependabotAlertSecurityAdvisory = (DependabotAlertSecurityAdvisory) o;
    return Objects.equals(this.ghsaId, dependabotAlertSecurityAdvisory.ghsaId) &&
        Objects.equals(this.cveId, dependabotAlertSecurityAdvisory.cveId) &&
        Objects.equals(this.summary, dependabotAlertSecurityAdvisory.summary) &&
        Objects.equals(this.description, dependabotAlertSecurityAdvisory.description) &&
        Objects.equals(this.vulnerabilities, dependabotAlertSecurityAdvisory.vulnerabilities) &&
        Objects.equals(this.severity, dependabotAlertSecurityAdvisory.severity) &&
        Objects.equals(this.cvss, dependabotAlertSecurityAdvisory.cvss) &&
        Objects.equals(this.cwes, dependabotAlertSecurityAdvisory.cwes) &&
        Objects.equals(this.identifiers, dependabotAlertSecurityAdvisory.identifiers) &&
        Objects.equals(this.references, dependabotAlertSecurityAdvisory.references) &&
        Objects.equals(this.publishedAt, dependabotAlertSecurityAdvisory.publishedAt) &&
        Objects.equals(this.updatedAt, dependabotAlertSecurityAdvisory.updatedAt) &&
        Objects.equals(this.withdrawnAt, dependabotAlertSecurityAdvisory.withdrawnAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ghsaId, cveId, summary, description, vulnerabilities, severity, cvss, cwes, identifiers, references, publishedAt, updatedAt, withdrawnAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependabotAlertSecurityAdvisory {\n");
    sb.append("    ghsaId: ").append(toIndentedString(ghsaId)).append("\n");
    sb.append("    cveId: ").append(toIndentedString(cveId)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    vulnerabilities: ").append(toIndentedString(vulnerabilities)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    cvss: ").append(toIndentedString(cvss)).append("\n");
    sb.append("    cwes: ").append(toIndentedString(cwes)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    withdrawnAt: ").append(toIndentedString(withdrawnAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ghsa_id");
    openapiFields.add("cve_id");
    openapiFields.add("summary");
    openapiFields.add("description");
    openapiFields.add("vulnerabilities");
    openapiFields.add("severity");
    openapiFields.add("cvss");
    openapiFields.add("cwes");
    openapiFields.add("identifiers");
    openapiFields.add("references");
    openapiFields.add("published_at");
    openapiFields.add("updated_at");
    openapiFields.add("withdrawn_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ghsa_id");
    openapiRequiredFields.add("cve_id");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("vulnerabilities");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("cvss");
    openapiRequiredFields.add("cwes");
    openapiRequiredFields.add("identifiers");
    openapiRequiredFields.add("references");
    openapiRequiredFields.add("published_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("withdrawn_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DependabotAlertSecurityAdvisory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DependabotAlertSecurityAdvisory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DependabotAlertSecurityAdvisory is not found in the empty JSON string", DependabotAlertSecurityAdvisory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DependabotAlertSecurityAdvisory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DependabotAlertSecurityAdvisory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DependabotAlertSecurityAdvisory.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ghsa_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ghsa_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ghsa_id").toString()));
      }
      if (!jsonObj.get("cve_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cve_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cve_id").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilities` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilities").toString()));
      }

      JsonArray jsonArrayvulnerabilities = jsonObj.getAsJsonArray("vulnerabilities");
      // validate the required field `vulnerabilities` (array)
      for (int i = 0; i < jsonArrayvulnerabilities.size(); i++) {
        DependabotAlertSecurityVulnerability.validateJsonObject(jsonArrayvulnerabilities.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `cvss`
      DependabotAlertSecurityAdvisoryCvss.validateJsonObject(jsonObj.getAsJsonObject("cvss"));
      // ensure the json data is an array
      if (!jsonObj.get("cwes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cwes` to be an array in the JSON string but got `%s`", jsonObj.get("cwes").toString()));
      }

      JsonArray jsonArraycwes = jsonObj.getAsJsonArray("cwes");
      // validate the required field `cwes` (array)
      for (int i = 0; i < jsonArraycwes.size(); i++) {
        DependabotAlertSecurityAdvisoryCwesInner.validateJsonObject(jsonArraycwes.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }

      JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
      // validate the required field `identifiers` (array)
      for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
        DependabotAlertSecurityAdvisoryIdentifiersInner.validateJsonObject(jsonArrayidentifiers.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("references").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }

      JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
      // validate the required field `references` (array)
      for (int i = 0; i < jsonArrayreferences.size(); i++) {
        DependabotAlertSecurityAdvisoryReferencesInner.validateJsonObject(jsonArrayreferences.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DependabotAlertSecurityAdvisory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DependabotAlertSecurityAdvisory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DependabotAlertSecurityAdvisory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DependabotAlertSecurityAdvisory.class));

       return (TypeAdapter<T>) new TypeAdapter<DependabotAlertSecurityAdvisory>() {
           @Override
           public void write(JsonWriter out, DependabotAlertSecurityAdvisory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DependabotAlertSecurityAdvisory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DependabotAlertSecurityAdvisory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DependabotAlertSecurityAdvisory
  * @throws IOException if the JSON string is invalid with respect to DependabotAlertSecurityAdvisory
  */
  public static DependabotAlertSecurityAdvisory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DependabotAlertSecurityAdvisory.class);
  }

 /**
  * Convert an instance of DependabotAlertSecurityAdvisory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

