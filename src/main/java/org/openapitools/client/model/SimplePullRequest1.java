/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.PullRequestAutoMerge;
import org.openapitools.client.model.PullRequestLinks;
import org.openapitools.client.model.PullRequestRequestedReviewersInner;
import org.openapitools.client.model.SimplePullRequest1Base;
import org.openapitools.client.model.SimplePullRequest1Head;
import org.openapitools.client.model.Team2;
import org.openapitools.client.model.User1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimplePullRequest1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class SimplePullRequest1 {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PullRequestLinks links;

  /**
   * Gets or Sets activeLockReason
   */
  @JsonAdapter(ActiveLockReasonEnum.Adapter.class)
  public enum ActiveLockReasonEnum {
    RESOLVED("resolved"),
    
    OFF_TOPIC("off-topic"),
    
    TOO_HEATED("too heated"),
    
    SPAM("spam"),
    
    NULL("null");

    private String value;

    ActiveLockReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveLockReasonEnum fromValue(String value) {
      for (ActiveLockReasonEnum b : ActiveLockReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActiveLockReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveLockReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveLockReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveLockReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_LOCK_REASON = "active_lock_reason";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCK_REASON)
  private ActiveLockReasonEnum activeLockReason;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private User1 assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<User1> assignees = new ArrayList<>();

  /**
   * How the author is associated with the repository.
   */
  @JsonAdapter(AuthorAssociationEnum.Adapter.class)
  public enum AuthorAssociationEnum {
    COLLABORATOR("COLLABORATOR"),
    
    CONTRIBUTOR("CONTRIBUTOR"),
    
    FIRST_TIMER("FIRST_TIMER"),
    
    FIRST_TIME_CONTRIBUTOR("FIRST_TIME_CONTRIBUTOR"),
    
    MANNEQUIN("MANNEQUIN"),
    
    MEMBER("MEMBER"),
    
    NONE("NONE"),
    
    OWNER("OWNER");

    private String value;

    AuthorAssociationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorAssociationEnum fromValue(String value) {
      for (AuthorAssociationEnum b : AuthorAssociationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorAssociationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorAssociationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorAssociationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorAssociationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociationEnum authorAssociation;

  public static final String SERIALIZED_NAME_AUTO_MERGE = "auto_merge";
  @SerializedName(SERIALIZED_NAME_AUTO_MERGE)
  private PullRequestAutoMerge autoMerge;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private SimplePullRequest1Base base;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private String closedAt;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private URI commitsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private URI diffUrl;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private SimplePullRequest1Head head;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISSUE_URL = "issue_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_URL)
  private URI issueUrl;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_MERGED_AT = "merged_at";
  @SerializedName(SERIALIZED_NAME_MERGED_AT)
  private String mergedAt;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private Milestone milestone;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private URI patchUrl;

  public static final String SERIALIZED_NAME_REQUESTED_REVIEWERS = "requested_reviewers";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REVIEWERS)
  private List<PullRequestRequestedReviewersInner> requestedReviewers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTED_TEAMS = "requested_teams";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TEAMS)
  private List<Team2> requestedTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_COMMENT_URL = "review_comment_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENT_URL)
  private String reviewCommentUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS_URL = "review_comments_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS_URL)
  private URI reviewCommentsUrl;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("open"),
    
    CLOSED("closed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private URI statusesUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User1 user;

  public SimplePullRequest1() {
  }

  public SimplePullRequest1 links(PullRequestLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull

  public PullRequestLinks getLinks() {
    return links;
  }


  public void setLinks(PullRequestLinks links) {
    this.links = links;
  }


  public SimplePullRequest1 activeLockReason(ActiveLockReasonEnum activeLockReason) {
    
    this.activeLockReason = activeLockReason;
    return this;
  }

   /**
   * Get activeLockReason
   * @return activeLockReason
  **/
  @javax.annotation.Nullable

  public ActiveLockReasonEnum getActiveLockReason() {
    return activeLockReason;
  }


  public void setActiveLockReason(ActiveLockReasonEnum activeLockReason) {
    this.activeLockReason = activeLockReason;
  }


  public SimplePullRequest1 assignee(User1 assignee) {
    
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @javax.annotation.Nullable

  public User1 getAssignee() {
    return assignee;
  }


  public void setAssignee(User1 assignee) {
    this.assignee = assignee;
  }


  public SimplePullRequest1 assignees(List<User1> assignees) {
    
    this.assignees = assignees;
    return this;
  }

  public SimplePullRequest1 addAssigneesItem(User1 assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

   /**
   * Get assignees
   * @return assignees
  **/
  @javax.annotation.Nonnull

  public List<User1> getAssignees() {
    return assignees;
  }


  public void setAssignees(List<User1> assignees) {
    this.assignees = assignees;
  }


  public SimplePullRequest1 authorAssociation(AuthorAssociationEnum authorAssociation) {
    
    this.authorAssociation = authorAssociation;
    return this;
  }

   /**
   * How the author is associated with the repository.
   * @return authorAssociation
  **/
  @javax.annotation.Nonnull

  public AuthorAssociationEnum getAuthorAssociation() {
    return authorAssociation;
  }


  public void setAuthorAssociation(AuthorAssociationEnum authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public SimplePullRequest1 autoMerge(PullRequestAutoMerge autoMerge) {
    
    this.autoMerge = autoMerge;
    return this;
  }

   /**
   * Get autoMerge
   * @return autoMerge
  **/
  @javax.annotation.Nullable

  public PullRequestAutoMerge getAutoMerge() {
    return autoMerge;
  }


  public void setAutoMerge(PullRequestAutoMerge autoMerge) {
    this.autoMerge = autoMerge;
  }


  public SimplePullRequest1 base(SimplePullRequest1Base base) {
    
    this.base = base;
    return this;
  }

   /**
   * Get base
   * @return base
  **/
  @javax.annotation.Nonnull

  public SimplePullRequest1Base getBase() {
    return base;
  }


  public void setBase(SimplePullRequest1Base base) {
    this.base = base;
  }


  public SimplePullRequest1 body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public SimplePullRequest1 closedAt(String closedAt) {
    
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Get closedAt
   * @return closedAt
  **/
  @javax.annotation.Nullable

  public String getClosedAt() {
    return closedAt;
  }


  public void setClosedAt(String closedAt) {
    this.closedAt = closedAt;
  }


  public SimplePullRequest1 commentsUrl(URI commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public SimplePullRequest1 commitsUrl(URI commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public SimplePullRequest1 createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public SimplePullRequest1 diffUrl(URI diffUrl) {
    
    this.diffUrl = diffUrl;
    return this;
  }

   /**
   * Get diffUrl
   * @return diffUrl
  **/
  @javax.annotation.Nonnull

  public URI getDiffUrl() {
    return diffUrl;
  }


  public void setDiffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
  }


  public SimplePullRequest1 draft(Boolean draft) {
    
    this.draft = draft;
    return this;
  }

   /**
   * Get draft
   * @return draft
  **/
  @javax.annotation.Nonnull

  public Boolean getDraft() {
    return draft;
  }


  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public SimplePullRequest1 head(SimplePullRequest1Head head) {
    
    this.head = head;
    return this;
  }

   /**
   * Get head
   * @return head
  **/
  @javax.annotation.Nonnull

  public SimplePullRequest1Head getHead() {
    return head;
  }


  public void setHead(SimplePullRequest1Head head) {
    this.head = head;
  }


  public SimplePullRequest1 htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public SimplePullRequest1 id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public SimplePullRequest1 issueUrl(URI issueUrl) {
    
    this.issueUrl = issueUrl;
    return this;
  }

   /**
   * Get issueUrl
   * @return issueUrl
  **/
  @javax.annotation.Nonnull

  public URI getIssueUrl() {
    return issueUrl;
  }


  public void setIssueUrl(URI issueUrl) {
    this.issueUrl = issueUrl;
  }


  public SimplePullRequest1 labels(List<Label> labels) {
    
    this.labels = labels;
    return this;
  }

  public SimplePullRequest1 addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nonnull

  public List<Label> getLabels() {
    return labels;
  }


  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }


  public SimplePullRequest1 locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nonnull

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public SimplePullRequest1 mergeCommitSha(String mergeCommitSha) {
    
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

   /**
   * Get mergeCommitSha
   * @return mergeCommitSha
  **/
  @javax.annotation.Nullable

  public String getMergeCommitSha() {
    return mergeCommitSha;
  }


  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public SimplePullRequest1 mergedAt(String mergedAt) {
    
    this.mergedAt = mergedAt;
    return this;
  }

   /**
   * Get mergedAt
   * @return mergedAt
  **/
  @javax.annotation.Nullable

  public String getMergedAt() {
    return mergedAt;
  }


  public void setMergedAt(String mergedAt) {
    this.mergedAt = mergedAt;
  }


  public SimplePullRequest1 milestone(Milestone milestone) {
    
    this.milestone = milestone;
    return this;
  }

   /**
   * Get milestone
   * @return milestone
  **/
  @javax.annotation.Nullable

  public Milestone getMilestone() {
    return milestone;
  }


  public void setMilestone(Milestone milestone) {
    this.milestone = milestone;
  }


  public SimplePullRequest1 nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public SimplePullRequest1 number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public SimplePullRequest1 patchUrl(URI patchUrl) {
    
    this.patchUrl = patchUrl;
    return this;
  }

   /**
   * Get patchUrl
   * @return patchUrl
  **/
  @javax.annotation.Nonnull

  public URI getPatchUrl() {
    return patchUrl;
  }


  public void setPatchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
  }


  public SimplePullRequest1 requestedReviewers(List<PullRequestRequestedReviewersInner> requestedReviewers) {
    
    this.requestedReviewers = requestedReviewers;
    return this;
  }

  public SimplePullRequest1 addRequestedReviewersItem(PullRequestRequestedReviewersInner requestedReviewersItem) {
    if (this.requestedReviewers == null) {
      this.requestedReviewers = new ArrayList<>();
    }
    this.requestedReviewers.add(requestedReviewersItem);
    return this;
  }

   /**
   * Get requestedReviewers
   * @return requestedReviewers
  **/
  @javax.annotation.Nonnull

  public List<PullRequestRequestedReviewersInner> getRequestedReviewers() {
    return requestedReviewers;
  }


  public void setRequestedReviewers(List<PullRequestRequestedReviewersInner> requestedReviewers) {
    this.requestedReviewers = requestedReviewers;
  }


  public SimplePullRequest1 requestedTeams(List<Team2> requestedTeams) {
    
    this.requestedTeams = requestedTeams;
    return this;
  }

  public SimplePullRequest1 addRequestedTeamsItem(Team2 requestedTeamsItem) {
    if (this.requestedTeams == null) {
      this.requestedTeams = new ArrayList<>();
    }
    this.requestedTeams.add(requestedTeamsItem);
    return this;
  }

   /**
   * Get requestedTeams
   * @return requestedTeams
  **/
  @javax.annotation.Nonnull

  public List<Team2> getRequestedTeams() {
    return requestedTeams;
  }


  public void setRequestedTeams(List<Team2> requestedTeams) {
    this.requestedTeams = requestedTeams;
  }


  public SimplePullRequest1 reviewCommentUrl(String reviewCommentUrl) {
    
    this.reviewCommentUrl = reviewCommentUrl;
    return this;
  }

   /**
   * Get reviewCommentUrl
   * @return reviewCommentUrl
  **/
  @javax.annotation.Nonnull

  public String getReviewCommentUrl() {
    return reviewCommentUrl;
  }


  public void setReviewCommentUrl(String reviewCommentUrl) {
    this.reviewCommentUrl = reviewCommentUrl;
  }


  public SimplePullRequest1 reviewCommentsUrl(URI reviewCommentsUrl) {
    
    this.reviewCommentsUrl = reviewCommentsUrl;
    return this;
  }

   /**
   * Get reviewCommentsUrl
   * @return reviewCommentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getReviewCommentsUrl() {
    return reviewCommentsUrl;
  }


  public void setReviewCommentsUrl(URI reviewCommentsUrl) {
    this.reviewCommentsUrl = reviewCommentsUrl;
  }


  public SimplePullRequest1 state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public SimplePullRequest1 statusesUrl(URI statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nonnull

  public URI getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public SimplePullRequest1 title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public SimplePullRequest1 updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public SimplePullRequest1 url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public SimplePullRequest1 user(User1 user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public User1 getUser() {
    return user;
  }


  public void setUser(User1 user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplePullRequest1 simplePullRequest1 = (SimplePullRequest1) o;
    return Objects.equals(this.links, simplePullRequest1.links) &&
        Objects.equals(this.activeLockReason, simplePullRequest1.activeLockReason) &&
        Objects.equals(this.assignee, simplePullRequest1.assignee) &&
        Objects.equals(this.assignees, simplePullRequest1.assignees) &&
        Objects.equals(this.authorAssociation, simplePullRequest1.authorAssociation) &&
        Objects.equals(this.autoMerge, simplePullRequest1.autoMerge) &&
        Objects.equals(this.base, simplePullRequest1.base) &&
        Objects.equals(this.body, simplePullRequest1.body) &&
        Objects.equals(this.closedAt, simplePullRequest1.closedAt) &&
        Objects.equals(this.commentsUrl, simplePullRequest1.commentsUrl) &&
        Objects.equals(this.commitsUrl, simplePullRequest1.commitsUrl) &&
        Objects.equals(this.createdAt, simplePullRequest1.createdAt) &&
        Objects.equals(this.diffUrl, simplePullRequest1.diffUrl) &&
        Objects.equals(this.draft, simplePullRequest1.draft) &&
        Objects.equals(this.head, simplePullRequest1.head) &&
        Objects.equals(this.htmlUrl, simplePullRequest1.htmlUrl) &&
        Objects.equals(this.id, simplePullRequest1.id) &&
        Objects.equals(this.issueUrl, simplePullRequest1.issueUrl) &&
        Objects.equals(this.labels, simplePullRequest1.labels) &&
        Objects.equals(this.locked, simplePullRequest1.locked) &&
        Objects.equals(this.mergeCommitSha, simplePullRequest1.mergeCommitSha) &&
        Objects.equals(this.mergedAt, simplePullRequest1.mergedAt) &&
        Objects.equals(this.milestone, simplePullRequest1.milestone) &&
        Objects.equals(this.nodeId, simplePullRequest1.nodeId) &&
        Objects.equals(this.number, simplePullRequest1.number) &&
        Objects.equals(this.patchUrl, simplePullRequest1.patchUrl) &&
        Objects.equals(this.requestedReviewers, simplePullRequest1.requestedReviewers) &&
        Objects.equals(this.requestedTeams, simplePullRequest1.requestedTeams) &&
        Objects.equals(this.reviewCommentUrl, simplePullRequest1.reviewCommentUrl) &&
        Objects.equals(this.reviewCommentsUrl, simplePullRequest1.reviewCommentsUrl) &&
        Objects.equals(this.state, simplePullRequest1.state) &&
        Objects.equals(this.statusesUrl, simplePullRequest1.statusesUrl) &&
        Objects.equals(this.title, simplePullRequest1.title) &&
        Objects.equals(this.updatedAt, simplePullRequest1.updatedAt) &&
        Objects.equals(this.url, simplePullRequest1.url) &&
        Objects.equals(this.user, simplePullRequest1.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, activeLockReason, assignee, assignees, authorAssociation, autoMerge, base, body, closedAt, commentsUrl, commitsUrl, createdAt, diffUrl, draft, head, htmlUrl, id, issueUrl, labels, locked, mergeCommitSha, mergedAt, milestone, nodeId, number, patchUrl, requestedReviewers, requestedTeams, reviewCommentUrl, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplePullRequest1 {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    activeLockReason: ").append(toIndentedString(activeLockReason)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    autoMerge: ").append(toIndentedString(autoMerge)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    mergedAt: ").append(toIndentedString(mergedAt)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    requestedReviewers: ").append(toIndentedString(requestedReviewers)).append("\n");
    sb.append("    requestedTeams: ").append(toIndentedString(requestedTeams)).append("\n");
    sb.append("    reviewCommentUrl: ").append(toIndentedString(reviewCommentUrl)).append("\n");
    sb.append("    reviewCommentsUrl: ").append(toIndentedString(reviewCommentsUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("active_lock_reason");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("author_association");
    openapiFields.add("auto_merge");
    openapiFields.add("base");
    openapiFields.add("body");
    openapiFields.add("closed_at");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("created_at");
    openapiFields.add("diff_url");
    openapiFields.add("draft");
    openapiFields.add("head");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("issue_url");
    openapiFields.add("labels");
    openapiFields.add("locked");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("merged_at");
    openapiFields.add("milestone");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("patch_url");
    openapiFields.add("requested_reviewers");
    openapiFields.add("requested_teams");
    openapiFields.add("review_comment_url");
    openapiFields.add("review_comments_url");
    openapiFields.add("state");
    openapiFields.add("statuses_url");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("active_lock_reason");
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("assignees");
    openapiRequiredFields.add("author_association");
    openapiRequiredFields.add("auto_merge");
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("diff_url");
    openapiRequiredFields.add("draft");
    openapiRequiredFields.add("head");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issue_url");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("merge_commit_sha");
    openapiRequiredFields.add("merged_at");
    openapiRequiredFields.add("milestone");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("patch_url");
    openapiRequiredFields.add("requested_reviewers");
    openapiRequiredFields.add("requested_teams");
    openapiRequiredFields.add("review_comment_url");
    openapiRequiredFields.add("review_comments_url");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimplePullRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimplePullRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimplePullRequest1 is not found in the empty JSON string", SimplePullRequest1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SimplePullRequest1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimplePullRequest1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimplePullRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `_links`
      PullRequestLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      if (!jsonObj.get("active_lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_lock_reason").toString()));
      }
      // validate the required field `assignee`
      User1.validateJsonObject(jsonObj.getAsJsonObject("assignee"));
      // ensure the json data is an array
      if (!jsonObj.get("assignees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
      }

      JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
      // validate the required field `assignees` (array)
      for (int i = 0; i < jsonArrayassignees.size(); i++) {
        User1.validateJsonObject(jsonArrayassignees.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("author_association").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_association` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_association").toString()));
      }
      // validate the required field `auto_merge`
      PullRequestAutoMerge.validateJsonObject(jsonObj.getAsJsonObject("auto_merge"));
      // validate the required field `base`
      SimplePullRequest1Base.validateJsonObject(jsonObj.getAsJsonObject("base"));
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("closed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_at").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      // validate the required field `head`
      SimplePullRequest1Head.validateJsonObject(jsonObj.getAsJsonObject("head"));
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        Label.validateJsonObject(jsonArraylabels.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      if (!jsonObj.get("merged_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merged_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merged_at").toString()));
      }
      // validate the required field `milestone`
      Milestone.validateJsonObject(jsonObj.getAsJsonObject("milestone"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("requested_reviewers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requested_reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("requested_reviewers").toString()));
      }

      JsonArray jsonArrayrequestedReviewers = jsonObj.getAsJsonArray("requested_reviewers");
      // validate the required field `requested_reviewers` (array)
      for (int i = 0; i < jsonArrayrequestedReviewers.size(); i++) {
        PullRequestRequestedReviewersInner.validateJsonObject(jsonArrayrequestedReviewers.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("requested_teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requested_teams` to be an array in the JSON string but got `%s`", jsonObj.get("requested_teams").toString()));
      }

      JsonArray jsonArrayrequestedTeams = jsonObj.getAsJsonArray("requested_teams");
      // validate the required field `requested_teams` (array)
      for (int i = 0; i < jsonArrayrequestedTeams.size(); i++) {
        Team2.validateJsonObject(jsonArrayrequestedTeams.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("review_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comment_url").toString()));
      }
      if (!jsonObj.get("review_comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comments_url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      User1.validateJsonObject(jsonObj.getAsJsonObject("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimplePullRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimplePullRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimplePullRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimplePullRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<SimplePullRequest1>() {
           @Override
           public void write(JsonWriter out, SimplePullRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimplePullRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimplePullRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimplePullRequest1
  * @throws IOException if the JSON string is invalid with respect to SimplePullRequest1
  */
  public static SimplePullRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimplePullRequest1.class);
  }

 /**
  * Convert an instance of SimplePullRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

