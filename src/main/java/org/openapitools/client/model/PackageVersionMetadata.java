/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ContainerMetadata;
import org.openapitools.client.model.DockerMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PackageVersionMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class PackageVersionMetadata {
  /**
   * Gets or Sets packageType
   */
  @JsonAdapter(PackageTypeEnum.Adapter.class)
  public enum PackageTypeEnum {
    NPM("npm"),
    
    MAVEN("maven"),
    
    RUBYGEMS("rubygems"),
    
    DOCKER("docker"),
    
    NUGET("nuget"),
    
    CONTAINER("container");

    private String value;

    PackageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageTypeEnum fromValue(String value) {
      for (PackageTypeEnum b : PackageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "package_type";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private PackageTypeEnum packageType;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private ContainerMetadata container;

  public static final String SERIALIZED_NAME_DOCKER = "docker";
  @SerializedName(SERIALIZED_NAME_DOCKER)
  private DockerMetadata docker;

  public PackageVersionMetadata() {
  }

  public PackageVersionMetadata packageType(PackageTypeEnum packageType) {
    
    this.packageType = packageType;
    return this;
  }

   /**
   * Get packageType
   * @return packageType
  **/
  @javax.annotation.Nonnull

  public PackageTypeEnum getPackageType() {
    return packageType;
  }


  public void setPackageType(PackageTypeEnum packageType) {
    this.packageType = packageType;
  }


  public PackageVersionMetadata container(ContainerMetadata container) {
    
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable

  public ContainerMetadata getContainer() {
    return container;
  }


  public void setContainer(ContainerMetadata container) {
    this.container = container;
  }


  public PackageVersionMetadata docker(DockerMetadata docker) {
    
    this.docker = docker;
    return this;
  }

   /**
   * Get docker
   * @return docker
  **/
  @javax.annotation.Nullable

  public DockerMetadata getDocker() {
    return docker;
  }


  public void setDocker(DockerMetadata docker) {
    this.docker = docker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageVersionMetadata packageVersionMetadata = (PackageVersionMetadata) o;
    return Objects.equals(this.packageType, packageVersionMetadata.packageType) &&
        Objects.equals(this.container, packageVersionMetadata.container) &&
        Objects.equals(this.docker, packageVersionMetadata.docker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageType, container, docker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageVersionMetadata {\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    docker: ").append(toIndentedString(docker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("package_type");
    openapiFields.add("container");
    openapiFields.add("docker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("package_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PackageVersionMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PackageVersionMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PackageVersionMetadata is not found in the empty JSON string", PackageVersionMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PackageVersionMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PackageVersionMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PackageVersionMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("package_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_type").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        ContainerMetadata.validateJsonObject(jsonObj.getAsJsonObject("container"));
      }
      // validate the optional field `docker`
      if (jsonObj.get("docker") != null && !jsonObj.get("docker").isJsonNull()) {
        DockerMetadata.validateJsonObject(jsonObj.getAsJsonObject("docker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PackageVersionMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PackageVersionMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PackageVersionMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PackageVersionMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<PackageVersionMetadata>() {
           @Override
           public void write(JsonWriter out, PackageVersionMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PackageVersionMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PackageVersionMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PackageVersionMetadata
  * @throws IOException if the JSON string is invalid with respect to PackageVersionMetadata
  */
  public static PackageVersionMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PackageVersionMetadata.class);
  }

 /**
  * Convert an instance of PackageVersionMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

