/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CheckRun;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChecksListForSuite200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ChecksListForSuite200Response {
  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public static final String SERIALIZED_NAME_CHECK_RUNS = "check_runs";
  @SerializedName(SERIALIZED_NAME_CHECK_RUNS)
  private List<CheckRun> checkRuns = new ArrayList<>();

  public ChecksListForSuite200Response() {
  }

  public ChecksListForSuite200Response totalCount(Integer totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Get totalCount
   * @return totalCount
  **/
  @javax.annotation.Nonnull

  public Integer getTotalCount() {
    return totalCount;
  }


  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public ChecksListForSuite200Response checkRuns(List<CheckRun> checkRuns) {
    
    this.checkRuns = checkRuns;
    return this;
  }

  public ChecksListForSuite200Response addCheckRunsItem(CheckRun checkRunsItem) {
    if (this.checkRuns == null) {
      this.checkRuns = new ArrayList<>();
    }
    this.checkRuns.add(checkRunsItem);
    return this;
  }

   /**
   * Get checkRuns
   * @return checkRuns
  **/
  @javax.annotation.Nonnull

  public List<CheckRun> getCheckRuns() {
    return checkRuns;
  }


  public void setCheckRuns(List<CheckRun> checkRuns) {
    this.checkRuns = checkRuns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChecksListForSuite200Response checksListForSuite200Response = (ChecksListForSuite200Response) o;
    return Objects.equals(this.totalCount, checksListForSuite200Response.totalCount) &&
        Objects.equals(this.checkRuns, checksListForSuite200Response.checkRuns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCount, checkRuns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChecksListForSuite200Response {\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    checkRuns: ").append(toIndentedString(checkRuns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_count");
    openapiFields.add("check_runs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total_count");
    openapiRequiredFields.add("check_runs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChecksListForSuite200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChecksListForSuite200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChecksListForSuite200Response is not found in the empty JSON string", ChecksListForSuite200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChecksListForSuite200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChecksListForSuite200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChecksListForSuite200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("check_runs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_runs` to be an array in the JSON string but got `%s`", jsonObj.get("check_runs").toString()));
      }

      JsonArray jsonArraycheckRuns = jsonObj.getAsJsonArray("check_runs");
      // validate the required field `check_runs` (array)
      for (int i = 0; i < jsonArraycheckRuns.size(); i++) {
        CheckRun.validateJsonObject(jsonArraycheckRuns.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChecksListForSuite200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChecksListForSuite200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChecksListForSuite200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChecksListForSuite200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ChecksListForSuite200Response>() {
           @Override
           public void write(JsonWriter out, ChecksListForSuite200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChecksListForSuite200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChecksListForSuite200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChecksListForSuite200Response
  * @throws IOException if the JSON string is invalid with respect to ChecksListForSuite200Response
  */
  public static ChecksListForSuite200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChecksListForSuite200Response.class);
  }

 /**
  * Convert an instance of ChecksListForSuite200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

