/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AppPermissions;
import org.openapitools.client.model.SimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NullableScopedInstallation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class NullableScopedInstallation {
  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private AppPermissions permissions;

  /**
   * Describe whether all repositories have been selected or there&#39;s a selection involved
   */
  @JsonAdapter(RepositorySelectionEnum.Adapter.class)
  public enum RepositorySelectionEnum {
    ALL("all"),
    
    SELECTED("selected");

    private String value;

    RepositorySelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositorySelectionEnum fromValue(String value) {
      for (RepositorySelectionEnum b : RepositorySelectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositorySelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositorySelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositorySelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositorySelectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_SELECTION = "repository_selection";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SELECTION)
  private RepositorySelectionEnum repositorySelection;

  public static final String SERIALIZED_NAME_SINGLE_FILE_NAME = "single_file_name";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE_NAME)
  private String singleFileName;

  public static final String SERIALIZED_NAME_HAS_MULTIPLE_SINGLE_FILES = "has_multiple_single_files";
  @SerializedName(SERIALIZED_NAME_HAS_MULTIPLE_SINGLE_FILES)
  private Boolean hasMultipleSingleFiles;

  public static final String SERIALIZED_NAME_SINGLE_FILE_PATHS = "single_file_paths";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE_PATHS)
  private List<String> singleFilePaths;

  public static final String SERIALIZED_NAME_REPOSITORIES_URL = "repositories_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES_URL)
  private URI repositoriesUrl;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private SimpleUser account;

  public NullableScopedInstallation() {
  }

  public NullableScopedInstallation permissions(AppPermissions permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull

  public AppPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(AppPermissions permissions) {
    this.permissions = permissions;
  }


  public NullableScopedInstallation repositorySelection(RepositorySelectionEnum repositorySelection) {
    
    this.repositorySelection = repositorySelection;
    return this;
  }

   /**
   * Describe whether all repositories have been selected or there&#39;s a selection involved
   * @return repositorySelection
  **/
  @javax.annotation.Nonnull

  public RepositorySelectionEnum getRepositorySelection() {
    return repositorySelection;
  }


  public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
    this.repositorySelection = repositorySelection;
  }


  public NullableScopedInstallation singleFileName(String singleFileName) {
    
    this.singleFileName = singleFileName;
    return this;
  }

   /**
   * Get singleFileName
   * @return singleFileName
  **/
  @javax.annotation.Nullable

  public String getSingleFileName() {
    return singleFileName;
  }


  public void setSingleFileName(String singleFileName) {
    this.singleFileName = singleFileName;
  }


  public NullableScopedInstallation hasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
    
    this.hasMultipleSingleFiles = hasMultipleSingleFiles;
    return this;
  }

   /**
   * Get hasMultipleSingleFiles
   * @return hasMultipleSingleFiles
  **/
  @javax.annotation.Nullable

  public Boolean getHasMultipleSingleFiles() {
    return hasMultipleSingleFiles;
  }


  public void setHasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
    this.hasMultipleSingleFiles = hasMultipleSingleFiles;
  }


  public NullableScopedInstallation singleFilePaths(List<String> singleFilePaths) {
    
    this.singleFilePaths = singleFilePaths;
    return this;
  }

  public NullableScopedInstallation addSingleFilePathsItem(String singleFilePathsItem) {
    if (this.singleFilePaths == null) {
      this.singleFilePaths = new ArrayList<>();
    }
    this.singleFilePaths.add(singleFilePathsItem);
    return this;
  }

   /**
   * Get singleFilePaths
   * @return singleFilePaths
  **/
  @javax.annotation.Nullable

  public List<String> getSingleFilePaths() {
    return singleFilePaths;
  }


  public void setSingleFilePaths(List<String> singleFilePaths) {
    this.singleFilePaths = singleFilePaths;
  }


  public NullableScopedInstallation repositoriesUrl(URI repositoriesUrl) {
    
    this.repositoriesUrl = repositoriesUrl;
    return this;
  }

   /**
   * Get repositoriesUrl
   * @return repositoriesUrl
  **/
  @javax.annotation.Nonnull

  public URI getRepositoriesUrl() {
    return repositoriesUrl;
  }


  public void setRepositoriesUrl(URI repositoriesUrl) {
    this.repositoriesUrl = repositoriesUrl;
  }


  public NullableScopedInstallation account(SimpleUser account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull

  public SimpleUser getAccount() {
    return account;
  }


  public void setAccount(SimpleUser account) {
    this.account = account;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NullableScopedInstallation nullableScopedInstallation = (NullableScopedInstallation) o;
    return Objects.equals(this.permissions, nullableScopedInstallation.permissions) &&
        Objects.equals(this.repositorySelection, nullableScopedInstallation.repositorySelection) &&
        Objects.equals(this.singleFileName, nullableScopedInstallation.singleFileName) &&
        Objects.equals(this.hasMultipleSingleFiles, nullableScopedInstallation.hasMultipleSingleFiles) &&
        Objects.equals(this.singleFilePaths, nullableScopedInstallation.singleFilePaths) &&
        Objects.equals(this.repositoriesUrl, nullableScopedInstallation.repositoriesUrl) &&
        Objects.equals(this.account, nullableScopedInstallation.account);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissions, repositorySelection, singleFileName, hasMultipleSingleFiles, singleFilePaths, repositoriesUrl, account);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NullableScopedInstallation {\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    repositorySelection: ").append(toIndentedString(repositorySelection)).append("\n");
    sb.append("    singleFileName: ").append(toIndentedString(singleFileName)).append("\n");
    sb.append("    hasMultipleSingleFiles: ").append(toIndentedString(hasMultipleSingleFiles)).append("\n");
    sb.append("    singleFilePaths: ").append(toIndentedString(singleFilePaths)).append("\n");
    sb.append("    repositoriesUrl: ").append(toIndentedString(repositoriesUrl)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permissions");
    openapiFields.add("repository_selection");
    openapiFields.add("single_file_name");
    openapiFields.add("has_multiple_single_files");
    openapiFields.add("single_file_paths");
    openapiFields.add("repositories_url");
    openapiFields.add("account");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("repository_selection");
    openapiRequiredFields.add("single_file_name");
    openapiRequiredFields.add("repositories_url");
    openapiRequiredFields.add("account");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NullableScopedInstallation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NullableScopedInstallation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NullableScopedInstallation is not found in the empty JSON string", NullableScopedInstallation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NullableScopedInstallation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NullableScopedInstallation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NullableScopedInstallation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `permissions`
      AppPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      if (!jsonObj.get("repository_selection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_selection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_selection").toString()));
      }
      if (!jsonObj.get("single_file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("single_file_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("single_file_paths") != null && !jsonObj.get("single_file_paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file_paths` to be an array in the JSON string but got `%s`", jsonObj.get("single_file_paths").toString()));
      }
      if (!jsonObj.get("repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositories_url").toString()));
      }
      // validate the required field `account`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("account"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NullableScopedInstallation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NullableScopedInstallation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NullableScopedInstallation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NullableScopedInstallation.class));

       return (TypeAdapter<T>) new TypeAdapter<NullableScopedInstallation>() {
           @Override
           public void write(JsonWriter out, NullableScopedInstallation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NullableScopedInstallation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NullableScopedInstallation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NullableScopedInstallation
  * @throws IOException if the JSON string is invalid with respect to NullableScopedInstallation
  */
  public static NullableScopedInstallation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NullableScopedInstallation.class);
  }

 /**
  * Convert an instance of NullableScopedInstallation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

