/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActionsBillingUsageMinutesUsedBreakdown
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ActionsBillingUsageMinutesUsedBreakdown {
  public static final String SERIALIZED_NAME_U_B_U_N_T_U = "UBUNTU";
  @SerializedName(SERIALIZED_NAME_U_B_U_N_T_U)
  private Integer UBUNTU;

  public static final String SERIALIZED_NAME_M_A_C_O_S = "MACOS";
  @SerializedName(SERIALIZED_NAME_M_A_C_O_S)
  private Integer MACOS;

  public static final String SERIALIZED_NAME_W_I_N_D_O_W_S = "WINDOWS";
  @SerializedName(SERIALIZED_NAME_W_I_N_D_O_W_S)
  private Integer WINDOWS;

  public static final String SERIALIZED_NAME_UBUNTU4_CORE = "ubuntu_4_core";
  @SerializedName(SERIALIZED_NAME_UBUNTU4_CORE)
  private Integer ubuntu4Core;

  public static final String SERIALIZED_NAME_UBUNTU8_CORE = "ubuntu_8_core";
  @SerializedName(SERIALIZED_NAME_UBUNTU8_CORE)
  private Integer ubuntu8Core;

  public static final String SERIALIZED_NAME_UBUNTU16_CORE = "ubuntu_16_core";
  @SerializedName(SERIALIZED_NAME_UBUNTU16_CORE)
  private Integer ubuntu16Core;

  public static final String SERIALIZED_NAME_UBUNTU32_CORE = "ubuntu_32_core";
  @SerializedName(SERIALIZED_NAME_UBUNTU32_CORE)
  private Integer ubuntu32Core;

  public static final String SERIALIZED_NAME_UBUNTU64_CORE = "ubuntu_64_core";
  @SerializedName(SERIALIZED_NAME_UBUNTU64_CORE)
  private Integer ubuntu64Core;

  public static final String SERIALIZED_NAME_WINDOWS4_CORE = "windows_4_core";
  @SerializedName(SERIALIZED_NAME_WINDOWS4_CORE)
  private Integer windows4Core;

  public static final String SERIALIZED_NAME_WINDOWS8_CORE = "windows_8_core";
  @SerializedName(SERIALIZED_NAME_WINDOWS8_CORE)
  private Integer windows8Core;

  public static final String SERIALIZED_NAME_WINDOWS16_CORE = "windows_16_core";
  @SerializedName(SERIALIZED_NAME_WINDOWS16_CORE)
  private Integer windows16Core;

  public static final String SERIALIZED_NAME_WINDOWS32_CORE = "windows_32_core";
  @SerializedName(SERIALIZED_NAME_WINDOWS32_CORE)
  private Integer windows32Core;

  public static final String SERIALIZED_NAME_WINDOWS64_CORE = "windows_64_core";
  @SerializedName(SERIALIZED_NAME_WINDOWS64_CORE)
  private Integer windows64Core;

  public static final String SERIALIZED_NAME_MACOS12_CORE = "macos_12_core";
  @SerializedName(SERIALIZED_NAME_MACOS12_CORE)
  private Integer macos12Core;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public ActionsBillingUsageMinutesUsedBreakdown() {
  }

  public ActionsBillingUsageMinutesUsedBreakdown UBUNTU(Integer UBUNTU) {
    
    this.UBUNTU = UBUNTU;
    return this;
  }

   /**
   * Total minutes used on Ubuntu runner machines.
   * @return UBUNTU
  **/
  @javax.annotation.Nullable

  public Integer getUBUNTU() {
    return UBUNTU;
  }


  public void setUBUNTU(Integer UBUNTU) {
    this.UBUNTU = UBUNTU;
  }


  public ActionsBillingUsageMinutesUsedBreakdown MACOS(Integer MACOS) {
    
    this.MACOS = MACOS;
    return this;
  }

   /**
   * Total minutes used on macOS runner machines.
   * @return MACOS
  **/
  @javax.annotation.Nullable

  public Integer getMACOS() {
    return MACOS;
  }


  public void setMACOS(Integer MACOS) {
    this.MACOS = MACOS;
  }


  public ActionsBillingUsageMinutesUsedBreakdown WINDOWS(Integer WINDOWS) {
    
    this.WINDOWS = WINDOWS;
    return this;
  }

   /**
   * Total minutes used on Windows runner machines.
   * @return WINDOWS
  **/
  @javax.annotation.Nullable

  public Integer getWINDOWS() {
    return WINDOWS;
  }


  public void setWINDOWS(Integer WINDOWS) {
    this.WINDOWS = WINDOWS;
  }


  public ActionsBillingUsageMinutesUsedBreakdown ubuntu4Core(Integer ubuntu4Core) {
    
    this.ubuntu4Core = ubuntu4Core;
    return this;
  }

   /**
   * Total minutes used on Ubuntu 4 core runner machines.
   * @return ubuntu4Core
  **/
  @javax.annotation.Nullable

  public Integer getUbuntu4Core() {
    return ubuntu4Core;
  }


  public void setUbuntu4Core(Integer ubuntu4Core) {
    this.ubuntu4Core = ubuntu4Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown ubuntu8Core(Integer ubuntu8Core) {
    
    this.ubuntu8Core = ubuntu8Core;
    return this;
  }

   /**
   * Total minutes used on Ubuntu 8 core runner machines.
   * @return ubuntu8Core
  **/
  @javax.annotation.Nullable

  public Integer getUbuntu8Core() {
    return ubuntu8Core;
  }


  public void setUbuntu8Core(Integer ubuntu8Core) {
    this.ubuntu8Core = ubuntu8Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown ubuntu16Core(Integer ubuntu16Core) {
    
    this.ubuntu16Core = ubuntu16Core;
    return this;
  }

   /**
   * Total minutes used on Ubuntu 16 core runner machines.
   * @return ubuntu16Core
  **/
  @javax.annotation.Nullable

  public Integer getUbuntu16Core() {
    return ubuntu16Core;
  }


  public void setUbuntu16Core(Integer ubuntu16Core) {
    this.ubuntu16Core = ubuntu16Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown ubuntu32Core(Integer ubuntu32Core) {
    
    this.ubuntu32Core = ubuntu32Core;
    return this;
  }

   /**
   * Total minutes used on Ubuntu 32 core runner machines.
   * @return ubuntu32Core
  **/
  @javax.annotation.Nullable

  public Integer getUbuntu32Core() {
    return ubuntu32Core;
  }


  public void setUbuntu32Core(Integer ubuntu32Core) {
    this.ubuntu32Core = ubuntu32Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown ubuntu64Core(Integer ubuntu64Core) {
    
    this.ubuntu64Core = ubuntu64Core;
    return this;
  }

   /**
   * Total minutes used on Ubuntu 64 core runner machines.
   * @return ubuntu64Core
  **/
  @javax.annotation.Nullable

  public Integer getUbuntu64Core() {
    return ubuntu64Core;
  }


  public void setUbuntu64Core(Integer ubuntu64Core) {
    this.ubuntu64Core = ubuntu64Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown windows4Core(Integer windows4Core) {
    
    this.windows4Core = windows4Core;
    return this;
  }

   /**
   * Total minutes used on Windows 4 core runner machines.
   * @return windows4Core
  **/
  @javax.annotation.Nullable

  public Integer getWindows4Core() {
    return windows4Core;
  }


  public void setWindows4Core(Integer windows4Core) {
    this.windows4Core = windows4Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown windows8Core(Integer windows8Core) {
    
    this.windows8Core = windows8Core;
    return this;
  }

   /**
   * Total minutes used on Windows 8 core runner machines.
   * @return windows8Core
  **/
  @javax.annotation.Nullable

  public Integer getWindows8Core() {
    return windows8Core;
  }


  public void setWindows8Core(Integer windows8Core) {
    this.windows8Core = windows8Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown windows16Core(Integer windows16Core) {
    
    this.windows16Core = windows16Core;
    return this;
  }

   /**
   * Total minutes used on Windows 16 core runner machines.
   * @return windows16Core
  **/
  @javax.annotation.Nullable

  public Integer getWindows16Core() {
    return windows16Core;
  }


  public void setWindows16Core(Integer windows16Core) {
    this.windows16Core = windows16Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown windows32Core(Integer windows32Core) {
    
    this.windows32Core = windows32Core;
    return this;
  }

   /**
   * Total minutes used on Windows 32 core runner machines.
   * @return windows32Core
  **/
  @javax.annotation.Nullable

  public Integer getWindows32Core() {
    return windows32Core;
  }


  public void setWindows32Core(Integer windows32Core) {
    this.windows32Core = windows32Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown windows64Core(Integer windows64Core) {
    
    this.windows64Core = windows64Core;
    return this;
  }

   /**
   * Total minutes used on Windows 64 core runner machines.
   * @return windows64Core
  **/
  @javax.annotation.Nullable

  public Integer getWindows64Core() {
    return windows64Core;
  }


  public void setWindows64Core(Integer windows64Core) {
    this.windows64Core = windows64Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown macos12Core(Integer macos12Core) {
    
    this.macos12Core = macos12Core;
    return this;
  }

   /**
   * Total minutes used on macOS 12 core runner machines.
   * @return macos12Core
  **/
  @javax.annotation.Nullable

  public Integer getMacos12Core() {
    return macos12Core;
  }


  public void setMacos12Core(Integer macos12Core) {
    this.macos12Core = macos12Core;
  }


  public ActionsBillingUsageMinutesUsedBreakdown total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * Total minutes used on all runner machines.
   * @return total
  **/
  @javax.annotation.Nullable

  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionsBillingUsageMinutesUsedBreakdown actionsBillingUsageMinutesUsedBreakdown = (ActionsBillingUsageMinutesUsedBreakdown) o;
    return Objects.equals(this.UBUNTU, actionsBillingUsageMinutesUsedBreakdown.UBUNTU) &&
        Objects.equals(this.MACOS, actionsBillingUsageMinutesUsedBreakdown.MACOS) &&
        Objects.equals(this.WINDOWS, actionsBillingUsageMinutesUsedBreakdown.WINDOWS) &&
        Objects.equals(this.ubuntu4Core, actionsBillingUsageMinutesUsedBreakdown.ubuntu4Core) &&
        Objects.equals(this.ubuntu8Core, actionsBillingUsageMinutesUsedBreakdown.ubuntu8Core) &&
        Objects.equals(this.ubuntu16Core, actionsBillingUsageMinutesUsedBreakdown.ubuntu16Core) &&
        Objects.equals(this.ubuntu32Core, actionsBillingUsageMinutesUsedBreakdown.ubuntu32Core) &&
        Objects.equals(this.ubuntu64Core, actionsBillingUsageMinutesUsedBreakdown.ubuntu64Core) &&
        Objects.equals(this.windows4Core, actionsBillingUsageMinutesUsedBreakdown.windows4Core) &&
        Objects.equals(this.windows8Core, actionsBillingUsageMinutesUsedBreakdown.windows8Core) &&
        Objects.equals(this.windows16Core, actionsBillingUsageMinutesUsedBreakdown.windows16Core) &&
        Objects.equals(this.windows32Core, actionsBillingUsageMinutesUsedBreakdown.windows32Core) &&
        Objects.equals(this.windows64Core, actionsBillingUsageMinutesUsedBreakdown.windows64Core) &&
        Objects.equals(this.macos12Core, actionsBillingUsageMinutesUsedBreakdown.macos12Core) &&
        Objects.equals(this.total, actionsBillingUsageMinutesUsedBreakdown.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(UBUNTU, MACOS, WINDOWS, ubuntu4Core, ubuntu8Core, ubuntu16Core, ubuntu32Core, ubuntu64Core, windows4Core, windows8Core, windows16Core, windows32Core, windows64Core, macos12Core, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionsBillingUsageMinutesUsedBreakdown {\n");
    sb.append("    UBUNTU: ").append(toIndentedString(UBUNTU)).append("\n");
    sb.append("    MACOS: ").append(toIndentedString(MACOS)).append("\n");
    sb.append("    WINDOWS: ").append(toIndentedString(WINDOWS)).append("\n");
    sb.append("    ubuntu4Core: ").append(toIndentedString(ubuntu4Core)).append("\n");
    sb.append("    ubuntu8Core: ").append(toIndentedString(ubuntu8Core)).append("\n");
    sb.append("    ubuntu16Core: ").append(toIndentedString(ubuntu16Core)).append("\n");
    sb.append("    ubuntu32Core: ").append(toIndentedString(ubuntu32Core)).append("\n");
    sb.append("    ubuntu64Core: ").append(toIndentedString(ubuntu64Core)).append("\n");
    sb.append("    windows4Core: ").append(toIndentedString(windows4Core)).append("\n");
    sb.append("    windows8Core: ").append(toIndentedString(windows8Core)).append("\n");
    sb.append("    windows16Core: ").append(toIndentedString(windows16Core)).append("\n");
    sb.append("    windows32Core: ").append(toIndentedString(windows32Core)).append("\n");
    sb.append("    windows64Core: ").append(toIndentedString(windows64Core)).append("\n");
    sb.append("    macos12Core: ").append(toIndentedString(macos12Core)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UBUNTU");
    openapiFields.add("MACOS");
    openapiFields.add("WINDOWS");
    openapiFields.add("ubuntu_4_core");
    openapiFields.add("ubuntu_8_core");
    openapiFields.add("ubuntu_16_core");
    openapiFields.add("ubuntu_32_core");
    openapiFields.add("ubuntu_64_core");
    openapiFields.add("windows_4_core");
    openapiFields.add("windows_8_core");
    openapiFields.add("windows_16_core");
    openapiFields.add("windows_32_core");
    openapiFields.add("windows_64_core");
    openapiFields.add("macos_12_core");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActionsBillingUsageMinutesUsedBreakdown
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActionsBillingUsageMinutesUsedBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionsBillingUsageMinutesUsedBreakdown is not found in the empty JSON string", ActionsBillingUsageMinutesUsedBreakdown.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActionsBillingUsageMinutesUsedBreakdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionsBillingUsageMinutesUsedBreakdown` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionsBillingUsageMinutesUsedBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionsBillingUsageMinutesUsedBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionsBillingUsageMinutesUsedBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionsBillingUsageMinutesUsedBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionsBillingUsageMinutesUsedBreakdown>() {
           @Override
           public void write(JsonWriter out, ActionsBillingUsageMinutesUsedBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionsBillingUsageMinutesUsedBreakdown read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActionsBillingUsageMinutesUsedBreakdown given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActionsBillingUsageMinutesUsedBreakdown
  * @throws IOException if the JSON string is invalid with respect to ActionsBillingUsageMinutesUsedBreakdown
  */
  public static ActionsBillingUsageMinutesUsedBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionsBillingUsageMinutesUsedBreakdown.class);
  }

 /**
  * Convert an instance of ActionsBillingUsageMinutesUsedBreakdown to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

