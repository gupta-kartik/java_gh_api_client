/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The enforcement level of the ruleset. &#x60;evaluate&#x60; allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (&#x60;evaluate&#x60; is only available with GitHub Enterprise).
 */
@JsonAdapter(RepositoryRuleEnforcement.Adapter.class)
public enum RepositoryRuleEnforcement {
  
  DISABLED("disabled"),
  
  ACTIVE("active"),
  
  EVALUATE("evaluate");

  private String value;

  RepositoryRuleEnforcement(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RepositoryRuleEnforcement fromValue(String value) {
    for (RepositoryRuleEnforcement b : RepositoryRuleEnforcement.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RepositoryRuleEnforcement> {
    @Override
    public void write(final JsonWriter jsonWriter, final RepositoryRuleEnforcement enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RepositoryRuleEnforcement read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RepositoryRuleEnforcement.fromValue(value);
    }
  }
}

