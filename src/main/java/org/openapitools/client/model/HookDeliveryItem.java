/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delivery made by a webhook, without request and response information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class HookDeliveryItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_DELIVERED_AT = "delivered_at";
  @SerializedName(SERIALIZED_NAME_DELIVERED_AT)
  private OffsetDateTime deliveredAt;

  public static final String SERIALIZED_NAME_REDELIVERY = "redelivery";
  @SerializedName(SERIALIZED_NAME_REDELIVERY)
  private Boolean redelivery;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_INSTALLATION_ID = "installation_id";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ID)
  private Integer installationId;

  public static final String SERIALIZED_NAME_REPOSITORY_ID = "repository_id";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ID)
  private Integer repositoryId;

  public HookDeliveryItem() {
  }

  public HookDeliveryItem id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the webhook delivery.
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public HookDeliveryItem guid(String guid) {
    
    this.guid = guid;
    return this;
  }

   /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @return guid
  **/
  @javax.annotation.Nonnull

  public String getGuid() {
    return guid;
  }


  public void setGuid(String guid) {
    this.guid = guid;
  }


  public HookDeliveryItem deliveredAt(OffsetDateTime deliveredAt) {
    
    this.deliveredAt = deliveredAt;
    return this;
  }

   /**
   * Time when the webhook delivery occurred.
   * @return deliveredAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getDeliveredAt() {
    return deliveredAt;
  }


  public void setDeliveredAt(OffsetDateTime deliveredAt) {
    this.deliveredAt = deliveredAt;
  }


  public HookDeliveryItem redelivery(Boolean redelivery) {
    
    this.redelivery = redelivery;
    return this;
  }

   /**
   * Whether the webhook delivery is a redelivery.
   * @return redelivery
  **/
  @javax.annotation.Nonnull

  public Boolean getRedelivery() {
    return redelivery;
  }


  public void setRedelivery(Boolean redelivery) {
    this.redelivery = redelivery;
  }


  public HookDeliveryItem duration(BigDecimal duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Time spent delivering.
   * @return duration
  **/
  @javax.annotation.Nonnull

  public BigDecimal getDuration() {
    return duration;
  }


  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public HookDeliveryItem status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Describes the response returned after attempting the delivery.
   * @return status
  **/
  @javax.annotation.Nonnull

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public HookDeliveryItem statusCode(Integer statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Status code received when delivery was made.
   * @return statusCode
  **/
  @javax.annotation.Nonnull

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public HookDeliveryItem event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * The event that triggered the delivery.
   * @return event
  **/
  @javax.annotation.Nonnull

  public String getEvent() {
    return event;
  }


  public void setEvent(String event) {
    this.event = event;
  }


  public HookDeliveryItem action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * The type of activity for the event that triggered the delivery.
   * @return action
  **/
  @javax.annotation.Nullable

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public HookDeliveryItem installationId(Integer installationId) {
    
    this.installationId = installationId;
    return this;
  }

   /**
   * The id of the GitHub App installation associated with this event.
   * @return installationId
  **/
  @javax.annotation.Nullable

  public Integer getInstallationId() {
    return installationId;
  }


  public void setInstallationId(Integer installationId) {
    this.installationId = installationId;
  }


  public HookDeliveryItem repositoryId(Integer repositoryId) {
    
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * The id of the repository associated with this event.
   * @return repositoryId
  **/
  @javax.annotation.Nullable

  public Integer getRepositoryId() {
    return repositoryId;
  }


  public void setRepositoryId(Integer repositoryId) {
    this.repositoryId = repositoryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HookDeliveryItem hookDeliveryItem = (HookDeliveryItem) o;
    return Objects.equals(this.id, hookDeliveryItem.id) &&
        Objects.equals(this.guid, hookDeliveryItem.guid) &&
        Objects.equals(this.deliveredAt, hookDeliveryItem.deliveredAt) &&
        Objects.equals(this.redelivery, hookDeliveryItem.redelivery) &&
        Objects.equals(this.duration, hookDeliveryItem.duration) &&
        Objects.equals(this.status, hookDeliveryItem.status) &&
        Objects.equals(this.statusCode, hookDeliveryItem.statusCode) &&
        Objects.equals(this.event, hookDeliveryItem.event) &&
        Objects.equals(this.action, hookDeliveryItem.action) &&
        Objects.equals(this.installationId, hookDeliveryItem.installationId) &&
        Objects.equals(this.repositoryId, hookDeliveryItem.repositoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, guid, deliveredAt, redelivery, duration, status, statusCode, event, action, installationId, repositoryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HookDeliveryItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    deliveredAt: ").append(toIndentedString(deliveredAt)).append("\n");
    sb.append("    redelivery: ").append(toIndentedString(redelivery)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    installationId: ").append(toIndentedString(installationId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("guid");
    openapiFields.add("delivered_at");
    openapiFields.add("redelivery");
    openapiFields.add("duration");
    openapiFields.add("status");
    openapiFields.add("status_code");
    openapiFields.add("event");
    openapiFields.add("action");
    openapiFields.add("installation_id");
    openapiFields.add("repository_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("guid");
    openapiRequiredFields.add("delivered_at");
    openapiRequiredFields.add("redelivery");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("status_code");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("installation_id");
    openapiRequiredFields.add("repository_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HookDeliveryItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HookDeliveryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HookDeliveryItem is not found in the empty JSON string", HookDeliveryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HookDeliveryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HookDeliveryItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HookDeliveryItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HookDeliveryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HookDeliveryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HookDeliveryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HookDeliveryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<HookDeliveryItem>() {
           @Override
           public void write(JsonWriter out, HookDeliveryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HookDeliveryItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HookDeliveryItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HookDeliveryItem
  * @throws IOException if the JSON string is invalid with respect to HookDeliveryItem
  */
  public static HookDeliveryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HookDeliveryItem.class);
  }

 /**
  * Convert an instance of HookDeliveryItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

