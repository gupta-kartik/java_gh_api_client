/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PagesHealthCheckAltDomain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class PagesHealthCheckAltDomain {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private String nameservers;

  public static final String SERIALIZED_NAME_DNS_RESOLVES = "dns_resolves";
  @SerializedName(SERIALIZED_NAME_DNS_RESOLVES)
  private Boolean dnsResolves;

  public static final String SERIALIZED_NAME_IS_PROXIED = "is_proxied";
  @SerializedName(SERIALIZED_NAME_IS_PROXIED)
  private Boolean isProxied;

  public static final String SERIALIZED_NAME_IS_CLOUDFLARE_IP = "is_cloudflare_ip";
  @SerializedName(SERIALIZED_NAME_IS_CLOUDFLARE_IP)
  private Boolean isCloudflareIp;

  public static final String SERIALIZED_NAME_IS_FASTLY_IP = "is_fastly_ip";
  @SerializedName(SERIALIZED_NAME_IS_FASTLY_IP)
  private Boolean isFastlyIp;

  public static final String SERIALIZED_NAME_IS_OLD_IP_ADDRESS = "is_old_ip_address";
  @SerializedName(SERIALIZED_NAME_IS_OLD_IP_ADDRESS)
  private Boolean isOldIpAddress;

  public static final String SERIALIZED_NAME_IS_A_RECORD = "is_a_record";
  @SerializedName(SERIALIZED_NAME_IS_A_RECORD)
  private Boolean isARecord;

  public static final String SERIALIZED_NAME_HAS_CNAME_RECORD = "has_cname_record";
  @SerializedName(SERIALIZED_NAME_HAS_CNAME_RECORD)
  private Boolean hasCnameRecord;

  public static final String SERIALIZED_NAME_HAS_MX_RECORDS_PRESENT = "has_mx_records_present";
  @SerializedName(SERIALIZED_NAME_HAS_MX_RECORDS_PRESENT)
  private Boolean hasMxRecordsPresent;

  public static final String SERIALIZED_NAME_IS_VALID_DOMAIN = "is_valid_domain";
  @SerializedName(SERIALIZED_NAME_IS_VALID_DOMAIN)
  private Boolean isValidDomain;

  public static final String SERIALIZED_NAME_IS_APEX_DOMAIN = "is_apex_domain";
  @SerializedName(SERIALIZED_NAME_IS_APEX_DOMAIN)
  private Boolean isApexDomain;

  public static final String SERIALIZED_NAME_SHOULD_BE_A_RECORD = "should_be_a_record";
  @SerializedName(SERIALIZED_NAME_SHOULD_BE_A_RECORD)
  private Boolean shouldBeARecord;

  public static final String SERIALIZED_NAME_IS_CNAME_TO_GITHUB_USER_DOMAIN = "is_cname_to_github_user_domain";
  @SerializedName(SERIALIZED_NAME_IS_CNAME_TO_GITHUB_USER_DOMAIN)
  private Boolean isCnameToGithubUserDomain;

  public static final String SERIALIZED_NAME_IS_CNAME_TO_PAGES_DOT_GITHUB_DOT_COM = "is_cname_to_pages_dot_github_dot_com";
  @SerializedName(SERIALIZED_NAME_IS_CNAME_TO_PAGES_DOT_GITHUB_DOT_COM)
  private Boolean isCnameToPagesDotGithubDotCom;

  public static final String SERIALIZED_NAME_IS_CNAME_TO_FASTLY = "is_cname_to_fastly";
  @SerializedName(SERIALIZED_NAME_IS_CNAME_TO_FASTLY)
  private Boolean isCnameToFastly;

  public static final String SERIALIZED_NAME_IS_POINTED_TO_GITHUB_PAGES_IP = "is_pointed_to_github_pages_ip";
  @SerializedName(SERIALIZED_NAME_IS_POINTED_TO_GITHUB_PAGES_IP)
  private Boolean isPointedToGithubPagesIp;

  public static final String SERIALIZED_NAME_IS_NON_GITHUB_PAGES_IP_PRESENT = "is_non_github_pages_ip_present";
  @SerializedName(SERIALIZED_NAME_IS_NON_GITHUB_PAGES_IP_PRESENT)
  private Boolean isNonGithubPagesIpPresent;

  public static final String SERIALIZED_NAME_IS_PAGES_DOMAIN = "is_pages_domain";
  @SerializedName(SERIALIZED_NAME_IS_PAGES_DOMAIN)
  private Boolean isPagesDomain;

  public static final String SERIALIZED_NAME_IS_SERVED_BY_PAGES = "is_served_by_pages";
  @SerializedName(SERIALIZED_NAME_IS_SERVED_BY_PAGES)
  private Boolean isServedByPages;

  public static final String SERIALIZED_NAME_IS_VALID = "is_valid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESPONDS_TO_HTTPS = "responds_to_https";
  @SerializedName(SERIALIZED_NAME_RESPONDS_TO_HTTPS)
  private Boolean respondsToHttps;

  public static final String SERIALIZED_NAME_ENFORCES_HTTPS = "enforces_https";
  @SerializedName(SERIALIZED_NAME_ENFORCES_HTTPS)
  private Boolean enforcesHttps;

  public static final String SERIALIZED_NAME_HTTPS_ERROR = "https_error";
  @SerializedName(SERIALIZED_NAME_HTTPS_ERROR)
  private String httpsError;

  public static final String SERIALIZED_NAME_IS_HTTPS_ELIGIBLE = "is_https_eligible";
  @SerializedName(SERIALIZED_NAME_IS_HTTPS_ELIGIBLE)
  private Boolean isHttpsEligible;

  public static final String SERIALIZED_NAME_CAA_ERROR = "caa_error";
  @SerializedName(SERIALIZED_NAME_CAA_ERROR)
  private String caaError;

  public PagesHealthCheckAltDomain() {
  }

  public PagesHealthCheckAltDomain host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public PagesHealthCheckAltDomain uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @javax.annotation.Nullable

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public PagesHealthCheckAltDomain nameservers(String nameservers) {
    
    this.nameservers = nameservers;
    return this;
  }

   /**
   * Get nameservers
   * @return nameservers
  **/
  @javax.annotation.Nullable

  public String getNameservers() {
    return nameservers;
  }


  public void setNameservers(String nameservers) {
    this.nameservers = nameservers;
  }


  public PagesHealthCheckAltDomain dnsResolves(Boolean dnsResolves) {
    
    this.dnsResolves = dnsResolves;
    return this;
  }

   /**
   * Get dnsResolves
   * @return dnsResolves
  **/
  @javax.annotation.Nullable

  public Boolean getDnsResolves() {
    return dnsResolves;
  }


  public void setDnsResolves(Boolean dnsResolves) {
    this.dnsResolves = dnsResolves;
  }


  public PagesHealthCheckAltDomain isProxied(Boolean isProxied) {
    
    this.isProxied = isProxied;
    return this;
  }

   /**
   * Get isProxied
   * @return isProxied
  **/
  @javax.annotation.Nullable

  public Boolean getIsProxied() {
    return isProxied;
  }


  public void setIsProxied(Boolean isProxied) {
    this.isProxied = isProxied;
  }


  public PagesHealthCheckAltDomain isCloudflareIp(Boolean isCloudflareIp) {
    
    this.isCloudflareIp = isCloudflareIp;
    return this;
  }

   /**
   * Get isCloudflareIp
   * @return isCloudflareIp
  **/
  @javax.annotation.Nullable

  public Boolean getIsCloudflareIp() {
    return isCloudflareIp;
  }


  public void setIsCloudflareIp(Boolean isCloudflareIp) {
    this.isCloudflareIp = isCloudflareIp;
  }


  public PagesHealthCheckAltDomain isFastlyIp(Boolean isFastlyIp) {
    
    this.isFastlyIp = isFastlyIp;
    return this;
  }

   /**
   * Get isFastlyIp
   * @return isFastlyIp
  **/
  @javax.annotation.Nullable

  public Boolean getIsFastlyIp() {
    return isFastlyIp;
  }


  public void setIsFastlyIp(Boolean isFastlyIp) {
    this.isFastlyIp = isFastlyIp;
  }


  public PagesHealthCheckAltDomain isOldIpAddress(Boolean isOldIpAddress) {
    
    this.isOldIpAddress = isOldIpAddress;
    return this;
  }

   /**
   * Get isOldIpAddress
   * @return isOldIpAddress
  **/
  @javax.annotation.Nullable

  public Boolean getIsOldIpAddress() {
    return isOldIpAddress;
  }


  public void setIsOldIpAddress(Boolean isOldIpAddress) {
    this.isOldIpAddress = isOldIpAddress;
  }


  public PagesHealthCheckAltDomain isARecord(Boolean isARecord) {
    
    this.isARecord = isARecord;
    return this;
  }

   /**
   * Get isARecord
   * @return isARecord
  **/
  @javax.annotation.Nullable

  public Boolean getIsARecord() {
    return isARecord;
  }


  public void setIsARecord(Boolean isARecord) {
    this.isARecord = isARecord;
  }


  public PagesHealthCheckAltDomain hasCnameRecord(Boolean hasCnameRecord) {
    
    this.hasCnameRecord = hasCnameRecord;
    return this;
  }

   /**
   * Get hasCnameRecord
   * @return hasCnameRecord
  **/
  @javax.annotation.Nullable

  public Boolean getHasCnameRecord() {
    return hasCnameRecord;
  }


  public void setHasCnameRecord(Boolean hasCnameRecord) {
    this.hasCnameRecord = hasCnameRecord;
  }


  public PagesHealthCheckAltDomain hasMxRecordsPresent(Boolean hasMxRecordsPresent) {
    
    this.hasMxRecordsPresent = hasMxRecordsPresent;
    return this;
  }

   /**
   * Get hasMxRecordsPresent
   * @return hasMxRecordsPresent
  **/
  @javax.annotation.Nullable

  public Boolean getHasMxRecordsPresent() {
    return hasMxRecordsPresent;
  }


  public void setHasMxRecordsPresent(Boolean hasMxRecordsPresent) {
    this.hasMxRecordsPresent = hasMxRecordsPresent;
  }


  public PagesHealthCheckAltDomain isValidDomain(Boolean isValidDomain) {
    
    this.isValidDomain = isValidDomain;
    return this;
  }

   /**
   * Get isValidDomain
   * @return isValidDomain
  **/
  @javax.annotation.Nullable

  public Boolean getIsValidDomain() {
    return isValidDomain;
  }


  public void setIsValidDomain(Boolean isValidDomain) {
    this.isValidDomain = isValidDomain;
  }


  public PagesHealthCheckAltDomain isApexDomain(Boolean isApexDomain) {
    
    this.isApexDomain = isApexDomain;
    return this;
  }

   /**
   * Get isApexDomain
   * @return isApexDomain
  **/
  @javax.annotation.Nullable

  public Boolean getIsApexDomain() {
    return isApexDomain;
  }


  public void setIsApexDomain(Boolean isApexDomain) {
    this.isApexDomain = isApexDomain;
  }


  public PagesHealthCheckAltDomain shouldBeARecord(Boolean shouldBeARecord) {
    
    this.shouldBeARecord = shouldBeARecord;
    return this;
  }

   /**
   * Get shouldBeARecord
   * @return shouldBeARecord
  **/
  @javax.annotation.Nullable

  public Boolean getShouldBeARecord() {
    return shouldBeARecord;
  }


  public void setShouldBeARecord(Boolean shouldBeARecord) {
    this.shouldBeARecord = shouldBeARecord;
  }


  public PagesHealthCheckAltDomain isCnameToGithubUserDomain(Boolean isCnameToGithubUserDomain) {
    
    this.isCnameToGithubUserDomain = isCnameToGithubUserDomain;
    return this;
  }

   /**
   * Get isCnameToGithubUserDomain
   * @return isCnameToGithubUserDomain
  **/
  @javax.annotation.Nullable

  public Boolean getIsCnameToGithubUserDomain() {
    return isCnameToGithubUserDomain;
  }


  public void setIsCnameToGithubUserDomain(Boolean isCnameToGithubUserDomain) {
    this.isCnameToGithubUserDomain = isCnameToGithubUserDomain;
  }


  public PagesHealthCheckAltDomain isCnameToPagesDotGithubDotCom(Boolean isCnameToPagesDotGithubDotCom) {
    
    this.isCnameToPagesDotGithubDotCom = isCnameToPagesDotGithubDotCom;
    return this;
  }

   /**
   * Get isCnameToPagesDotGithubDotCom
   * @return isCnameToPagesDotGithubDotCom
  **/
  @javax.annotation.Nullable

  public Boolean getIsCnameToPagesDotGithubDotCom() {
    return isCnameToPagesDotGithubDotCom;
  }


  public void setIsCnameToPagesDotGithubDotCom(Boolean isCnameToPagesDotGithubDotCom) {
    this.isCnameToPagesDotGithubDotCom = isCnameToPagesDotGithubDotCom;
  }


  public PagesHealthCheckAltDomain isCnameToFastly(Boolean isCnameToFastly) {
    
    this.isCnameToFastly = isCnameToFastly;
    return this;
  }

   /**
   * Get isCnameToFastly
   * @return isCnameToFastly
  **/
  @javax.annotation.Nullable

  public Boolean getIsCnameToFastly() {
    return isCnameToFastly;
  }


  public void setIsCnameToFastly(Boolean isCnameToFastly) {
    this.isCnameToFastly = isCnameToFastly;
  }


  public PagesHealthCheckAltDomain isPointedToGithubPagesIp(Boolean isPointedToGithubPagesIp) {
    
    this.isPointedToGithubPagesIp = isPointedToGithubPagesIp;
    return this;
  }

   /**
   * Get isPointedToGithubPagesIp
   * @return isPointedToGithubPagesIp
  **/
  @javax.annotation.Nullable

  public Boolean getIsPointedToGithubPagesIp() {
    return isPointedToGithubPagesIp;
  }


  public void setIsPointedToGithubPagesIp(Boolean isPointedToGithubPagesIp) {
    this.isPointedToGithubPagesIp = isPointedToGithubPagesIp;
  }


  public PagesHealthCheckAltDomain isNonGithubPagesIpPresent(Boolean isNonGithubPagesIpPresent) {
    
    this.isNonGithubPagesIpPresent = isNonGithubPagesIpPresent;
    return this;
  }

   /**
   * Get isNonGithubPagesIpPresent
   * @return isNonGithubPagesIpPresent
  **/
  @javax.annotation.Nullable

  public Boolean getIsNonGithubPagesIpPresent() {
    return isNonGithubPagesIpPresent;
  }


  public void setIsNonGithubPagesIpPresent(Boolean isNonGithubPagesIpPresent) {
    this.isNonGithubPagesIpPresent = isNonGithubPagesIpPresent;
  }


  public PagesHealthCheckAltDomain isPagesDomain(Boolean isPagesDomain) {
    
    this.isPagesDomain = isPagesDomain;
    return this;
  }

   /**
   * Get isPagesDomain
   * @return isPagesDomain
  **/
  @javax.annotation.Nullable

  public Boolean getIsPagesDomain() {
    return isPagesDomain;
  }


  public void setIsPagesDomain(Boolean isPagesDomain) {
    this.isPagesDomain = isPagesDomain;
  }


  public PagesHealthCheckAltDomain isServedByPages(Boolean isServedByPages) {
    
    this.isServedByPages = isServedByPages;
    return this;
  }

   /**
   * Get isServedByPages
   * @return isServedByPages
  **/
  @javax.annotation.Nullable

  public Boolean getIsServedByPages() {
    return isServedByPages;
  }


  public void setIsServedByPages(Boolean isServedByPages) {
    this.isServedByPages = isServedByPages;
  }


  public PagesHealthCheckAltDomain isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * Get isValid
   * @return isValid
  **/
  @javax.annotation.Nullable

  public Boolean getIsValid() {
    return isValid;
  }


  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public PagesHealthCheckAltDomain reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public PagesHealthCheckAltDomain respondsToHttps(Boolean respondsToHttps) {
    
    this.respondsToHttps = respondsToHttps;
    return this;
  }

   /**
   * Get respondsToHttps
   * @return respondsToHttps
  **/
  @javax.annotation.Nullable

  public Boolean getRespondsToHttps() {
    return respondsToHttps;
  }


  public void setRespondsToHttps(Boolean respondsToHttps) {
    this.respondsToHttps = respondsToHttps;
  }


  public PagesHealthCheckAltDomain enforcesHttps(Boolean enforcesHttps) {
    
    this.enforcesHttps = enforcesHttps;
    return this;
  }

   /**
   * Get enforcesHttps
   * @return enforcesHttps
  **/
  @javax.annotation.Nullable

  public Boolean getEnforcesHttps() {
    return enforcesHttps;
  }


  public void setEnforcesHttps(Boolean enforcesHttps) {
    this.enforcesHttps = enforcesHttps;
  }


  public PagesHealthCheckAltDomain httpsError(String httpsError) {
    
    this.httpsError = httpsError;
    return this;
  }

   /**
   * Get httpsError
   * @return httpsError
  **/
  @javax.annotation.Nullable

  public String getHttpsError() {
    return httpsError;
  }


  public void setHttpsError(String httpsError) {
    this.httpsError = httpsError;
  }


  public PagesHealthCheckAltDomain isHttpsEligible(Boolean isHttpsEligible) {
    
    this.isHttpsEligible = isHttpsEligible;
    return this;
  }

   /**
   * Get isHttpsEligible
   * @return isHttpsEligible
  **/
  @javax.annotation.Nullable

  public Boolean getIsHttpsEligible() {
    return isHttpsEligible;
  }


  public void setIsHttpsEligible(Boolean isHttpsEligible) {
    this.isHttpsEligible = isHttpsEligible;
  }


  public PagesHealthCheckAltDomain caaError(String caaError) {
    
    this.caaError = caaError;
    return this;
  }

   /**
   * Get caaError
   * @return caaError
  **/
  @javax.annotation.Nullable

  public String getCaaError() {
    return caaError;
  }


  public void setCaaError(String caaError) {
    this.caaError = caaError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagesHealthCheckAltDomain pagesHealthCheckAltDomain = (PagesHealthCheckAltDomain) o;
    return Objects.equals(this.host, pagesHealthCheckAltDomain.host) &&
        Objects.equals(this.uri, pagesHealthCheckAltDomain.uri) &&
        Objects.equals(this.nameservers, pagesHealthCheckAltDomain.nameservers) &&
        Objects.equals(this.dnsResolves, pagesHealthCheckAltDomain.dnsResolves) &&
        Objects.equals(this.isProxied, pagesHealthCheckAltDomain.isProxied) &&
        Objects.equals(this.isCloudflareIp, pagesHealthCheckAltDomain.isCloudflareIp) &&
        Objects.equals(this.isFastlyIp, pagesHealthCheckAltDomain.isFastlyIp) &&
        Objects.equals(this.isOldIpAddress, pagesHealthCheckAltDomain.isOldIpAddress) &&
        Objects.equals(this.isARecord, pagesHealthCheckAltDomain.isARecord) &&
        Objects.equals(this.hasCnameRecord, pagesHealthCheckAltDomain.hasCnameRecord) &&
        Objects.equals(this.hasMxRecordsPresent, pagesHealthCheckAltDomain.hasMxRecordsPresent) &&
        Objects.equals(this.isValidDomain, pagesHealthCheckAltDomain.isValidDomain) &&
        Objects.equals(this.isApexDomain, pagesHealthCheckAltDomain.isApexDomain) &&
        Objects.equals(this.shouldBeARecord, pagesHealthCheckAltDomain.shouldBeARecord) &&
        Objects.equals(this.isCnameToGithubUserDomain, pagesHealthCheckAltDomain.isCnameToGithubUserDomain) &&
        Objects.equals(this.isCnameToPagesDotGithubDotCom, pagesHealthCheckAltDomain.isCnameToPagesDotGithubDotCom) &&
        Objects.equals(this.isCnameToFastly, pagesHealthCheckAltDomain.isCnameToFastly) &&
        Objects.equals(this.isPointedToGithubPagesIp, pagesHealthCheckAltDomain.isPointedToGithubPagesIp) &&
        Objects.equals(this.isNonGithubPagesIpPresent, pagesHealthCheckAltDomain.isNonGithubPagesIpPresent) &&
        Objects.equals(this.isPagesDomain, pagesHealthCheckAltDomain.isPagesDomain) &&
        Objects.equals(this.isServedByPages, pagesHealthCheckAltDomain.isServedByPages) &&
        Objects.equals(this.isValid, pagesHealthCheckAltDomain.isValid) &&
        Objects.equals(this.reason, pagesHealthCheckAltDomain.reason) &&
        Objects.equals(this.respondsToHttps, pagesHealthCheckAltDomain.respondsToHttps) &&
        Objects.equals(this.enforcesHttps, pagesHealthCheckAltDomain.enforcesHttps) &&
        Objects.equals(this.httpsError, pagesHealthCheckAltDomain.httpsError) &&
        Objects.equals(this.isHttpsEligible, pagesHealthCheckAltDomain.isHttpsEligible) &&
        Objects.equals(this.caaError, pagesHealthCheckAltDomain.caaError);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, uri, nameservers, dnsResolves, isProxied, isCloudflareIp, isFastlyIp, isOldIpAddress, isARecord, hasCnameRecord, hasMxRecordsPresent, isValidDomain, isApexDomain, shouldBeARecord, isCnameToGithubUserDomain, isCnameToPagesDotGithubDotCom, isCnameToFastly, isPointedToGithubPagesIp, isNonGithubPagesIpPresent, isPagesDomain, isServedByPages, isValid, reason, respondsToHttps, enforcesHttps, httpsError, isHttpsEligible, caaError);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagesHealthCheckAltDomain {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("    dnsResolves: ").append(toIndentedString(dnsResolves)).append("\n");
    sb.append("    isProxied: ").append(toIndentedString(isProxied)).append("\n");
    sb.append("    isCloudflareIp: ").append(toIndentedString(isCloudflareIp)).append("\n");
    sb.append("    isFastlyIp: ").append(toIndentedString(isFastlyIp)).append("\n");
    sb.append("    isOldIpAddress: ").append(toIndentedString(isOldIpAddress)).append("\n");
    sb.append("    isARecord: ").append(toIndentedString(isARecord)).append("\n");
    sb.append("    hasCnameRecord: ").append(toIndentedString(hasCnameRecord)).append("\n");
    sb.append("    hasMxRecordsPresent: ").append(toIndentedString(hasMxRecordsPresent)).append("\n");
    sb.append("    isValidDomain: ").append(toIndentedString(isValidDomain)).append("\n");
    sb.append("    isApexDomain: ").append(toIndentedString(isApexDomain)).append("\n");
    sb.append("    shouldBeARecord: ").append(toIndentedString(shouldBeARecord)).append("\n");
    sb.append("    isCnameToGithubUserDomain: ").append(toIndentedString(isCnameToGithubUserDomain)).append("\n");
    sb.append("    isCnameToPagesDotGithubDotCom: ").append(toIndentedString(isCnameToPagesDotGithubDotCom)).append("\n");
    sb.append("    isCnameToFastly: ").append(toIndentedString(isCnameToFastly)).append("\n");
    sb.append("    isPointedToGithubPagesIp: ").append(toIndentedString(isPointedToGithubPagesIp)).append("\n");
    sb.append("    isNonGithubPagesIpPresent: ").append(toIndentedString(isNonGithubPagesIpPresent)).append("\n");
    sb.append("    isPagesDomain: ").append(toIndentedString(isPagesDomain)).append("\n");
    sb.append("    isServedByPages: ").append(toIndentedString(isServedByPages)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    respondsToHttps: ").append(toIndentedString(respondsToHttps)).append("\n");
    sb.append("    enforcesHttps: ").append(toIndentedString(enforcesHttps)).append("\n");
    sb.append("    httpsError: ").append(toIndentedString(httpsError)).append("\n");
    sb.append("    isHttpsEligible: ").append(toIndentedString(isHttpsEligible)).append("\n");
    sb.append("    caaError: ").append(toIndentedString(caaError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("uri");
    openapiFields.add("nameservers");
    openapiFields.add("dns_resolves");
    openapiFields.add("is_proxied");
    openapiFields.add("is_cloudflare_ip");
    openapiFields.add("is_fastly_ip");
    openapiFields.add("is_old_ip_address");
    openapiFields.add("is_a_record");
    openapiFields.add("has_cname_record");
    openapiFields.add("has_mx_records_present");
    openapiFields.add("is_valid_domain");
    openapiFields.add("is_apex_domain");
    openapiFields.add("should_be_a_record");
    openapiFields.add("is_cname_to_github_user_domain");
    openapiFields.add("is_cname_to_pages_dot_github_dot_com");
    openapiFields.add("is_cname_to_fastly");
    openapiFields.add("is_pointed_to_github_pages_ip");
    openapiFields.add("is_non_github_pages_ip_present");
    openapiFields.add("is_pages_domain");
    openapiFields.add("is_served_by_pages");
    openapiFields.add("is_valid");
    openapiFields.add("reason");
    openapiFields.add("responds_to_https");
    openapiFields.add("enforces_https");
    openapiFields.add("https_error");
    openapiFields.add("is_https_eligible");
    openapiFields.add("caa_error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PagesHealthCheckAltDomain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PagesHealthCheckAltDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagesHealthCheckAltDomain is not found in the empty JSON string", PagesHealthCheckAltDomain.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PagesHealthCheckAltDomain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagesHealthCheckAltDomain` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("nameservers") != null && !jsonObj.get("nameservers").isJsonNull()) && !jsonObj.get("nameservers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameservers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameservers").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("https_error") != null && !jsonObj.get("https_error").isJsonNull()) && !jsonObj.get("https_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `https_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("https_error").toString()));
      }
      if ((jsonObj.get("caa_error") != null && !jsonObj.get("caa_error").isJsonNull()) && !jsonObj.get("caa_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caa_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caa_error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagesHealthCheckAltDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagesHealthCheckAltDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagesHealthCheckAltDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagesHealthCheckAltDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<PagesHealthCheckAltDomain>() {
           @Override
           public void write(JsonWriter out, PagesHealthCheckAltDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagesHealthCheckAltDomain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PagesHealthCheckAltDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PagesHealthCheckAltDomain
  * @throws IOException if the JSON string is invalid with respect to PagesHealthCheckAltDomain
  */
  public static PagesHealthCheckAltDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagesHealthCheckAltDomain.class);
  }

 /**
  * Convert an instance of PagesHealthCheckAltDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

