/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.WebhookDiscussionCommentEditedChangesBody;
import org.openapitools.client.model.WebhookProjectCardEditedChangesNote;
import org.openapitools.client.model.WebhookRepositoryEditedChangesTopics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookRepositoryEditedChanges
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookRepositoryEditedChanges {
  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private WebhookDiscussionCommentEditedChangesBody defaultBranch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private WebhookProjectCardEditedChangesNote description;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private WebhookProjectCardEditedChangesNote homepage;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private WebhookRepositoryEditedChangesTopics topics;

  public WebhookRepositoryEditedChanges() {
  }

  public WebhookRepositoryEditedChanges defaultBranch(WebhookDiscussionCommentEditedChangesBody defaultBranch) {
    
    this.defaultBranch = defaultBranch;
    return this;
  }

   /**
   * Get defaultBranch
   * @return defaultBranch
  **/
  @javax.annotation.Nullable

  public WebhookDiscussionCommentEditedChangesBody getDefaultBranch() {
    return defaultBranch;
  }


  public void setDefaultBranch(WebhookDiscussionCommentEditedChangesBody defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public WebhookRepositoryEditedChanges description(WebhookProjectCardEditedChangesNote description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public WebhookProjectCardEditedChangesNote getDescription() {
    return description;
  }


  public void setDescription(WebhookProjectCardEditedChangesNote description) {
    this.description = description;
  }


  public WebhookRepositoryEditedChanges homepage(WebhookProjectCardEditedChangesNote homepage) {
    
    this.homepage = homepage;
    return this;
  }

   /**
   * Get homepage
   * @return homepage
  **/
  @javax.annotation.Nullable

  public WebhookProjectCardEditedChangesNote getHomepage() {
    return homepage;
  }


  public void setHomepage(WebhookProjectCardEditedChangesNote homepage) {
    this.homepage = homepage;
  }


  public WebhookRepositoryEditedChanges topics(WebhookRepositoryEditedChangesTopics topics) {
    
    this.topics = topics;
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @javax.annotation.Nullable

  public WebhookRepositoryEditedChangesTopics getTopics() {
    return topics;
  }


  public void setTopics(WebhookRepositoryEditedChangesTopics topics) {
    this.topics = topics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookRepositoryEditedChanges webhookRepositoryEditedChanges = (WebhookRepositoryEditedChanges) o;
    return Objects.equals(this.defaultBranch, webhookRepositoryEditedChanges.defaultBranch) &&
        Objects.equals(this.description, webhookRepositoryEditedChanges.description) &&
        Objects.equals(this.homepage, webhookRepositoryEditedChanges.homepage) &&
        Objects.equals(this.topics, webhookRepositoryEditedChanges.topics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultBranch, description, homepage, topics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookRepositoryEditedChanges {\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_branch");
    openapiFields.add("description");
    openapiFields.add("homepage");
    openapiFields.add("topics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookRepositoryEditedChanges
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookRepositoryEditedChanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookRepositoryEditedChanges is not found in the empty JSON string", WebhookRepositoryEditedChanges.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookRepositoryEditedChanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookRepositoryEditedChanges` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `default_branch`
      if (jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) {
        WebhookDiscussionCommentEditedChangesBody.validateJsonObject(jsonObj.getAsJsonObject("default_branch"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        WebhookProjectCardEditedChangesNote.validateJsonObject(jsonObj.getAsJsonObject("description"));
      }
      // validate the optional field `homepage`
      if (jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) {
        WebhookProjectCardEditedChangesNote.validateJsonObject(jsonObj.getAsJsonObject("homepage"));
      }
      // validate the optional field `topics`
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull()) {
        WebhookRepositoryEditedChangesTopics.validateJsonObject(jsonObj.getAsJsonObject("topics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookRepositoryEditedChanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookRepositoryEditedChanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookRepositoryEditedChanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookRepositoryEditedChanges.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookRepositoryEditedChanges>() {
           @Override
           public void write(JsonWriter out, WebhookRepositoryEditedChanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookRepositoryEditedChanges read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookRepositoryEditedChanges given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookRepositoryEditedChanges
  * @throws IOException if the JSON string is invalid with respect to WebhookRepositoryEditedChanges
  */
  public static WebhookRepositoryEditedChanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookRepositoryEditedChanges.class);
  }

 /**
  * Convert an instance of WebhookRepositoryEditedChanges to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

