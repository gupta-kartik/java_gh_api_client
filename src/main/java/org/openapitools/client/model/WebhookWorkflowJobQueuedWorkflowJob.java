/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.WorkflowStep3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookWorkflowJobQueuedWorkflowJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookWorkflowJobQueuedWorkflowJob {
  public static final String SERIALIZED_NAME_CHECK_RUN_URL = "check_run_url";
  @SerializedName(SERIALIZED_NAME_CHECK_RUN_URL)
  private URI checkRunUrl;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private String completedAt;

  public static final String SERIALIZED_NAME_CONCLUSION = "conclusion";
  @SerializedName(SERIALIZED_NAME_CONCLUSION)
  private String conclusion;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_HEAD_SHA = "head_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_SHA)
  private String headSha;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_RUN_ATTEMPT = "run_attempt";
  @SerializedName(SERIALIZED_NAME_RUN_ATTEMPT)
  private Integer runAttempt;

  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private BigDecimal runId;

  public static final String SERIALIZED_NAME_RUN_URL = "run_url";
  @SerializedName(SERIALIZED_NAME_RUN_URL)
  private URI runUrl;

  public static final String SERIALIZED_NAME_RUNNER_GROUP_ID = "runner_group_id";
  @SerializedName(SERIALIZED_NAME_RUNNER_GROUP_ID)
  private Integer runnerGroupId;

  public static final String SERIALIZED_NAME_RUNNER_GROUP_NAME = "runner_group_name";
  @SerializedName(SERIALIZED_NAME_RUNNER_GROUP_NAME)
  private String runnerGroupName;

  public static final String SERIALIZED_NAME_RUNNER_ID = "runner_id";
  @SerializedName(SERIALIZED_NAME_RUNNER_ID)
  private Integer runnerId;

  public static final String SERIALIZED_NAME_RUNNER_NAME = "runner_name";
  @SerializedName(SERIALIZED_NAME_RUNNER_NAME)
  private String runnerName;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    IN_PROGRESS("in_progress"),
    
    COMPLETED("completed"),
    
    WAITING("waiting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_HEAD_BRANCH = "head_branch";
  @SerializedName(SERIALIZED_NAME_HEAD_BRANCH)
  private String headBranch;

  public static final String SERIALIZED_NAME_WORKFLOW_NAME = "workflow_name";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_NAME)
  private String workflowName;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<WorkflowStep3> steps = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public WebhookWorkflowJobQueuedWorkflowJob() {
  }

  public WebhookWorkflowJobQueuedWorkflowJob checkRunUrl(URI checkRunUrl) {
    
    this.checkRunUrl = checkRunUrl;
    return this;
  }

   /**
   * Get checkRunUrl
   * @return checkRunUrl
  **/
  @javax.annotation.Nonnull

  public URI getCheckRunUrl() {
    return checkRunUrl;
  }


  public void setCheckRunUrl(URI checkRunUrl) {
    this.checkRunUrl = checkRunUrl;
  }


  public WebhookWorkflowJobQueuedWorkflowJob completedAt(String completedAt) {
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Get completedAt
   * @return completedAt
  **/
  @javax.annotation.Nullable

  public String getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(String completedAt) {
    this.completedAt = completedAt;
  }


  public WebhookWorkflowJobQueuedWorkflowJob conclusion(String conclusion) {
    
    this.conclusion = conclusion;
    return this;
  }

   /**
   * Get conclusion
   * @return conclusion
  **/
  @javax.annotation.Nullable

  public String getConclusion() {
    return conclusion;
  }


  public void setConclusion(String conclusion) {
    this.conclusion = conclusion;
  }


  public WebhookWorkflowJobQueuedWorkflowJob createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The time that the job created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookWorkflowJobQueuedWorkflowJob headSha(String headSha) {
    
    this.headSha = headSha;
    return this;
  }

   /**
   * Get headSha
   * @return headSha
  **/
  @javax.annotation.Nonnull

  public String getHeadSha() {
    return headSha;
  }


  public void setHeadSha(String headSha) {
    this.headSha = headSha;
  }


  public WebhookWorkflowJobQueuedWorkflowJob htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WebhookWorkflowJobQueuedWorkflowJob id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookWorkflowJobQueuedWorkflowJob labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public WebhookWorkflowJobQueuedWorkflowJob addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nonnull

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public WebhookWorkflowJobQueuedWorkflowJob name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookWorkflowJobQueuedWorkflowJob nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runAttempt(Integer runAttempt) {
    
    this.runAttempt = runAttempt;
    return this;
  }

   /**
   * Get runAttempt
   * @return runAttempt
  **/
  @javax.annotation.Nonnull

  public Integer getRunAttempt() {
    return runAttempt;
  }


  public void setRunAttempt(Integer runAttempt) {
    this.runAttempt = runAttempt;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runId(BigDecimal runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * Get runId
   * @return runId
  **/
  @javax.annotation.Nonnull

  public BigDecimal getRunId() {
    return runId;
  }


  public void setRunId(BigDecimal runId) {
    this.runId = runId;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runUrl(URI runUrl) {
    
    this.runUrl = runUrl;
    return this;
  }

   /**
   * Get runUrl
   * @return runUrl
  **/
  @javax.annotation.Nonnull

  public URI getRunUrl() {
    return runUrl;
  }


  public void setRunUrl(URI runUrl) {
    this.runUrl = runUrl;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runnerGroupId(Integer runnerGroupId) {
    
    this.runnerGroupId = runnerGroupId;
    return this;
  }

   /**
   * Get runnerGroupId
   * @return runnerGroupId
  **/
  @javax.annotation.Nullable

  public Integer getRunnerGroupId() {
    return runnerGroupId;
  }


  public void setRunnerGroupId(Integer runnerGroupId) {
    this.runnerGroupId = runnerGroupId;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runnerGroupName(String runnerGroupName) {
    
    this.runnerGroupName = runnerGroupName;
    return this;
  }

   /**
   * Get runnerGroupName
   * @return runnerGroupName
  **/
  @javax.annotation.Nullable

  public String getRunnerGroupName() {
    return runnerGroupName;
  }


  public void setRunnerGroupName(String runnerGroupName) {
    this.runnerGroupName = runnerGroupName;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runnerId(Integer runnerId) {
    
    this.runnerId = runnerId;
    return this;
  }

   /**
   * Get runnerId
   * @return runnerId
  **/
  @javax.annotation.Nullable

  public Integer getRunnerId() {
    return runnerId;
  }


  public void setRunnerId(Integer runnerId) {
    this.runnerId = runnerId;
  }


  public WebhookWorkflowJobQueuedWorkflowJob runnerName(String runnerName) {
    
    this.runnerName = runnerName;
    return this;
  }

   /**
   * Get runnerName
   * @return runnerName
  **/
  @javax.annotation.Nullable

  public String getRunnerName() {
    return runnerName;
  }


  public void setRunnerName(String runnerName) {
    this.runnerName = runnerName;
  }


  public WebhookWorkflowJobQueuedWorkflowJob startedAt(OffsetDateTime startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public WebhookWorkflowJobQueuedWorkflowJob status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WebhookWorkflowJobQueuedWorkflowJob headBranch(String headBranch) {
    
    this.headBranch = headBranch;
    return this;
  }

   /**
   * The name of the current branch.
   * @return headBranch
  **/
  @javax.annotation.Nullable

  public String getHeadBranch() {
    return headBranch;
  }


  public void setHeadBranch(String headBranch) {
    this.headBranch = headBranch;
  }


  public WebhookWorkflowJobQueuedWorkflowJob workflowName(String workflowName) {
    
    this.workflowName = workflowName;
    return this;
  }

   /**
   * The name of the workflow.
   * @return workflowName
  **/
  @javax.annotation.Nullable

  public String getWorkflowName() {
    return workflowName;
  }


  public void setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
  }


  public WebhookWorkflowJobQueuedWorkflowJob steps(List<WorkflowStep3> steps) {
    
    this.steps = steps;
    return this;
  }

  public WebhookWorkflowJobQueuedWorkflowJob addStepsItem(WorkflowStep3 stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nonnull

  public List<WorkflowStep3> getSteps() {
    return steps;
  }


  public void setSteps(List<WorkflowStep3> steps) {
    this.steps = steps;
  }


  public WebhookWorkflowJobQueuedWorkflowJob url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookWorkflowJobQueuedWorkflowJob webhookWorkflowJobQueuedWorkflowJob = (WebhookWorkflowJobQueuedWorkflowJob) o;
    return Objects.equals(this.checkRunUrl, webhookWorkflowJobQueuedWorkflowJob.checkRunUrl) &&
        Objects.equals(this.completedAt, webhookWorkflowJobQueuedWorkflowJob.completedAt) &&
        Objects.equals(this.conclusion, webhookWorkflowJobQueuedWorkflowJob.conclusion) &&
        Objects.equals(this.createdAt, webhookWorkflowJobQueuedWorkflowJob.createdAt) &&
        Objects.equals(this.headSha, webhookWorkflowJobQueuedWorkflowJob.headSha) &&
        Objects.equals(this.htmlUrl, webhookWorkflowJobQueuedWorkflowJob.htmlUrl) &&
        Objects.equals(this.id, webhookWorkflowJobQueuedWorkflowJob.id) &&
        Objects.equals(this.labels, webhookWorkflowJobQueuedWorkflowJob.labels) &&
        Objects.equals(this.name, webhookWorkflowJobQueuedWorkflowJob.name) &&
        Objects.equals(this.nodeId, webhookWorkflowJobQueuedWorkflowJob.nodeId) &&
        Objects.equals(this.runAttempt, webhookWorkflowJobQueuedWorkflowJob.runAttempt) &&
        Objects.equals(this.runId, webhookWorkflowJobQueuedWorkflowJob.runId) &&
        Objects.equals(this.runUrl, webhookWorkflowJobQueuedWorkflowJob.runUrl) &&
        Objects.equals(this.runnerGroupId, webhookWorkflowJobQueuedWorkflowJob.runnerGroupId) &&
        Objects.equals(this.runnerGroupName, webhookWorkflowJobQueuedWorkflowJob.runnerGroupName) &&
        Objects.equals(this.runnerId, webhookWorkflowJobQueuedWorkflowJob.runnerId) &&
        Objects.equals(this.runnerName, webhookWorkflowJobQueuedWorkflowJob.runnerName) &&
        Objects.equals(this.startedAt, webhookWorkflowJobQueuedWorkflowJob.startedAt) &&
        Objects.equals(this.status, webhookWorkflowJobQueuedWorkflowJob.status) &&
        Objects.equals(this.headBranch, webhookWorkflowJobQueuedWorkflowJob.headBranch) &&
        Objects.equals(this.workflowName, webhookWorkflowJobQueuedWorkflowJob.workflowName) &&
        Objects.equals(this.steps, webhookWorkflowJobQueuedWorkflowJob.steps) &&
        Objects.equals(this.url, webhookWorkflowJobQueuedWorkflowJob.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkRunUrl, completedAt, conclusion, createdAt, headSha, htmlUrl, id, labels, name, nodeId, runAttempt, runId, runUrl, runnerGroupId, runnerGroupName, runnerId, runnerName, startedAt, status, headBranch, workflowName, steps, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookWorkflowJobQueuedWorkflowJob {\n");
    sb.append("    checkRunUrl: ").append(toIndentedString(checkRunUrl)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    conclusion: ").append(toIndentedString(conclusion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    headSha: ").append(toIndentedString(headSha)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    runAttempt: ").append(toIndentedString(runAttempt)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    runUrl: ").append(toIndentedString(runUrl)).append("\n");
    sb.append("    runnerGroupId: ").append(toIndentedString(runnerGroupId)).append("\n");
    sb.append("    runnerGroupName: ").append(toIndentedString(runnerGroupName)).append("\n");
    sb.append("    runnerId: ").append(toIndentedString(runnerId)).append("\n");
    sb.append("    runnerName: ").append(toIndentedString(runnerName)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    headBranch: ").append(toIndentedString(headBranch)).append("\n");
    sb.append("    workflowName: ").append(toIndentedString(workflowName)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("check_run_url");
    openapiFields.add("completed_at");
    openapiFields.add("conclusion");
    openapiFields.add("created_at");
    openapiFields.add("head_sha");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("run_attempt");
    openapiFields.add("run_id");
    openapiFields.add("run_url");
    openapiFields.add("runner_group_id");
    openapiFields.add("runner_group_name");
    openapiFields.add("runner_id");
    openapiFields.add("runner_name");
    openapiFields.add("started_at");
    openapiFields.add("status");
    openapiFields.add("head_branch");
    openapiFields.add("workflow_name");
    openapiFields.add("steps");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("check_run_url");
    openapiRequiredFields.add("completed_at");
    openapiRequiredFields.add("conclusion");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("head_sha");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("run_attempt");
    openapiRequiredFields.add("run_id");
    openapiRequiredFields.add("run_url");
    openapiRequiredFields.add("runner_group_id");
    openapiRequiredFields.add("runner_group_name");
    openapiRequiredFields.add("runner_id");
    openapiRequiredFields.add("runner_name");
    openapiRequiredFields.add("started_at");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("head_branch");
    openapiRequiredFields.add("workflow_name");
    openapiRequiredFields.add("steps");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookWorkflowJobQueuedWorkflowJob
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookWorkflowJobQueuedWorkflowJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookWorkflowJobQueuedWorkflowJob is not found in the empty JSON string", WebhookWorkflowJobQueuedWorkflowJob.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookWorkflowJobQueuedWorkflowJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookWorkflowJobQueuedWorkflowJob` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookWorkflowJobQueuedWorkflowJob.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("check_run_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_run_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_run_url").toString()));
      }
      if (!jsonObj.get("completed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completed_at").toString()));
      }
      if (!jsonObj.get("conclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusion").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("head_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_sha").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("labels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("run_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_url").toString()));
      }
      if (!jsonObj.get("runner_group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runner_group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runner_group_name").toString()));
      }
      if (!jsonObj.get("runner_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runner_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runner_name").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("head_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_branch").toString()));
      }
      if (!jsonObj.get("workflow_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("steps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
      }

      JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
      // validate the required field `steps` (array)
      for (int i = 0; i < jsonArraysteps.size(); i++) {
        WorkflowStep3.validateJsonObject(jsonArraysteps.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookWorkflowJobQueuedWorkflowJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookWorkflowJobQueuedWorkflowJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookWorkflowJobQueuedWorkflowJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookWorkflowJobQueuedWorkflowJob.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookWorkflowJobQueuedWorkflowJob>() {
           @Override
           public void write(JsonWriter out, WebhookWorkflowJobQueuedWorkflowJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookWorkflowJobQueuedWorkflowJob read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookWorkflowJobQueuedWorkflowJob given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookWorkflowJobQueuedWorkflowJob
  * @throws IOException if the JSON string is invalid with respect to WebhookWorkflowJobQueuedWorkflowJob
  */
  public static WebhookWorkflowJobQueuedWorkflowJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookWorkflowJobQueuedWorkflowJob.class);
  }

 /**
  * Convert an instance of WebhookWorkflowJobQueuedWorkflowJob to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

