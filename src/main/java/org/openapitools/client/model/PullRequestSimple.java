/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.AutoMerge;
import org.openapitools.client.model.NullableMilestone;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.PullRequestSimpleHead;
import org.openapitools.client.model.PullRequestSimpleLabelsInner;
import org.openapitools.client.model.PullRequestSimpleLinks;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.Team;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pull Request Simple
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class PullRequestSimple {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private URI diffUrl;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private URI patchUrl;

  public static final String SERIALIZED_NAME_ISSUE_URL = "issue_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_URL)
  private URI issueUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private URI commitsUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS_URL = "review_comments_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS_URL)
  private URI reviewCommentsUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENT_URL = "review_comment_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENT_URL)
  private String reviewCommentUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private URI statusesUrl;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NullableSimpleUser user;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<PullRequestSimpleLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private NullableMilestone milestone;

  public static final String SERIALIZED_NAME_ACTIVE_LOCK_REASON = "active_lock_reason";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCK_REASON)
  private String activeLockReason;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_MERGED_AT = "merged_at";
  @SerializedName(SERIALIZED_NAME_MERGED_AT)
  private OffsetDateTime mergedAt;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private NullableSimpleUser assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<SimpleUser> assignees;

  public static final String SERIALIZED_NAME_REQUESTED_REVIEWERS = "requested_reviewers";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REVIEWERS)
  private List<SimpleUser> requestedReviewers;

  public static final String SERIALIZED_NAME_REQUESTED_TEAMS = "requested_teams";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TEAMS)
  private List<Team> requestedTeams;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private PullRequestSimpleHead head;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private PullRequestSimpleHead base;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PullRequestSimpleLinks links;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociation authorAssociation;

  public static final String SERIALIZED_NAME_AUTO_MERGE = "auto_merge";
  @SerializedName(SERIALIZED_NAME_AUTO_MERGE)
  private AutoMerge autoMerge;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public PullRequestSimple() {
  }

  public PullRequestSimple url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public PullRequestSimple id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public PullRequestSimple nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public PullRequestSimple htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public PullRequestSimple diffUrl(URI diffUrl) {
    
    this.diffUrl = diffUrl;
    return this;
  }

   /**
   * Get diffUrl
   * @return diffUrl
  **/
  @javax.annotation.Nonnull

  public URI getDiffUrl() {
    return diffUrl;
  }


  public void setDiffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
  }


  public PullRequestSimple patchUrl(URI patchUrl) {
    
    this.patchUrl = patchUrl;
    return this;
  }

   /**
   * Get patchUrl
   * @return patchUrl
  **/
  @javax.annotation.Nonnull

  public URI getPatchUrl() {
    return patchUrl;
  }


  public void setPatchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
  }


  public PullRequestSimple issueUrl(URI issueUrl) {
    
    this.issueUrl = issueUrl;
    return this;
  }

   /**
   * Get issueUrl
   * @return issueUrl
  **/
  @javax.annotation.Nonnull

  public URI getIssueUrl() {
    return issueUrl;
  }


  public void setIssueUrl(URI issueUrl) {
    this.issueUrl = issueUrl;
  }


  public PullRequestSimple commitsUrl(URI commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public PullRequestSimple reviewCommentsUrl(URI reviewCommentsUrl) {
    
    this.reviewCommentsUrl = reviewCommentsUrl;
    return this;
  }

   /**
   * Get reviewCommentsUrl
   * @return reviewCommentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getReviewCommentsUrl() {
    return reviewCommentsUrl;
  }


  public void setReviewCommentsUrl(URI reviewCommentsUrl) {
    this.reviewCommentsUrl = reviewCommentsUrl;
  }


  public PullRequestSimple reviewCommentUrl(String reviewCommentUrl) {
    
    this.reviewCommentUrl = reviewCommentUrl;
    return this;
  }

   /**
   * Get reviewCommentUrl
   * @return reviewCommentUrl
  **/
  @javax.annotation.Nonnull

  public String getReviewCommentUrl() {
    return reviewCommentUrl;
  }


  public void setReviewCommentUrl(String reviewCommentUrl) {
    this.reviewCommentUrl = reviewCommentUrl;
  }


  public PullRequestSimple commentsUrl(URI commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public PullRequestSimple statusesUrl(URI statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nonnull

  public URI getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public PullRequestSimple number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public PullRequestSimple state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public PullRequestSimple locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nonnull

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public PullRequestSimple title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public PullRequestSimple user(NullableSimpleUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getUser() {
    return user;
  }


  public void setUser(NullableSimpleUser user) {
    this.user = user;
  }


  public PullRequestSimple body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public PullRequestSimple labels(List<PullRequestSimpleLabelsInner> labels) {
    
    this.labels = labels;
    return this;
  }

  public PullRequestSimple addLabelsItem(PullRequestSimpleLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nonnull

  public List<PullRequestSimpleLabelsInner> getLabels() {
    return labels;
  }


  public void setLabels(List<PullRequestSimpleLabelsInner> labels) {
    this.labels = labels;
  }


  public PullRequestSimple milestone(NullableMilestone milestone) {
    
    this.milestone = milestone;
    return this;
  }

   /**
   * Get milestone
   * @return milestone
  **/
  @javax.annotation.Nullable

  public NullableMilestone getMilestone() {
    return milestone;
  }


  public void setMilestone(NullableMilestone milestone) {
    this.milestone = milestone;
  }


  public PullRequestSimple activeLockReason(String activeLockReason) {
    
    this.activeLockReason = activeLockReason;
    return this;
  }

   /**
   * Get activeLockReason
   * @return activeLockReason
  **/
  @javax.annotation.Nullable

  public String getActiveLockReason() {
    return activeLockReason;
  }


  public void setActiveLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
  }


  public PullRequestSimple createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PullRequestSimple updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PullRequestSimple closedAt(OffsetDateTime closedAt) {
    
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Get closedAt
   * @return closedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getClosedAt() {
    return closedAt;
  }


  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public PullRequestSimple mergedAt(OffsetDateTime mergedAt) {
    
    this.mergedAt = mergedAt;
    return this;
  }

   /**
   * Get mergedAt
   * @return mergedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getMergedAt() {
    return mergedAt;
  }


  public void setMergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
  }


  public PullRequestSimple mergeCommitSha(String mergeCommitSha) {
    
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

   /**
   * Get mergeCommitSha
   * @return mergeCommitSha
  **/
  @javax.annotation.Nullable

  public String getMergeCommitSha() {
    return mergeCommitSha;
  }


  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public PullRequestSimple assignee(NullableSimpleUser assignee) {
    
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getAssignee() {
    return assignee;
  }


  public void setAssignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
  }


  public PullRequestSimple assignees(List<SimpleUser> assignees) {
    
    this.assignees = assignees;
    return this;
  }

  public PullRequestSimple addAssigneesItem(SimpleUser assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

   /**
   * Get assignees
   * @return assignees
  **/
  @javax.annotation.Nullable

  public List<SimpleUser> getAssignees() {
    return assignees;
  }


  public void setAssignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
  }


  public PullRequestSimple requestedReviewers(List<SimpleUser> requestedReviewers) {
    
    this.requestedReviewers = requestedReviewers;
    return this;
  }

  public PullRequestSimple addRequestedReviewersItem(SimpleUser requestedReviewersItem) {
    if (this.requestedReviewers == null) {
      this.requestedReviewers = new ArrayList<>();
    }
    this.requestedReviewers.add(requestedReviewersItem);
    return this;
  }

   /**
   * Get requestedReviewers
   * @return requestedReviewers
  **/
  @javax.annotation.Nullable

  public List<SimpleUser> getRequestedReviewers() {
    return requestedReviewers;
  }


  public void setRequestedReviewers(List<SimpleUser> requestedReviewers) {
    this.requestedReviewers = requestedReviewers;
  }


  public PullRequestSimple requestedTeams(List<Team> requestedTeams) {
    
    this.requestedTeams = requestedTeams;
    return this;
  }

  public PullRequestSimple addRequestedTeamsItem(Team requestedTeamsItem) {
    if (this.requestedTeams == null) {
      this.requestedTeams = new ArrayList<>();
    }
    this.requestedTeams.add(requestedTeamsItem);
    return this;
  }

   /**
   * Get requestedTeams
   * @return requestedTeams
  **/
  @javax.annotation.Nullable

  public List<Team> getRequestedTeams() {
    return requestedTeams;
  }


  public void setRequestedTeams(List<Team> requestedTeams) {
    this.requestedTeams = requestedTeams;
  }


  public PullRequestSimple head(PullRequestSimpleHead head) {
    
    this.head = head;
    return this;
  }

   /**
   * Get head
   * @return head
  **/
  @javax.annotation.Nonnull

  public PullRequestSimpleHead getHead() {
    return head;
  }


  public void setHead(PullRequestSimpleHead head) {
    this.head = head;
  }


  public PullRequestSimple base(PullRequestSimpleHead base) {
    
    this.base = base;
    return this;
  }

   /**
   * Get base
   * @return base
  **/
  @javax.annotation.Nonnull

  public PullRequestSimpleHead getBase() {
    return base;
  }


  public void setBase(PullRequestSimpleHead base) {
    this.base = base;
  }


  public PullRequestSimple links(PullRequestSimpleLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull

  public PullRequestSimpleLinks getLinks() {
    return links;
  }


  public void setLinks(PullRequestSimpleLinks links) {
    this.links = links;
  }


  public PullRequestSimple authorAssociation(AuthorAssociation authorAssociation) {
    
    this.authorAssociation = authorAssociation;
    return this;
  }

   /**
   * Get authorAssociation
   * @return authorAssociation
  **/
  @javax.annotation.Nonnull

  public AuthorAssociation getAuthorAssociation() {
    return authorAssociation;
  }


  public void setAuthorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public PullRequestSimple autoMerge(AutoMerge autoMerge) {
    
    this.autoMerge = autoMerge;
    return this;
  }

   /**
   * Get autoMerge
   * @return autoMerge
  **/
  @javax.annotation.Nullable

  public AutoMerge getAutoMerge() {
    return autoMerge;
  }


  public void setAutoMerge(AutoMerge autoMerge) {
    this.autoMerge = autoMerge;
  }


  public PullRequestSimple draft(Boolean draft) {
    
    this.draft = draft;
    return this;
  }

   /**
   * Indicates whether or not the pull request is a draft.
   * @return draft
  **/
  @javax.annotation.Nullable

  public Boolean getDraft() {
    return draft;
  }


  public void setDraft(Boolean draft) {
    this.draft = draft;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequestSimple pullRequestSimple = (PullRequestSimple) o;
    return Objects.equals(this.url, pullRequestSimple.url) &&
        Objects.equals(this.id, pullRequestSimple.id) &&
        Objects.equals(this.nodeId, pullRequestSimple.nodeId) &&
        Objects.equals(this.htmlUrl, pullRequestSimple.htmlUrl) &&
        Objects.equals(this.diffUrl, pullRequestSimple.diffUrl) &&
        Objects.equals(this.patchUrl, pullRequestSimple.patchUrl) &&
        Objects.equals(this.issueUrl, pullRequestSimple.issueUrl) &&
        Objects.equals(this.commitsUrl, pullRequestSimple.commitsUrl) &&
        Objects.equals(this.reviewCommentsUrl, pullRequestSimple.reviewCommentsUrl) &&
        Objects.equals(this.reviewCommentUrl, pullRequestSimple.reviewCommentUrl) &&
        Objects.equals(this.commentsUrl, pullRequestSimple.commentsUrl) &&
        Objects.equals(this.statusesUrl, pullRequestSimple.statusesUrl) &&
        Objects.equals(this.number, pullRequestSimple.number) &&
        Objects.equals(this.state, pullRequestSimple.state) &&
        Objects.equals(this.locked, pullRequestSimple.locked) &&
        Objects.equals(this.title, pullRequestSimple.title) &&
        Objects.equals(this.user, pullRequestSimple.user) &&
        Objects.equals(this.body, pullRequestSimple.body) &&
        Objects.equals(this.labels, pullRequestSimple.labels) &&
        Objects.equals(this.milestone, pullRequestSimple.milestone) &&
        Objects.equals(this.activeLockReason, pullRequestSimple.activeLockReason) &&
        Objects.equals(this.createdAt, pullRequestSimple.createdAt) &&
        Objects.equals(this.updatedAt, pullRequestSimple.updatedAt) &&
        Objects.equals(this.closedAt, pullRequestSimple.closedAt) &&
        Objects.equals(this.mergedAt, pullRequestSimple.mergedAt) &&
        Objects.equals(this.mergeCommitSha, pullRequestSimple.mergeCommitSha) &&
        Objects.equals(this.assignee, pullRequestSimple.assignee) &&
        Objects.equals(this.assignees, pullRequestSimple.assignees) &&
        Objects.equals(this.requestedReviewers, pullRequestSimple.requestedReviewers) &&
        Objects.equals(this.requestedTeams, pullRequestSimple.requestedTeams) &&
        Objects.equals(this.head, pullRequestSimple.head) &&
        Objects.equals(this.base, pullRequestSimple.base) &&
        Objects.equals(this.links, pullRequestSimple.links) &&
        Objects.equals(this.authorAssociation, pullRequestSimple.authorAssociation) &&
        Objects.equals(this.autoMerge, pullRequestSimple.autoMerge) &&
        Objects.equals(this.draft, pullRequestSimple.draft);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, id, nodeId, htmlUrl, diffUrl, patchUrl, issueUrl, commitsUrl, reviewCommentsUrl, reviewCommentUrl, commentsUrl, statusesUrl, number, state, locked, title, user, body, labels, milestone, activeLockReason, createdAt, updatedAt, closedAt, mergedAt, mergeCommitSha, assignee, assignees, requestedReviewers, requestedTeams, head, base, links, authorAssociation, autoMerge, draft);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequestSimple {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    reviewCommentsUrl: ").append(toIndentedString(reviewCommentsUrl)).append("\n");
    sb.append("    reviewCommentUrl: ").append(toIndentedString(reviewCommentUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    activeLockReason: ").append(toIndentedString(activeLockReason)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    mergedAt: ").append(toIndentedString(mergedAt)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    requestedReviewers: ").append(toIndentedString(requestedReviewers)).append("\n");
    sb.append("    requestedTeams: ").append(toIndentedString(requestedTeams)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    autoMerge: ").append(toIndentedString(autoMerge)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("html_url");
    openapiFields.add("diff_url");
    openapiFields.add("patch_url");
    openapiFields.add("issue_url");
    openapiFields.add("commits_url");
    openapiFields.add("review_comments_url");
    openapiFields.add("review_comment_url");
    openapiFields.add("comments_url");
    openapiFields.add("statuses_url");
    openapiFields.add("number");
    openapiFields.add("state");
    openapiFields.add("locked");
    openapiFields.add("title");
    openapiFields.add("user");
    openapiFields.add("body");
    openapiFields.add("labels");
    openapiFields.add("milestone");
    openapiFields.add("active_lock_reason");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("closed_at");
    openapiFields.add("merged_at");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("requested_reviewers");
    openapiFields.add("requested_teams");
    openapiFields.add("head");
    openapiFields.add("base");
    openapiFields.add("_links");
    openapiFields.add("author_association");
    openapiFields.add("auto_merge");
    openapiFields.add("draft");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("diff_url");
    openapiRequiredFields.add("patch_url");
    openapiRequiredFields.add("issue_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("review_comments_url");
    openapiRequiredFields.add("review_comment_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("milestone");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("merged_at");
    openapiRequiredFields.add("merge_commit_sha");
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("head");
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("author_association");
    openapiRequiredFields.add("auto_merge");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PullRequestSimple
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PullRequestSimple.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullRequestSimple is not found in the empty JSON string", PullRequestSimple.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PullRequestSimple.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullRequestSimple` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullRequestSimple.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      if (!jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      if (!jsonObj.get("issue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("review_comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comments_url").toString()));
      }
      if (!jsonObj.get("review_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comment_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the required field `user`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        PullRequestSimpleLabelsInner.validateJsonObject(jsonArraylabels.get(i).getAsJsonObject());
      };
      // validate the required field `milestone`
      NullableMilestone.validateJsonObject(jsonObj.getAsJsonObject("milestone"));
      if ((jsonObj.get("active_lock_reason") != null && !jsonObj.get("active_lock_reason").isJsonNull()) && !jsonObj.get("active_lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_lock_reason").toString()));
      }
      if (!jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      // validate the required field `assignee`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("assignee"));
      if (jsonObj.get("assignees") != null && !jsonObj.get("assignees").isJsonNull()) {
        JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
        if (jsonArrayassignees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
          }

          // validate the optional field `assignees` (array)
          for (int i = 0; i < jsonArrayassignees.size(); i++) {
            SimpleUser.validateJsonObject(jsonArrayassignees.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("requested_reviewers") != null && !jsonObj.get("requested_reviewers").isJsonNull()) {
        JsonArray jsonArrayrequestedReviewers = jsonObj.getAsJsonArray("requested_reviewers");
        if (jsonArrayrequestedReviewers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_reviewers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("requested_reviewers").toString()));
          }

          // validate the optional field `requested_reviewers` (array)
          for (int i = 0; i < jsonArrayrequestedReviewers.size(); i++) {
            SimpleUser.validateJsonObject(jsonArrayrequestedReviewers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("requested_teams") != null && !jsonObj.get("requested_teams").isJsonNull()) {
        JsonArray jsonArrayrequestedTeams = jsonObj.getAsJsonArray("requested_teams");
        if (jsonArrayrequestedTeams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_teams` to be an array in the JSON string but got `%s`", jsonObj.get("requested_teams").toString()));
          }

          // validate the optional field `requested_teams` (array)
          for (int i = 0; i < jsonArrayrequestedTeams.size(); i++) {
            Team.validateJsonObject(jsonArrayrequestedTeams.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `head`
      PullRequestSimpleHead.validateJsonObject(jsonObj.getAsJsonObject("head"));
      // validate the required field `base`
      PullRequestSimpleHead.validateJsonObject(jsonObj.getAsJsonObject("base"));
      // validate the required field `_links`
      PullRequestSimpleLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      // validate the required field `auto_merge`
      AutoMerge.validateJsonObject(jsonObj.getAsJsonObject("auto_merge"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullRequestSimple.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullRequestSimple' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullRequestSimple> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullRequestSimple.class));

       return (TypeAdapter<T>) new TypeAdapter<PullRequestSimple>() {
           @Override
           public void write(JsonWriter out, PullRequestSimple value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullRequestSimple read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PullRequestSimple given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PullRequestSimple
  * @throws IOException if the JSON string is invalid with respect to PullRequestSimple
  */
  public static PullRequestSimple fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullRequestSimple.class);
  }

 /**
  * Convert an instance of PullRequestSimple to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

