/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for code scanning default setup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CodeScanningDefaultSetup {
  /**
   * Code scanning default setup has been configured or not.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CONFIGURED("configured"),
    
    NOT_CONFIGURED("not-configured");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Gets or Sets languages
   */
  @JsonAdapter(LanguagesEnum.Adapter.class)
  public enum LanguagesEnum {
    C("c"),
    
    CPP("cpp"),
    
    CSHARP("csharp"),
    
    GO("go"),
    
    JAVA("java"),
    
    JAVASCRIPT("javascript"),
    
    KOTLIN("kotlin"),
    
    PYTHON("python"),
    
    RUBY("ruby"),
    
    TYPESCRIPT("typescript");

    private String value;

    LanguagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguagesEnum fromValue(String value) {
      for (LanguagesEnum b : LanguagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguagesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<LanguagesEnum> languages;

  /**
   * CodeQL query suite to be used.
   */
  @JsonAdapter(QuerySuiteEnum.Adapter.class)
  public enum QuerySuiteEnum {
    DEFAULT("default"),
    
    EXTENDED("extended");

    private String value;

    QuerySuiteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuerySuiteEnum fromValue(String value) {
      for (QuerySuiteEnum b : QuerySuiteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuerySuiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuerySuiteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuerySuiteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuerySuiteEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUERY_SUITE = "query_suite";
  @SerializedName(SERIALIZED_NAME_QUERY_SUITE)
  private QuerySuiteEnum querySuite;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CodeScanningDefaultSetup() {
  }

  public CodeScanningDefaultSetup state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Code scanning default setup has been configured or not.
   * @return state
  **/
  @javax.annotation.Nullable

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public CodeScanningDefaultSetup languages(List<LanguagesEnum> languages) {
    
    this.languages = languages;
    return this;
  }

  public CodeScanningDefaultSetup addLanguagesItem(LanguagesEnum languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

   /**
   * Languages to be analysed.
   * @return languages
  **/
  @javax.annotation.Nullable

  public List<LanguagesEnum> getLanguages() {
    return languages;
  }


  public void setLanguages(List<LanguagesEnum> languages) {
    this.languages = languages;
  }


  public CodeScanningDefaultSetup querySuite(QuerySuiteEnum querySuite) {
    
    this.querySuite = querySuite;
    return this;
  }

   /**
   * CodeQL query suite to be used.
   * @return querySuite
  **/
  @javax.annotation.Nullable

  public QuerySuiteEnum getQuerySuite() {
    return querySuite;
  }


  public void setQuerySuite(QuerySuiteEnum querySuite) {
    this.querySuite = querySuite;
  }


  public CodeScanningDefaultSetup updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp of latest configuration update.
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeScanningDefaultSetup codeScanningDefaultSetup = (CodeScanningDefaultSetup) o;
    return Objects.equals(this.state, codeScanningDefaultSetup.state) &&
        Objects.equals(this.languages, codeScanningDefaultSetup.languages) &&
        Objects.equals(this.querySuite, codeScanningDefaultSetup.querySuite) &&
        Objects.equals(this.updatedAt, codeScanningDefaultSetup.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, languages, querySuite, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeScanningDefaultSetup {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    querySuite: ").append(toIndentedString(querySuite)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("languages");
    openapiFields.add("query_suite");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CodeScanningDefaultSetup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CodeScanningDefaultSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeScanningDefaultSetup is not found in the empty JSON string", CodeScanningDefaultSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CodeScanningDefaultSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeScanningDefaultSetup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("query_suite") != null && !jsonObj.get("query_suite").isJsonNull()) && !jsonObj.get("query_suite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_suite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_suite").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeScanningDefaultSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeScanningDefaultSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeScanningDefaultSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeScanningDefaultSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeScanningDefaultSetup>() {
           @Override
           public void write(JsonWriter out, CodeScanningDefaultSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeScanningDefaultSetup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CodeScanningDefaultSetup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CodeScanningDefaultSetup
  * @throws IOException if the JSON string is invalid with respect to CodeScanningDefaultSetup
  */
  public static CodeScanningDefaultSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeScanningDefaultSetup.class);
  }

 /**
  * Convert an instance of CodeScanningDefaultSetup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

