/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.RepositoryRule;
import org.openapitools.client.model.RepositoryRuleEnforcement;
import org.openapitools.client.model.RepositoryRulesetBypassActor;
import org.openapitools.client.model.RepositoryRulesetConditions;
import org.openapitools.client.model.RepositoryRulesetLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of rules to apply when specified conditions are met.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class RepositoryRuleset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The target of the ruleset
   */
  @JsonAdapter(TargetEnum.Adapter.class)
  public enum TargetEnum {
    BRANCH("branch"),
    
    TAG("tag");

    private String value;

    TargetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetEnum fromValue(String value) {
      for (TargetEnum b : TargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TargetEnum target;

  /**
   * The type of the source of the ruleset
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    REPOSITORY("Repository"),
    
    ORGANIZATION("Organization");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "source_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_ENFORCEMENT = "enforcement";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT)
  private RepositoryRuleEnforcement enforcement;

  /**
   * The permission level required to bypass this ruleset. \&quot;repository\&quot; allows those with bypass permission at the repository level to bypass. \&quot;organization\&quot; allows those with bypass permission at the organization level to bypass. \&quot;none\&quot; prevents anyone from bypassing.
   */
  @JsonAdapter(BypassModeEnum.Adapter.class)
  public enum BypassModeEnum {
    NONE("none"),
    
    REPOSITORY("repository"),
    
    ORGANIZATION("organization");

    private String value;

    BypassModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BypassModeEnum fromValue(String value) {
      for (BypassModeEnum b : BypassModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BypassModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BypassModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BypassModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BypassModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BYPASS_MODE = "bypass_mode";
  @SerializedName(SERIALIZED_NAME_BYPASS_MODE)
  private BypassModeEnum bypassMode;

  public static final String SERIALIZED_NAME_BYPASS_ACTORS = "bypass_actors";
  @SerializedName(SERIALIZED_NAME_BYPASS_ACTORS)
  private List<RepositoryRulesetBypassActor> bypassActors;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private RepositoryRulesetLinks links;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private RepositoryRulesetConditions conditions;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<RepositoryRule> rules;

  public RepositoryRuleset() {
  }

  public RepositoryRuleset id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the ruleset
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public RepositoryRuleset name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the ruleset
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RepositoryRuleset target(TargetEnum target) {
    
    this.target = target;
    return this;
  }

   /**
   * The target of the ruleset
   * @return target
  **/
  @javax.annotation.Nullable

  public TargetEnum getTarget() {
    return target;
  }


  public void setTarget(TargetEnum target) {
    this.target = target;
  }


  public RepositoryRuleset sourceType(SourceTypeEnum sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * The type of the source of the ruleset
   * @return sourceType
  **/
  @javax.annotation.Nullable

  public SourceTypeEnum getSourceType() {
    return sourceType;
  }


  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public RepositoryRuleset source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The name of the source
   * @return source
  **/
  @javax.annotation.Nonnull

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public RepositoryRuleset enforcement(RepositoryRuleEnforcement enforcement) {
    
    this.enforcement = enforcement;
    return this;
  }

   /**
   * Get enforcement
   * @return enforcement
  **/
  @javax.annotation.Nonnull

  public RepositoryRuleEnforcement getEnforcement() {
    return enforcement;
  }


  public void setEnforcement(RepositoryRuleEnforcement enforcement) {
    this.enforcement = enforcement;
  }


  public RepositoryRuleset bypassMode(BypassModeEnum bypassMode) {
    
    this.bypassMode = bypassMode;
    return this;
  }

   /**
   * The permission level required to bypass this ruleset. \&quot;repository\&quot; allows those with bypass permission at the repository level to bypass. \&quot;organization\&quot; allows those with bypass permission at the organization level to bypass. \&quot;none\&quot; prevents anyone from bypassing.
   * @return bypassMode
  **/
  @javax.annotation.Nullable

  public BypassModeEnum getBypassMode() {
    return bypassMode;
  }


  public void setBypassMode(BypassModeEnum bypassMode) {
    this.bypassMode = bypassMode;
  }


  public RepositoryRuleset bypassActors(List<RepositoryRulesetBypassActor> bypassActors) {
    
    this.bypassActors = bypassActors;
    return this;
  }

  public RepositoryRuleset addBypassActorsItem(RepositoryRulesetBypassActor bypassActorsItem) {
    if (this.bypassActors == null) {
      this.bypassActors = new ArrayList<>();
    }
    this.bypassActors.add(bypassActorsItem);
    return this;
  }

   /**
   * The actors that can bypass the rules in this ruleset
   * @return bypassActors
  **/
  @javax.annotation.Nullable

  public List<RepositoryRulesetBypassActor> getBypassActors() {
    return bypassActors;
  }


  public void setBypassActors(List<RepositoryRulesetBypassActor> bypassActors) {
    this.bypassActors = bypassActors;
  }


  public RepositoryRuleset nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nullable

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public RepositoryRuleset links(RepositoryRulesetLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable

  public RepositoryRulesetLinks getLinks() {
    return links;
  }


  public void setLinks(RepositoryRulesetLinks links) {
    this.links = links;
  }


  public RepositoryRuleset conditions(RepositoryRulesetConditions conditions) {
    
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable

  public RepositoryRulesetConditions getConditions() {
    return conditions;
  }


  public void setConditions(RepositoryRulesetConditions conditions) {
    this.conditions = conditions;
  }


  public RepositoryRuleset rules(List<RepositoryRule> rules) {
    
    this.rules = rules;
    return this;
  }

  public RepositoryRuleset addRulesItem(RepositoryRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable

  public List<RepositoryRule> getRules() {
    return rules;
  }


  public void setRules(List<RepositoryRule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryRuleset repositoryRuleset = (RepositoryRuleset) o;
    return Objects.equals(this.id, repositoryRuleset.id) &&
        Objects.equals(this.name, repositoryRuleset.name) &&
        Objects.equals(this.target, repositoryRuleset.target) &&
        Objects.equals(this.sourceType, repositoryRuleset.sourceType) &&
        Objects.equals(this.source, repositoryRuleset.source) &&
        Objects.equals(this.enforcement, repositoryRuleset.enforcement) &&
        Objects.equals(this.bypassMode, repositoryRuleset.bypassMode) &&
        Objects.equals(this.bypassActors, repositoryRuleset.bypassActors) &&
        Objects.equals(this.nodeId, repositoryRuleset.nodeId) &&
        Objects.equals(this.links, repositoryRuleset.links) &&
        Objects.equals(this.conditions, repositoryRuleset.conditions) &&
        Objects.equals(this.rules, repositoryRuleset.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, target, sourceType, source, enforcement, bypassMode, bypassActors, nodeId, links, conditions, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryRuleset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    enforcement: ").append(toIndentedString(enforcement)).append("\n");
    sb.append("    bypassMode: ").append(toIndentedString(bypassMode)).append("\n");
    sb.append("    bypassActors: ").append(toIndentedString(bypassActors)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("target");
    openapiFields.add("source_type");
    openapiFields.add("source");
    openapiFields.add("enforcement");
    openapiFields.add("bypass_mode");
    openapiFields.add("bypass_actors");
    openapiFields.add("node_id");
    openapiFields.add("_links");
    openapiFields.add("conditions");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("enforcement");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RepositoryRuleset
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RepositoryRuleset.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryRuleset is not found in the empty JSON string", RepositoryRuleset.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RepositoryRuleset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryRuleset` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepositoryRuleset.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("source_type") != null && !jsonObj.get("source_type").isJsonNull()) && !jsonObj.get("source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_type").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("bypass_mode") != null && !jsonObj.get("bypass_mode").isJsonNull()) && !jsonObj.get("bypass_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bypass_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bypass_mode").toString()));
      }
      if (jsonObj.get("bypass_actors") != null && !jsonObj.get("bypass_actors").isJsonNull()) {
        JsonArray jsonArraybypassActors = jsonObj.getAsJsonArray("bypass_actors");
        if (jsonArraybypassActors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bypass_actors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bypass_actors` to be an array in the JSON string but got `%s`", jsonObj.get("bypass_actors").toString()));
          }

          // validate the optional field `bypass_actors` (array)
          for (int i = 0; i < jsonArraybypassActors.size(); i++) {
            RepositoryRulesetBypassActor.validateJsonObject(jsonArraybypassActors.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        RepositoryRulesetLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        RepositoryRulesetConditions.validateJsonObject(jsonObj.getAsJsonObject("conditions"));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RepositoryRule.validateJsonObject(jsonArrayrules.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryRuleset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryRuleset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryRuleset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleset.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryRuleset>() {
           @Override
           public void write(JsonWriter out, RepositoryRuleset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryRuleset read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RepositoryRuleset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepositoryRuleset
  * @throws IOException if the JSON string is invalid with respect to RepositoryRuleset
  */
  public static RepositoryRuleset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryRuleset.class);
  }

 /**
  * Convert an instance of RepositoryRuleset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

