/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DeploymentWorkflowRunHeadRepositoryOwner;
import org.openapitools.client.model.DeploymentWorkflowRunReferencedWorkflowsInner;
import org.openapitools.client.model.WebhookProjectCardMovedProjectCardAllOfCreator;
import org.openapitools.client.model.WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit;
import org.openapitools.client.model.WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookWorkflowRunCompletedWorkflowRunAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookWorkflowRunCompletedWorkflowRunAllOf {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private DeploymentWorkflowRunHeadRepositoryOwner actor;

  public static final String SERIALIZED_NAME_ARTIFACTS_URL = "artifacts_url";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_URL)
  private String artifactsUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancel_url";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private String cancelUrl;

  public static final String SERIALIZED_NAME_CHECK_SUITE_ID = "check_suite_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_ID)
  private Integer checkSuiteId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_NODE_ID = "check_suite_node_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_NODE_ID)
  private String checkSuiteNodeId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_URL = "check_suite_url";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_URL)
  private String checkSuiteUrl;

  /**
   * Gets or Sets conclusion
   */
  @JsonAdapter(ConclusionEnum.Adapter.class)
  public enum ConclusionEnum {
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    NEUTRAL("neutral"),
    
    CANCELLED("cancelled"),
    
    TIMED_OUT("timed_out"),
    
    ACTION_REQUIRED("action_required"),
    
    STALE("stale"),
    
    SKIPPED("skipped");

    private String value;

    ConclusionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConclusionEnum fromValue(String value) {
      for (ConclusionEnum b : ConclusionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConclusionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConclusionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConclusionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConclusionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONCLUSION = "conclusion";
  @SerializedName(SERIALIZED_NAME_CONCLUSION)
  private ConclusionEnum conclusion;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_HEAD_BRANCH = "head_branch";
  @SerializedName(SERIALIZED_NAME_HEAD_BRANCH)
  private String headBranch;

  public static final String SERIALIZED_NAME_HEAD_COMMIT = "head_commit";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT)
  private WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit headCommit;

  public static final String SERIALIZED_NAME_HEAD_REPOSITORY = "head_repository";
  @SerializedName(SERIALIZED_NAME_HEAD_REPOSITORY)
  private WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository headRepository;

  public static final String SERIALIZED_NAME_HEAD_SHA = "head_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_SHA)
  private String headSha;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JOBS_URL = "jobs_url";
  @SerializedName(SERIALIZED_NAME_JOBS_URL)
  private String jobsUrl;

  public static final String SERIALIZED_NAME_LOGS_URL = "logs_url";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private String logsUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL = "previous_attempt_url";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL)
  private String previousAttemptUrl;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private List<Object> pullRequests;

  public static final String SERIALIZED_NAME_REFERENCED_WORKFLOWS = "referenced_workflows";
  @SerializedName(SERIALIZED_NAME_REFERENCED_WORKFLOWS)
  private List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository repository;

  public static final String SERIALIZED_NAME_RERUN_URL = "rerun_url";
  @SerializedName(SERIALIZED_NAME_RERUN_URL)
  private String rerunUrl;

  public static final String SERIALIZED_NAME_RUN_ATTEMPT = "run_attempt";
  @SerializedName(SERIALIZED_NAME_RUN_ATTEMPT)
  private Integer runAttempt;

  public static final String SERIALIZED_NAME_RUN_NUMBER = "run_number";
  @SerializedName(SERIALIZED_NAME_RUN_NUMBER)
  private Integer runNumber;

  public static final String SERIALIZED_NAME_RUN_STARTED_AT = "run_started_at";
  @SerializedName(SERIALIZED_NAME_RUN_STARTED_AT)
  private String runStartedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TRIGGERING_ACTOR = "triggering_actor";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_ACTOR)
  private WebhookProjectCardMovedProjectCardAllOfCreator triggeringActor;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflow_id";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private Integer workflowId;

  public static final String SERIALIZED_NAME_WORKFLOW_URL = "workflow_url";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_URL)
  private String workflowUrl;

  public WebhookWorkflowRunCompletedWorkflowRunAllOf() {
  }

  public WebhookWorkflowRunCompletedWorkflowRunAllOf actor(DeploymentWorkflowRunHeadRepositoryOwner actor) {
    
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @javax.annotation.Nullable

  public DeploymentWorkflowRunHeadRepositoryOwner getActor() {
    return actor;
  }


  public void setActor(DeploymentWorkflowRunHeadRepositoryOwner actor) {
    this.actor = actor;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf artifactsUrl(String artifactsUrl) {
    
    this.artifactsUrl = artifactsUrl;
    return this;
  }

   /**
   * Get artifactsUrl
   * @return artifactsUrl
  **/
  @javax.annotation.Nullable

  public String getArtifactsUrl() {
    return artifactsUrl;
  }


  public void setArtifactsUrl(String artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf cancelUrl(String cancelUrl) {
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * Get cancelUrl
   * @return cancelUrl
  **/
  @javax.annotation.Nullable

  public String getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(String cancelUrl) {
    this.cancelUrl = cancelUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf checkSuiteId(Integer checkSuiteId) {
    
    this.checkSuiteId = checkSuiteId;
    return this;
  }

   /**
   * Get checkSuiteId
   * @return checkSuiteId
  **/
  @javax.annotation.Nullable

  public Integer getCheckSuiteId() {
    return checkSuiteId;
  }


  public void setCheckSuiteId(Integer checkSuiteId) {
    this.checkSuiteId = checkSuiteId;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf checkSuiteNodeId(String checkSuiteNodeId) {
    
    this.checkSuiteNodeId = checkSuiteNodeId;
    return this;
  }

   /**
   * Get checkSuiteNodeId
   * @return checkSuiteNodeId
  **/
  @javax.annotation.Nullable

  public String getCheckSuiteNodeId() {
    return checkSuiteNodeId;
  }


  public void setCheckSuiteNodeId(String checkSuiteNodeId) {
    this.checkSuiteNodeId = checkSuiteNodeId;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf checkSuiteUrl(String checkSuiteUrl) {
    
    this.checkSuiteUrl = checkSuiteUrl;
    return this;
  }

   /**
   * Get checkSuiteUrl
   * @return checkSuiteUrl
  **/
  @javax.annotation.Nullable

  public String getCheckSuiteUrl() {
    return checkSuiteUrl;
  }


  public void setCheckSuiteUrl(String checkSuiteUrl) {
    this.checkSuiteUrl = checkSuiteUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf conclusion(ConclusionEnum conclusion) {
    
    this.conclusion = conclusion;
    return this;
  }

   /**
   * Get conclusion
   * @return conclusion
  **/
  @javax.annotation.Nonnull

  public ConclusionEnum getConclusion() {
    return conclusion;
  }


  public void setConclusion(ConclusionEnum conclusion) {
    this.conclusion = conclusion;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nullable

  public String getEvent() {
    return event;
  }


  public void setEvent(String event) {
    this.event = event;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf headBranch(String headBranch) {
    
    this.headBranch = headBranch;
    return this;
  }

   /**
   * Get headBranch
   * @return headBranch
  **/
  @javax.annotation.Nullable

  public String getHeadBranch() {
    return headBranch;
  }


  public void setHeadBranch(String headBranch) {
    this.headBranch = headBranch;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf headCommit(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit headCommit) {
    
    this.headCommit = headCommit;
    return this;
  }

   /**
   * Get headCommit
   * @return headCommit
  **/
  @javax.annotation.Nullable

  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit getHeadCommit() {
    return headCommit;
  }


  public void setHeadCommit(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit headCommit) {
    this.headCommit = headCommit;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf headRepository(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository headRepository) {
    
    this.headRepository = headRepository;
    return this;
  }

   /**
   * Get headRepository
   * @return headRepository
  **/
  @javax.annotation.Nullable

  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository getHeadRepository() {
    return headRepository;
  }


  public void setHeadRepository(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository headRepository) {
    this.headRepository = headRepository;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf headSha(String headSha) {
    
    this.headSha = headSha;
    return this;
  }

   /**
   * Get headSha
   * @return headSha
  **/
  @javax.annotation.Nullable

  public String getHeadSha() {
    return headSha;
  }


  public void setHeadSha(String headSha) {
    this.headSha = headSha;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf htmlUrl(String htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nullable

  public String getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf jobsUrl(String jobsUrl) {
    
    this.jobsUrl = jobsUrl;
    return this;
  }

   /**
   * Get jobsUrl
   * @return jobsUrl
  **/
  @javax.annotation.Nullable

  public String getJobsUrl() {
    return jobsUrl;
  }


  public void setJobsUrl(String jobsUrl) {
    this.jobsUrl = jobsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf logsUrl(String logsUrl) {
    
    this.logsUrl = logsUrl;
    return this;
  }

   /**
   * Get logsUrl
   * @return logsUrl
  **/
  @javax.annotation.Nullable

  public String getLogsUrl() {
    return logsUrl;
  }


  public void setLogsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nullable

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf previousAttemptUrl(String previousAttemptUrl) {
    
    this.previousAttemptUrl = previousAttemptUrl;
    return this;
  }

   /**
   * Get previousAttemptUrl
   * @return previousAttemptUrl
  **/
  @javax.annotation.Nullable

  public String getPreviousAttemptUrl() {
    return previousAttemptUrl;
  }


  public void setPreviousAttemptUrl(String previousAttemptUrl) {
    this.previousAttemptUrl = previousAttemptUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf pullRequests(List<Object> pullRequests) {
    
    this.pullRequests = pullRequests;
    return this;
  }

  public WebhookWorkflowRunCompletedWorkflowRunAllOf addPullRequestsItem(Object pullRequestsItem) {
    if (this.pullRequests == null) {
      this.pullRequests = new ArrayList<>();
    }
    this.pullRequests.add(pullRequestsItem);
    return this;
  }

   /**
   * Get pullRequests
   * @return pullRequests
  **/
  @javax.annotation.Nullable

  public List<Object> getPullRequests() {
    return pullRequests;
  }


  public void setPullRequests(List<Object> pullRequests) {
    this.pullRequests = pullRequests;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf referencedWorkflows(List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows) {
    
    this.referencedWorkflows = referencedWorkflows;
    return this;
  }

  public WebhookWorkflowRunCompletedWorkflowRunAllOf addReferencedWorkflowsItem(DeploymentWorkflowRunReferencedWorkflowsInner referencedWorkflowsItem) {
    if (this.referencedWorkflows == null) {
      this.referencedWorkflows = new ArrayList<>();
    }
    this.referencedWorkflows.add(referencedWorkflowsItem);
    return this;
  }

   /**
   * Get referencedWorkflows
   * @return referencedWorkflows
  **/
  @javax.annotation.Nullable

  public List<DeploymentWorkflowRunReferencedWorkflowsInner> getReferencedWorkflows() {
    return referencedWorkflows;
  }


  public void setReferencedWorkflows(List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows) {
    this.referencedWorkflows = referencedWorkflows;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf repository(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nullable

  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository getRepository() {
    return repository;
  }


  public void setRepository(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository repository) {
    this.repository = repository;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf rerunUrl(String rerunUrl) {
    
    this.rerunUrl = rerunUrl;
    return this;
  }

   /**
   * Get rerunUrl
   * @return rerunUrl
  **/
  @javax.annotation.Nullable

  public String getRerunUrl() {
    return rerunUrl;
  }


  public void setRerunUrl(String rerunUrl) {
    this.rerunUrl = rerunUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf runAttempt(Integer runAttempt) {
    
    this.runAttempt = runAttempt;
    return this;
  }

   /**
   * Get runAttempt
   * @return runAttempt
  **/
  @javax.annotation.Nullable

  public Integer getRunAttempt() {
    return runAttempt;
  }


  public void setRunAttempt(Integer runAttempt) {
    this.runAttempt = runAttempt;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf runNumber(Integer runNumber) {
    
    this.runNumber = runNumber;
    return this;
  }

   /**
   * Get runNumber
   * @return runNumber
  **/
  @javax.annotation.Nullable

  public Integer getRunNumber() {
    return runNumber;
  }


  public void setRunNumber(Integer runNumber) {
    this.runNumber = runNumber;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf runStartedAt(String runStartedAt) {
    
    this.runStartedAt = runStartedAt;
    return this;
  }

   /**
   * Get runStartedAt
   * @return runStartedAt
  **/
  @javax.annotation.Nullable

  public String getRunStartedAt() {
    return runStartedAt;
  }


  public void setRunStartedAt(String runStartedAt) {
    this.runStartedAt = runStartedAt;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf triggeringActor(WebhookProjectCardMovedProjectCardAllOfCreator triggeringActor) {
    
    this.triggeringActor = triggeringActor;
    return this;
  }

   /**
   * Get triggeringActor
   * @return triggeringActor
  **/
  @javax.annotation.Nullable

  public WebhookProjectCardMovedProjectCardAllOfCreator getTriggeringActor() {
    return triggeringActor;
  }


  public void setTriggeringActor(WebhookProjectCardMovedProjectCardAllOfCreator triggeringActor) {
    this.triggeringActor = triggeringActor;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf workflowId(Integer workflowId) {
    
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Get workflowId
   * @return workflowId
  **/
  @javax.annotation.Nullable

  public Integer getWorkflowId() {
    return workflowId;
  }


  public void setWorkflowId(Integer workflowId) {
    this.workflowId = workflowId;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOf workflowUrl(String workflowUrl) {
    
    this.workflowUrl = workflowUrl;
    return this;
  }

   /**
   * Get workflowUrl
   * @return workflowUrl
  **/
  @javax.annotation.Nullable

  public String getWorkflowUrl() {
    return workflowUrl;
  }


  public void setWorkflowUrl(String workflowUrl) {
    this.workflowUrl = workflowUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookWorkflowRunCompletedWorkflowRunAllOf webhookWorkflowRunCompletedWorkflowRunAllOf = (WebhookWorkflowRunCompletedWorkflowRunAllOf) o;
    return Objects.equals(this.actor, webhookWorkflowRunCompletedWorkflowRunAllOf.actor) &&
        Objects.equals(this.artifactsUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.artifactsUrl) &&
        Objects.equals(this.cancelUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.cancelUrl) &&
        Objects.equals(this.checkSuiteId, webhookWorkflowRunCompletedWorkflowRunAllOf.checkSuiteId) &&
        Objects.equals(this.checkSuiteNodeId, webhookWorkflowRunCompletedWorkflowRunAllOf.checkSuiteNodeId) &&
        Objects.equals(this.checkSuiteUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.checkSuiteUrl) &&
        Objects.equals(this.conclusion, webhookWorkflowRunCompletedWorkflowRunAllOf.conclusion) &&
        Objects.equals(this.createdAt, webhookWorkflowRunCompletedWorkflowRunAllOf.createdAt) &&
        Objects.equals(this.event, webhookWorkflowRunCompletedWorkflowRunAllOf.event) &&
        Objects.equals(this.headBranch, webhookWorkflowRunCompletedWorkflowRunAllOf.headBranch) &&
        Objects.equals(this.headCommit, webhookWorkflowRunCompletedWorkflowRunAllOf.headCommit) &&
        Objects.equals(this.headRepository, webhookWorkflowRunCompletedWorkflowRunAllOf.headRepository) &&
        Objects.equals(this.headSha, webhookWorkflowRunCompletedWorkflowRunAllOf.headSha) &&
        Objects.equals(this.htmlUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.htmlUrl) &&
        Objects.equals(this.id, webhookWorkflowRunCompletedWorkflowRunAllOf.id) &&
        Objects.equals(this.jobsUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.jobsUrl) &&
        Objects.equals(this.logsUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.logsUrl) &&
        Objects.equals(this.name, webhookWorkflowRunCompletedWorkflowRunAllOf.name) &&
        Objects.equals(this.nodeId, webhookWorkflowRunCompletedWorkflowRunAllOf.nodeId) &&
        Objects.equals(this.path, webhookWorkflowRunCompletedWorkflowRunAllOf.path) &&
        Objects.equals(this.previousAttemptUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.previousAttemptUrl) &&
        Objects.equals(this.pullRequests, webhookWorkflowRunCompletedWorkflowRunAllOf.pullRequests) &&
        Objects.equals(this.referencedWorkflows, webhookWorkflowRunCompletedWorkflowRunAllOf.referencedWorkflows) &&
        Objects.equals(this.repository, webhookWorkflowRunCompletedWorkflowRunAllOf.repository) &&
        Objects.equals(this.rerunUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.rerunUrl) &&
        Objects.equals(this.runAttempt, webhookWorkflowRunCompletedWorkflowRunAllOf.runAttempt) &&
        Objects.equals(this.runNumber, webhookWorkflowRunCompletedWorkflowRunAllOf.runNumber) &&
        Objects.equals(this.runStartedAt, webhookWorkflowRunCompletedWorkflowRunAllOf.runStartedAt) &&
        Objects.equals(this.status, webhookWorkflowRunCompletedWorkflowRunAllOf.status) &&
        Objects.equals(this.triggeringActor, webhookWorkflowRunCompletedWorkflowRunAllOf.triggeringActor) &&
        Objects.equals(this.updatedAt, webhookWorkflowRunCompletedWorkflowRunAllOf.updatedAt) &&
        Objects.equals(this.url, webhookWorkflowRunCompletedWorkflowRunAllOf.url) &&
        Objects.equals(this.workflowId, webhookWorkflowRunCompletedWorkflowRunAllOf.workflowId) &&
        Objects.equals(this.workflowUrl, webhookWorkflowRunCompletedWorkflowRunAllOf.workflowUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path, previousAttemptUrl, pullRequests, referencedWorkflows, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookWorkflowRunCompletedWorkflowRunAllOf {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    artifactsUrl: ").append(toIndentedString(artifactsUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    checkSuiteId: ").append(toIndentedString(checkSuiteId)).append("\n");
    sb.append("    checkSuiteNodeId: ").append(toIndentedString(checkSuiteNodeId)).append("\n");
    sb.append("    checkSuiteUrl: ").append(toIndentedString(checkSuiteUrl)).append("\n");
    sb.append("    conclusion: ").append(toIndentedString(conclusion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    headBranch: ").append(toIndentedString(headBranch)).append("\n");
    sb.append("    headCommit: ").append(toIndentedString(headCommit)).append("\n");
    sb.append("    headRepository: ").append(toIndentedString(headRepository)).append("\n");
    sb.append("    headSha: ").append(toIndentedString(headSha)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobsUrl: ").append(toIndentedString(jobsUrl)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    previousAttemptUrl: ").append(toIndentedString(previousAttemptUrl)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    referencedWorkflows: ").append(toIndentedString(referencedWorkflows)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    rerunUrl: ").append(toIndentedString(rerunUrl)).append("\n");
    sb.append("    runAttempt: ").append(toIndentedString(runAttempt)).append("\n");
    sb.append("    runNumber: ").append(toIndentedString(runNumber)).append("\n");
    sb.append("    runStartedAt: ").append(toIndentedString(runStartedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    triggeringActor: ").append(toIndentedString(triggeringActor)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    workflowUrl: ").append(toIndentedString(workflowUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("artifacts_url");
    openapiFields.add("cancel_url");
    openapiFields.add("check_suite_id");
    openapiFields.add("check_suite_node_id");
    openapiFields.add("check_suite_url");
    openapiFields.add("conclusion");
    openapiFields.add("created_at");
    openapiFields.add("event");
    openapiFields.add("head_branch");
    openapiFields.add("head_commit");
    openapiFields.add("head_repository");
    openapiFields.add("head_sha");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("jobs_url");
    openapiFields.add("logs_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("path");
    openapiFields.add("previous_attempt_url");
    openapiFields.add("pull_requests");
    openapiFields.add("referenced_workflows");
    openapiFields.add("repository");
    openapiFields.add("rerun_url");
    openapiFields.add("run_attempt");
    openapiFields.add("run_number");
    openapiFields.add("run_started_at");
    openapiFields.add("status");
    openapiFields.add("triggering_actor");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("workflow_id");
    openapiFields.add("workflow_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conclusion");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookWorkflowRunCompletedWorkflowRunAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookWorkflowRunCompletedWorkflowRunAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookWorkflowRunCompletedWorkflowRunAllOf is not found in the empty JSON string", WebhookWorkflowRunCompletedWorkflowRunAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookWorkflowRunCompletedWorkflowRunAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookWorkflowRunCompletedWorkflowRunAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookWorkflowRunCompletedWorkflowRunAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        DeploymentWorkflowRunHeadRepositoryOwner.validateJsonObject(jsonObj.getAsJsonObject("actor"));
      }
      if ((jsonObj.get("artifacts_url") != null && !jsonObj.get("artifacts_url").isJsonNull()) && !jsonObj.get("artifacts_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifacts_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifacts_url").toString()));
      }
      if ((jsonObj.get("cancel_url") != null && !jsonObj.get("cancel_url").isJsonNull()) && !jsonObj.get("cancel_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_url").toString()));
      }
      if ((jsonObj.get("check_suite_node_id") != null && !jsonObj.get("check_suite_node_id").isJsonNull()) && !jsonObj.get("check_suite_node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_node_id").toString()));
      }
      if ((jsonObj.get("check_suite_url") != null && !jsonObj.get("check_suite_url").isJsonNull()) && !jsonObj.get("check_suite_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_url").toString()));
      }
      if (!jsonObj.get("conclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusion").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if ((jsonObj.get("head_branch") != null && !jsonObj.get("head_branch").isJsonNull()) && !jsonObj.get("head_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_branch").toString()));
      }
      // validate the optional field `head_commit`
      if (jsonObj.get("head_commit") != null && !jsonObj.get("head_commit").isJsonNull()) {
        WebhookWorkflowRunCompletedWorkflowRunAllOfHeadCommit.validateJsonObject(jsonObj.getAsJsonObject("head_commit"));
      }
      // validate the optional field `head_repository`
      if (jsonObj.get("head_repository") != null && !jsonObj.get("head_repository").isJsonNull()) {
        WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.validateJsonObject(jsonObj.getAsJsonObject("head_repository"));
      }
      if ((jsonObj.get("head_sha") != null && !jsonObj.get("head_sha").isJsonNull()) && !jsonObj.get("head_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_sha").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("jobs_url") != null && !jsonObj.get("jobs_url").isJsonNull()) && !jsonObj.get("jobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobs_url").toString()));
      }
      if ((jsonObj.get("logs_url") != null && !jsonObj.get("logs_url").isJsonNull()) && !jsonObj.get("logs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("previous_attempt_url") != null && !jsonObj.get("previous_attempt_url").isJsonNull()) && !jsonObj.get("previous_attempt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_attempt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_attempt_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pull_requests") != null && !jsonObj.get("pull_requests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_requests` to be an array in the JSON string but got `%s`", jsonObj.get("pull_requests").toString()));
      }
      if (jsonObj.get("referenced_workflows") != null && !jsonObj.get("referenced_workflows").isJsonNull()) {
        JsonArray jsonArrayreferencedWorkflows = jsonObj.getAsJsonArray("referenced_workflows");
        if (jsonArrayreferencedWorkflows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenced_workflows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenced_workflows` to be an array in the JSON string but got `%s`", jsonObj.get("referenced_workflows").toString()));
          }

          // validate the optional field `referenced_workflows` (array)
          for (int i = 0; i < jsonArrayreferencedWorkflows.size(); i++) {
            DeploymentWorkflowRunReferencedWorkflowsInner.validateJsonObject(jsonArrayreferencedWorkflows.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `repository`
      if (jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) {
        WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.validateJsonObject(jsonObj.getAsJsonObject("repository"));
      }
      if ((jsonObj.get("rerun_url") != null && !jsonObj.get("rerun_url").isJsonNull()) && !jsonObj.get("rerun_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerun_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rerun_url").toString()));
      }
      if ((jsonObj.get("run_started_at") != null && !jsonObj.get("run_started_at").isJsonNull()) && !jsonObj.get("run_started_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_started_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_started_at").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `triggering_actor`
      if (jsonObj.get("triggering_actor") != null && !jsonObj.get("triggering_actor").isJsonNull()) {
        WebhookProjectCardMovedProjectCardAllOfCreator.validateJsonObject(jsonObj.getAsJsonObject("triggering_actor"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("workflow_url") != null && !jsonObj.get("workflow_url").isJsonNull()) && !jsonObj.get("workflow_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookWorkflowRunCompletedWorkflowRunAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookWorkflowRunCompletedWorkflowRunAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookWorkflowRunCompletedWorkflowRunAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookWorkflowRunCompletedWorkflowRunAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookWorkflowRunCompletedWorkflowRunAllOf>() {
           @Override
           public void write(JsonWriter out, WebhookWorkflowRunCompletedWorkflowRunAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookWorkflowRunCompletedWorkflowRunAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookWorkflowRunCompletedWorkflowRunAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookWorkflowRunCompletedWorkflowRunAllOf
  * @throws IOException if the JSON string is invalid with respect to WebhookWorkflowRunCompletedWorkflowRunAllOf
  */
  public static WebhookWorkflowRunCompletedWorkflowRunAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookWorkflowRunCompletedWorkflowRunAllOf.class);
  }

 /**
  * Convert an instance of WebhookWorkflowRunCompletedWorkflowRunAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

