/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CodeQL database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CodeScanningCodeqlDatabase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_UPLOADER = "uploader";
  @SerializedName(SERIALIZED_NAME_UPLOADER)
  private SimpleUser uploader;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public CodeScanningCodeqlDatabase() {
  }

  public CodeScanningCodeqlDatabase id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the CodeQL database.
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CodeScanningCodeqlDatabase name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the CodeQL database.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CodeScanningCodeqlDatabase language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * The language of the CodeQL database.
   * @return language
  **/
  @javax.annotation.Nonnull

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public CodeScanningCodeqlDatabase uploader(SimpleUser uploader) {
    
    this.uploader = uploader;
    return this;
  }

   /**
   * Get uploader
   * @return uploader
  **/
  @javax.annotation.Nonnull

  public SimpleUser getUploader() {
    return uploader;
  }


  public void setUploader(SimpleUser uploader) {
    this.uploader = uploader;
  }


  public CodeScanningCodeqlDatabase contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * The MIME type of the CodeQL database file.
   * @return contentType
  **/
  @javax.annotation.Nonnull

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public CodeScanningCodeqlDatabase size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * The size of the CodeQL database file in bytes.
   * @return size
  **/
  @javax.annotation.Nonnull

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public CodeScanningCodeqlDatabase createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format&#39;:&#39; YYYY-MM-DDTHH:MM:SSZ.
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CodeScanningCodeqlDatabase updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format&#39;:&#39; YYYY-MM-DDTHH:MM:SSZ.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CodeScanningCodeqlDatabase url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL at which to download the CodeQL database. The &#x60;Accept&#x60; header must be set to the value of the &#x60;content_type&#x60; property.
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeScanningCodeqlDatabase codeScanningCodeqlDatabase = (CodeScanningCodeqlDatabase) o;
    return Objects.equals(this.id, codeScanningCodeqlDatabase.id) &&
        Objects.equals(this.name, codeScanningCodeqlDatabase.name) &&
        Objects.equals(this.language, codeScanningCodeqlDatabase.language) &&
        Objects.equals(this.uploader, codeScanningCodeqlDatabase.uploader) &&
        Objects.equals(this.contentType, codeScanningCodeqlDatabase.contentType) &&
        Objects.equals(this.size, codeScanningCodeqlDatabase.size) &&
        Objects.equals(this.createdAt, codeScanningCodeqlDatabase.createdAt) &&
        Objects.equals(this.updatedAt, codeScanningCodeqlDatabase.updatedAt) &&
        Objects.equals(this.url, codeScanningCodeqlDatabase.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, language, uploader, contentType, size, createdAt, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeScanningCodeqlDatabase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    uploader: ").append(toIndentedString(uploader)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("language");
    openapiFields.add("uploader");
    openapiFields.add("content_type");
    openapiFields.add("size");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("uploader");
    openapiRequiredFields.add("content_type");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CodeScanningCodeqlDatabase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CodeScanningCodeqlDatabase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeScanningCodeqlDatabase is not found in the empty JSON string", CodeScanningCodeqlDatabase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CodeScanningCodeqlDatabase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeScanningCodeqlDatabase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeScanningCodeqlDatabase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the required field `uploader`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("uploader"));
      if (!jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeScanningCodeqlDatabase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeScanningCodeqlDatabase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeScanningCodeqlDatabase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeScanningCodeqlDatabase.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeScanningCodeqlDatabase>() {
           @Override
           public void write(JsonWriter out, CodeScanningCodeqlDatabase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeScanningCodeqlDatabase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CodeScanningCodeqlDatabase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CodeScanningCodeqlDatabase
  * @throws IOException if the JSON string is invalid with respect to CodeScanningCodeqlDatabase
  */
  public static CodeScanningCodeqlDatabase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeScanningCodeqlDatabase.class);
  }

 /**
  * Convert an instance of CodeScanningCodeqlDatabase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

