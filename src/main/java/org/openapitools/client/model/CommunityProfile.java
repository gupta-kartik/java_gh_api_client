/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.CommunityProfileFiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Community Profile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CommunityProfile {
  public static final String SERIALIZED_NAME_HEALTH_PERCENTAGE = "health_percentage";
  @SerializedName(SERIALIZED_NAME_HEALTH_PERCENTAGE)
  private Integer healthPercentage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private String documentation;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private CommunityProfileFiles files;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CONTENT_REPORTS_ENABLED = "content_reports_enabled";
  @SerializedName(SERIALIZED_NAME_CONTENT_REPORTS_ENABLED)
  private Boolean contentReportsEnabled;

  public CommunityProfile() {
  }

  public CommunityProfile healthPercentage(Integer healthPercentage) {
    
    this.healthPercentage = healthPercentage;
    return this;
  }

   /**
   * Get healthPercentage
   * @return healthPercentage
  **/
  @javax.annotation.Nonnull

  public Integer getHealthPercentage() {
    return healthPercentage;
  }


  public void setHealthPercentage(Integer healthPercentage) {
    this.healthPercentage = healthPercentage;
  }


  public CommunityProfile description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CommunityProfile documentation(String documentation) {
    
    this.documentation = documentation;
    return this;
  }

   /**
   * Get documentation
   * @return documentation
  **/
  @javax.annotation.Nullable

  public String getDocumentation() {
    return documentation;
  }


  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public CommunityProfile files(CommunityProfileFiles files) {
    
    this.files = files;
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nonnull

  public CommunityProfileFiles getFiles() {
    return files;
  }


  public void setFiles(CommunityProfileFiles files) {
    this.files = files;
  }


  public CommunityProfile updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CommunityProfile contentReportsEnabled(Boolean contentReportsEnabled) {
    
    this.contentReportsEnabled = contentReportsEnabled;
    return this;
  }

   /**
   * Get contentReportsEnabled
   * @return contentReportsEnabled
  **/
  @javax.annotation.Nullable

  public Boolean getContentReportsEnabled() {
    return contentReportsEnabled;
  }


  public void setContentReportsEnabled(Boolean contentReportsEnabled) {
    this.contentReportsEnabled = contentReportsEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunityProfile communityProfile = (CommunityProfile) o;
    return Objects.equals(this.healthPercentage, communityProfile.healthPercentage) &&
        Objects.equals(this.description, communityProfile.description) &&
        Objects.equals(this.documentation, communityProfile.documentation) &&
        Objects.equals(this.files, communityProfile.files) &&
        Objects.equals(this.updatedAt, communityProfile.updatedAt) &&
        Objects.equals(this.contentReportsEnabled, communityProfile.contentReportsEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthPercentage, description, documentation, files, updatedAt, contentReportsEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunityProfile {\n");
    sb.append("    healthPercentage: ").append(toIndentedString(healthPercentage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    contentReportsEnabled: ").append(toIndentedString(contentReportsEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("health_percentage");
    openapiFields.add("description");
    openapiFields.add("documentation");
    openapiFields.add("files");
    openapiFields.add("updated_at");
    openapiFields.add("content_reports_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("health_percentage");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("documentation");
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommunityProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommunityProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunityProfile is not found in the empty JSON string", CommunityProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommunityProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunityProfile` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunityProfile.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("documentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentation").toString()));
      }
      // validate the required field `files`
      CommunityProfileFiles.validateJsonObject(jsonObj.getAsJsonObject("files"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunityProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunityProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunityProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunityProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunityProfile>() {
           @Override
           public void write(JsonWriter out, CommunityProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunityProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunityProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunityProfile
  * @throws IOException if the JSON string is invalid with respect to CommunityProfile
  */
  public static CommunityProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunityProfile.class);
  }

 /**
  * Convert an instance of CommunityProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

