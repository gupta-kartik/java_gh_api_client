/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ApiOverviewSshKeyFingerprints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api Overview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ApiOverview {
  public static final String SERIALIZED_NAME_VERIFIABLE_PASSWORD_AUTHENTICATION = "verifiable_password_authentication";
  @SerializedName(SERIALIZED_NAME_VERIFIABLE_PASSWORD_AUTHENTICATION)
  private Boolean verifiablePasswordAuthentication;

  public static final String SERIALIZED_NAME_SSH_KEY_FINGERPRINTS = "ssh_key_fingerprints";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_FINGERPRINTS)
  private ApiOverviewSshKeyFingerprints sshKeyFingerprints;

  public static final String SERIALIZED_NAME_SSH_KEYS = "ssh_keys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private List<String> sshKeys;

  public static final String SERIALIZED_NAME_HOOKS = "hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private List<String> hooks;

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private List<String> web;

  public static final String SERIALIZED_NAME_API = "api";
  @SerializedName(SERIALIZED_NAME_API)
  private List<String> api;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private List<String> git;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<String> packages;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<String> pages;

  public static final String SERIALIZED_NAME_IMPORTER = "importer";
  @SerializedName(SERIALIZED_NAME_IMPORTER)
  private List<String> importer;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<String> actions;

  public static final String SERIALIZED_NAME_DEPENDABOT = "dependabot";
  @SerializedName(SERIALIZED_NAME_DEPENDABOT)
  private List<String> dependabot;

  public ApiOverview() {
  }

  public ApiOverview verifiablePasswordAuthentication(Boolean verifiablePasswordAuthentication) {
    
    this.verifiablePasswordAuthentication = verifiablePasswordAuthentication;
    return this;
  }

   /**
   * Get verifiablePasswordAuthentication
   * @return verifiablePasswordAuthentication
  **/
  @javax.annotation.Nonnull

  public Boolean getVerifiablePasswordAuthentication() {
    return verifiablePasswordAuthentication;
  }


  public void setVerifiablePasswordAuthentication(Boolean verifiablePasswordAuthentication) {
    this.verifiablePasswordAuthentication = verifiablePasswordAuthentication;
  }


  public ApiOverview sshKeyFingerprints(ApiOverviewSshKeyFingerprints sshKeyFingerprints) {
    
    this.sshKeyFingerprints = sshKeyFingerprints;
    return this;
  }

   /**
   * Get sshKeyFingerprints
   * @return sshKeyFingerprints
  **/
  @javax.annotation.Nullable

  public ApiOverviewSshKeyFingerprints getSshKeyFingerprints() {
    return sshKeyFingerprints;
  }


  public void setSshKeyFingerprints(ApiOverviewSshKeyFingerprints sshKeyFingerprints) {
    this.sshKeyFingerprints = sshKeyFingerprints;
  }


  public ApiOverview sshKeys(List<String> sshKeys) {
    
    this.sshKeys = sshKeys;
    return this;
  }

  public ApiOverview addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * Get sshKeys
   * @return sshKeys
  **/
  @javax.annotation.Nullable

  public List<String> getSshKeys() {
    return sshKeys;
  }


  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }


  public ApiOverview hooks(List<String> hooks) {
    
    this.hooks = hooks;
    return this;
  }

  public ApiOverview addHooksItem(String hooksItem) {
    if (this.hooks == null) {
      this.hooks = new ArrayList<>();
    }
    this.hooks.add(hooksItem);
    return this;
  }

   /**
   * Get hooks
   * @return hooks
  **/
  @javax.annotation.Nullable

  public List<String> getHooks() {
    return hooks;
  }


  public void setHooks(List<String> hooks) {
    this.hooks = hooks;
  }


  public ApiOverview web(List<String> web) {
    
    this.web = web;
    return this;
  }

  public ApiOverview addWebItem(String webItem) {
    if (this.web == null) {
      this.web = new ArrayList<>();
    }
    this.web.add(webItem);
    return this;
  }

   /**
   * Get web
   * @return web
  **/
  @javax.annotation.Nullable

  public List<String> getWeb() {
    return web;
  }


  public void setWeb(List<String> web) {
    this.web = web;
  }


  public ApiOverview api(List<String> api) {
    
    this.api = api;
    return this;
  }

  public ApiOverview addApiItem(String apiItem) {
    if (this.api == null) {
      this.api = new ArrayList<>();
    }
    this.api.add(apiItem);
    return this;
  }

   /**
   * Get api
   * @return api
  **/
  @javax.annotation.Nullable

  public List<String> getApi() {
    return api;
  }


  public void setApi(List<String> api) {
    this.api = api;
  }


  public ApiOverview git(List<String> git) {
    
    this.git = git;
    return this;
  }

  public ApiOverview addGitItem(String gitItem) {
    if (this.git == null) {
      this.git = new ArrayList<>();
    }
    this.git.add(gitItem);
    return this;
  }

   /**
   * Get git
   * @return git
  **/
  @javax.annotation.Nullable

  public List<String> getGit() {
    return git;
  }


  public void setGit(List<String> git) {
    this.git = git;
  }


  public ApiOverview packages(List<String> packages) {
    
    this.packages = packages;
    return this;
  }

  public ApiOverview addPackagesItem(String packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @javax.annotation.Nullable

  public List<String> getPackages() {
    return packages;
  }


  public void setPackages(List<String> packages) {
    this.packages = packages;
  }


  public ApiOverview pages(List<String> pages) {
    
    this.pages = pages;
    return this;
  }

  public ApiOverview addPagesItem(String pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable

  public List<String> getPages() {
    return pages;
  }


  public void setPages(List<String> pages) {
    this.pages = pages;
  }


  public ApiOverview importer(List<String> importer) {
    
    this.importer = importer;
    return this;
  }

  public ApiOverview addImporterItem(String importerItem) {
    if (this.importer == null) {
      this.importer = new ArrayList<>();
    }
    this.importer.add(importerItem);
    return this;
  }

   /**
   * Get importer
   * @return importer
  **/
  @javax.annotation.Nullable

  public List<String> getImporter() {
    return importer;
  }


  public void setImporter(List<String> importer) {
    this.importer = importer;
  }


  public ApiOverview actions(List<String> actions) {
    
    this.actions = actions;
    return this;
  }

  public ApiOverview addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable

  public List<String> getActions() {
    return actions;
  }


  public void setActions(List<String> actions) {
    this.actions = actions;
  }


  public ApiOverview dependabot(List<String> dependabot) {
    
    this.dependabot = dependabot;
    return this;
  }

  public ApiOverview addDependabotItem(String dependabotItem) {
    if (this.dependabot == null) {
      this.dependabot = new ArrayList<>();
    }
    this.dependabot.add(dependabotItem);
    return this;
  }

   /**
   * Get dependabot
   * @return dependabot
  **/
  @javax.annotation.Nullable

  public List<String> getDependabot() {
    return dependabot;
  }


  public void setDependabot(List<String> dependabot) {
    this.dependabot = dependabot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiOverview apiOverview = (ApiOverview) o;
    return Objects.equals(this.verifiablePasswordAuthentication, apiOverview.verifiablePasswordAuthentication) &&
        Objects.equals(this.sshKeyFingerprints, apiOverview.sshKeyFingerprints) &&
        Objects.equals(this.sshKeys, apiOverview.sshKeys) &&
        Objects.equals(this.hooks, apiOverview.hooks) &&
        Objects.equals(this.web, apiOverview.web) &&
        Objects.equals(this.api, apiOverview.api) &&
        Objects.equals(this.git, apiOverview.git) &&
        Objects.equals(this.packages, apiOverview.packages) &&
        Objects.equals(this.pages, apiOverview.pages) &&
        Objects.equals(this.importer, apiOverview.importer) &&
        Objects.equals(this.actions, apiOverview.actions) &&
        Objects.equals(this.dependabot, apiOverview.dependabot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verifiablePasswordAuthentication, sshKeyFingerprints, sshKeys, hooks, web, api, git, packages, pages, importer, actions, dependabot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiOverview {\n");
    sb.append("    verifiablePasswordAuthentication: ").append(toIndentedString(verifiablePasswordAuthentication)).append("\n");
    sb.append("    sshKeyFingerprints: ").append(toIndentedString(sshKeyFingerprints)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("    api: ").append(toIndentedString(api)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    importer: ").append(toIndentedString(importer)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    dependabot: ").append(toIndentedString(dependabot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verifiable_password_authentication");
    openapiFields.add("ssh_key_fingerprints");
    openapiFields.add("ssh_keys");
    openapiFields.add("hooks");
    openapiFields.add("web");
    openapiFields.add("api");
    openapiFields.add("git");
    openapiFields.add("packages");
    openapiFields.add("pages");
    openapiFields.add("importer");
    openapiFields.add("actions");
    openapiFields.add("dependabot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verifiable_password_authentication");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApiOverview
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApiOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiOverview is not found in the empty JSON string", ApiOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApiOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiOverview` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiOverview.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `ssh_key_fingerprints`
      if (jsonObj.get("ssh_key_fingerprints") != null && !jsonObj.get("ssh_key_fingerprints").isJsonNull()) {
        ApiOverviewSshKeyFingerprints.validateJsonObject(jsonObj.getAsJsonObject("ssh_key_fingerprints"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ssh_keys") != null && !jsonObj.get("ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_keys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hooks") != null && !jsonObj.get("hooks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks` to be an array in the JSON string but got `%s`", jsonObj.get("hooks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("web") != null && !jsonObj.get("web").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `web` to be an array in the JSON string but got `%s`", jsonObj.get("web").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("api") != null && !jsonObj.get("api").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `api` to be an array in the JSON string but got `%s`", jsonObj.get("api").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("git") != null && !jsonObj.get("git").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `git` to be an array in the JSON string but got `%s`", jsonObj.get("git").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("importer") != null && !jsonObj.get("importer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `importer` to be an array in the JSON string but got `%s`", jsonObj.get("importer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dependabot") != null && !jsonObj.get("dependabot").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependabot` to be an array in the JSON string but got `%s`", jsonObj.get("dependabot").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiOverview>() {
           @Override
           public void write(JsonWriter out, ApiOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiOverview read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiOverview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiOverview
  * @throws IOException if the JSON string is invalid with respect to ApiOverview
  */
  public static ApiOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiOverview.class);
  }

 /**
  * Convert an instance of ApiOverview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

