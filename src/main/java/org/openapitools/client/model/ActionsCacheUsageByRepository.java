/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GitHub Actions Cache Usage by repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ActionsCacheUsageByRepository {
  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ACTIVE_CACHES_SIZE_IN_BYTES = "active_caches_size_in_bytes";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CACHES_SIZE_IN_BYTES)
  private Integer activeCachesSizeInBytes;

  public static final String SERIALIZED_NAME_ACTIVE_CACHES_COUNT = "active_caches_count";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CACHES_COUNT)
  private Integer activeCachesCount;

  public ActionsCacheUsageByRepository() {
  }

  public ActionsCacheUsageByRepository fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * The repository owner and name for the cache usage being shown.
   * @return fullName
  **/
  @javax.annotation.Nonnull

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public ActionsCacheUsageByRepository activeCachesSizeInBytes(Integer activeCachesSizeInBytes) {
    
    this.activeCachesSizeInBytes = activeCachesSizeInBytes;
    return this;
  }

   /**
   * The sum of the size in bytes of all the active cache items in the repository.
   * @return activeCachesSizeInBytes
  **/
  @javax.annotation.Nonnull

  public Integer getActiveCachesSizeInBytes() {
    return activeCachesSizeInBytes;
  }


  public void setActiveCachesSizeInBytes(Integer activeCachesSizeInBytes) {
    this.activeCachesSizeInBytes = activeCachesSizeInBytes;
  }


  public ActionsCacheUsageByRepository activeCachesCount(Integer activeCachesCount) {
    
    this.activeCachesCount = activeCachesCount;
    return this;
  }

   /**
   * The number of active caches in the repository.
   * @return activeCachesCount
  **/
  @javax.annotation.Nonnull

  public Integer getActiveCachesCount() {
    return activeCachesCount;
  }


  public void setActiveCachesCount(Integer activeCachesCount) {
    this.activeCachesCount = activeCachesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionsCacheUsageByRepository actionsCacheUsageByRepository = (ActionsCacheUsageByRepository) o;
    return Objects.equals(this.fullName, actionsCacheUsageByRepository.fullName) &&
        Objects.equals(this.activeCachesSizeInBytes, actionsCacheUsageByRepository.activeCachesSizeInBytes) &&
        Objects.equals(this.activeCachesCount, actionsCacheUsageByRepository.activeCachesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, activeCachesSizeInBytes, activeCachesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionsCacheUsageByRepository {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    activeCachesSizeInBytes: ").append(toIndentedString(activeCachesSizeInBytes)).append("\n");
    sb.append("    activeCachesCount: ").append(toIndentedString(activeCachesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("full_name");
    openapiFields.add("active_caches_size_in_bytes");
    openapiFields.add("active_caches_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("active_caches_size_in_bytes");
    openapiRequiredFields.add("active_caches_count");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActionsCacheUsageByRepository
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActionsCacheUsageByRepository.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionsCacheUsageByRepository is not found in the empty JSON string", ActionsCacheUsageByRepository.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActionsCacheUsageByRepository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionsCacheUsageByRepository` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionsCacheUsageByRepository.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionsCacheUsageByRepository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionsCacheUsageByRepository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionsCacheUsageByRepository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionsCacheUsageByRepository.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionsCacheUsageByRepository>() {
           @Override
           public void write(JsonWriter out, ActionsCacheUsageByRepository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionsCacheUsageByRepository read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActionsCacheUsageByRepository given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActionsCacheUsageByRepository
  * @throws IOException if the JSON string is invalid with respect to ActionsCacheUsageByRepository
  */
  public static ActionsCacheUsageByRepository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionsCacheUsageByRepository.class);
  }

 /**
  * Convert an instance of ActionsCacheUsageByRepository to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

