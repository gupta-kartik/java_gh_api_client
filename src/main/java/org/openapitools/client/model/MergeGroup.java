/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.SimpleCommit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MergeGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class MergeGroup {
  public static final String SERIALIZED_NAME_HEAD_SHA = "head_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_SHA)
  private String headSha;

  public static final String SERIALIZED_NAME_HEAD_REF = "head_ref";
  @SerializedName(SERIALIZED_NAME_HEAD_REF)
  private String headRef;

  public static final String SERIALIZED_NAME_BASE_SHA = "base_sha";
  @SerializedName(SERIALIZED_NAME_BASE_SHA)
  private String baseSha;

  public static final String SERIALIZED_NAME_BASE_REF = "base_ref";
  @SerializedName(SERIALIZED_NAME_BASE_REF)
  private String baseRef;

  public static final String SERIALIZED_NAME_HEAD_COMMIT = "head_commit";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT)
  private SimpleCommit headCommit;

  public MergeGroup() {
  }

  public MergeGroup headSha(String headSha) {
    
    this.headSha = headSha;
    return this;
  }

   /**
   * The SHA of the merge group.
   * @return headSha
  **/
  @javax.annotation.Nonnull

  public String getHeadSha() {
    return headSha;
  }


  public void setHeadSha(String headSha) {
    this.headSha = headSha;
  }


  public MergeGroup headRef(String headRef) {
    
    this.headRef = headRef;
    return this;
  }

   /**
   * The full ref of the merge group.
   * @return headRef
  **/
  @javax.annotation.Nonnull

  public String getHeadRef() {
    return headRef;
  }


  public void setHeadRef(String headRef) {
    this.headRef = headRef;
  }


  public MergeGroup baseSha(String baseSha) {
    
    this.baseSha = baseSha;
    return this;
  }

   /**
   * The SHA of the merge group&#39;s parent commit.
   * @return baseSha
  **/
  @javax.annotation.Nonnull

  public String getBaseSha() {
    return baseSha;
  }


  public void setBaseSha(String baseSha) {
    this.baseSha = baseSha;
  }


  public MergeGroup baseRef(String baseRef) {
    
    this.baseRef = baseRef;
    return this;
  }

   /**
   * The full ref of the branch the merge group will be merged into.
   * @return baseRef
  **/
  @javax.annotation.Nonnull

  public String getBaseRef() {
    return baseRef;
  }


  public void setBaseRef(String baseRef) {
    this.baseRef = baseRef;
  }


  public MergeGroup headCommit(SimpleCommit headCommit) {
    
    this.headCommit = headCommit;
    return this;
  }

   /**
   * Get headCommit
   * @return headCommit
  **/
  @javax.annotation.Nonnull

  public SimpleCommit getHeadCommit() {
    return headCommit;
  }


  public void setHeadCommit(SimpleCommit headCommit) {
    this.headCommit = headCommit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeGroup mergeGroup = (MergeGroup) o;
    return Objects.equals(this.headSha, mergeGroup.headSha) &&
        Objects.equals(this.headRef, mergeGroup.headRef) &&
        Objects.equals(this.baseSha, mergeGroup.baseSha) &&
        Objects.equals(this.baseRef, mergeGroup.baseRef) &&
        Objects.equals(this.headCommit, mergeGroup.headCommit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headSha, headRef, baseSha, baseRef, headCommit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeGroup {\n");
    sb.append("    headSha: ").append(toIndentedString(headSha)).append("\n");
    sb.append("    headRef: ").append(toIndentedString(headRef)).append("\n");
    sb.append("    baseSha: ").append(toIndentedString(baseSha)).append("\n");
    sb.append("    baseRef: ").append(toIndentedString(baseRef)).append("\n");
    sb.append("    headCommit: ").append(toIndentedString(headCommit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("head_sha");
    openapiFields.add("head_ref");
    openapiFields.add("base_sha");
    openapiFields.add("base_ref");
    openapiFields.add("head_commit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("head_sha");
    openapiRequiredFields.add("head_ref");
    openapiRequiredFields.add("base_sha");
    openapiRequiredFields.add("base_ref");
    openapiRequiredFields.add("head_commit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MergeGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MergeGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeGroup is not found in the empty JSON string", MergeGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MergeGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MergeGroup.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("head_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_sha").toString()));
      }
      if (!jsonObj.get("head_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_ref").toString()));
      }
      if (!jsonObj.get("base_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_sha").toString()));
      }
      if (!jsonObj.get("base_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_ref").toString()));
      }
      // validate the required field `head_commit`
      SimpleCommit.validateJsonObject(jsonObj.getAsJsonObject("head_commit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeGroup>() {
           @Override
           public void write(JsonWriter out, MergeGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MergeGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MergeGroup
  * @throws IOException if the JSON string is invalid with respect to MergeGroup
  */
  public static MergeGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeGroup.class);
  }

 /**
  * Convert an instance of MergeGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

