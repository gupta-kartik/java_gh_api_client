/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposCreateAutolinkRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ReposCreateAutolinkRequest {
  public static final String SERIALIZED_NAME_KEY_PREFIX = "key_prefix";
  @SerializedName(SERIALIZED_NAME_KEY_PREFIX)
  private String keyPrefix;

  public static final String SERIALIZED_NAME_URL_TEMPLATE = "url_template";
  @SerializedName(SERIALIZED_NAME_URL_TEMPLATE)
  private String urlTemplate;

  public static final String SERIALIZED_NAME_IS_ALPHANUMERIC = "is_alphanumeric";
  @SerializedName(SERIALIZED_NAME_IS_ALPHANUMERIC)
  private Boolean isAlphanumeric = true;

  public ReposCreateAutolinkRequest() {
  }

  public ReposCreateAutolinkRequest keyPrefix(String keyPrefix) {
    
    this.keyPrefix = keyPrefix;
    return this;
  }

   /**
   * This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
   * @return keyPrefix
  **/
  @javax.annotation.Nonnull

  public String getKeyPrefix() {
    return keyPrefix;
  }


  public void setKeyPrefix(String keyPrefix) {
    this.keyPrefix = keyPrefix;
  }


  public ReposCreateAutolinkRequest urlTemplate(String urlTemplate) {
    
    this.urlTemplate = urlTemplate;
    return this;
  }

   /**
   * The URL must contain &#x60;&lt;num&gt;&#x60; for the reference number. &#x60;&lt;num&gt;&#x60; matches different characters depending on the value of &#x60;is_alphanumeric&#x60;.
   * @return urlTemplate
  **/
  @javax.annotation.Nonnull

  public String getUrlTemplate() {
    return urlTemplate;
  }


  public void setUrlTemplate(String urlTemplate) {
    this.urlTemplate = urlTemplate;
  }


  public ReposCreateAutolinkRequest isAlphanumeric(Boolean isAlphanumeric) {
    
    this.isAlphanumeric = isAlphanumeric;
    return this;
  }

   /**
   * Whether this autolink reference matches alphanumeric characters. If true, the &#x60;&lt;num&gt;&#x60; parameter of the &#x60;url_template&#x60; matches alphanumeric characters &#x60;A-Z&#x60; (case insensitive), &#x60;0-9&#x60;, and &#x60;-&#x60;. If false, this autolink reference only matches numeric characters.
   * @return isAlphanumeric
  **/
  @javax.annotation.Nullable

  public Boolean getIsAlphanumeric() {
    return isAlphanumeric;
  }


  public void setIsAlphanumeric(Boolean isAlphanumeric) {
    this.isAlphanumeric = isAlphanumeric;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposCreateAutolinkRequest reposCreateAutolinkRequest = (ReposCreateAutolinkRequest) o;
    return Objects.equals(this.keyPrefix, reposCreateAutolinkRequest.keyPrefix) &&
        Objects.equals(this.urlTemplate, reposCreateAutolinkRequest.urlTemplate) &&
        Objects.equals(this.isAlphanumeric, reposCreateAutolinkRequest.isAlphanumeric);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyPrefix, urlTemplate, isAlphanumeric);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposCreateAutolinkRequest {\n");
    sb.append("    keyPrefix: ").append(toIndentedString(keyPrefix)).append("\n");
    sb.append("    urlTemplate: ").append(toIndentedString(urlTemplate)).append("\n");
    sb.append("    isAlphanumeric: ").append(toIndentedString(isAlphanumeric)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key_prefix");
    openapiFields.add("url_template");
    openapiFields.add("is_alphanumeric");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key_prefix");
    openapiRequiredFields.add("url_template");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReposCreateAutolinkRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReposCreateAutolinkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposCreateAutolinkRequest is not found in the empty JSON string", ReposCreateAutolinkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReposCreateAutolinkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposCreateAutolinkRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReposCreateAutolinkRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("key_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_prefix").toString()));
      }
      if (!jsonObj.get("url_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_template").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposCreateAutolinkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposCreateAutolinkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposCreateAutolinkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposCreateAutolinkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposCreateAutolinkRequest>() {
           @Override
           public void write(JsonWriter out, ReposCreateAutolinkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposCreateAutolinkRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReposCreateAutolinkRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReposCreateAutolinkRequest
  * @throws IOException if the JSON string is invalid with respect to ReposCreateAutolinkRequest
  */
  public static ReposCreateAutolinkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposCreateAutolinkRequest.class);
  }

 /**
  * Convert an instance of ReposCreateAutolinkRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

