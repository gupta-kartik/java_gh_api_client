/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DependencyGraphSpdxSbomSbomCreationInfo;
import org.openapitools.client.model.DependencyGraphSpdxSbomSbomPackagesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DependencyGraphSpdxSbomSbom
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class DependencyGraphSpdxSbomSbom {
  public static final String SERIALIZED_NAME_S_P_D_X_I_D = "SPDXID";
  @SerializedName(SERIALIZED_NAME_S_P_D_X_I_D)
  private String SPDXID;

  public static final String SERIALIZED_NAME_SPDX_VERSION = "spdxVersion";
  @SerializedName(SERIALIZED_NAME_SPDX_VERSION)
  private String spdxVersion;

  public static final String SERIALIZED_NAME_CREATION_INFO = "creationInfo";
  @SerializedName(SERIALIZED_NAME_CREATION_INFO)
  private DependencyGraphSpdxSbomSbomCreationInfo creationInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_LICENSE = "dataLicense";
  @SerializedName(SERIALIZED_NAME_DATA_LICENSE)
  private String dataLicense;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIBES = "documentDescribes";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIBES)
  private List<String> documentDescribes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_NAMESPACE = "documentNamespace";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAMESPACE)
  private String documentNamespace;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<DependencyGraphSpdxSbomSbomPackagesInner> packages = new ArrayList<>();

  public DependencyGraphSpdxSbomSbom() {
  }

  public DependencyGraphSpdxSbomSbom SPDXID(String SPDXID) {
    
    this.SPDXID = SPDXID;
    return this;
  }

   /**
   * The SPDX identifier for the SPDX document.
   * @return SPDXID
  **/
  @javax.annotation.Nonnull

  public String getSPDXID() {
    return SPDXID;
  }


  public void setSPDXID(String SPDXID) {
    this.SPDXID = SPDXID;
  }


  public DependencyGraphSpdxSbomSbom spdxVersion(String spdxVersion) {
    
    this.spdxVersion = spdxVersion;
    return this;
  }

   /**
   * The version of the SPDX specification that this document conforms to.
   * @return spdxVersion
  **/
  @javax.annotation.Nonnull

  public String getSpdxVersion() {
    return spdxVersion;
  }


  public void setSpdxVersion(String spdxVersion) {
    this.spdxVersion = spdxVersion;
  }


  public DependencyGraphSpdxSbomSbom creationInfo(DependencyGraphSpdxSbomSbomCreationInfo creationInfo) {
    
    this.creationInfo = creationInfo;
    return this;
  }

   /**
   * Get creationInfo
   * @return creationInfo
  **/
  @javax.annotation.Nonnull

  public DependencyGraphSpdxSbomSbomCreationInfo getCreationInfo() {
    return creationInfo;
  }


  public void setCreationInfo(DependencyGraphSpdxSbomSbomCreationInfo creationInfo) {
    this.creationInfo = creationInfo;
  }


  public DependencyGraphSpdxSbomSbom name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the SPDX document.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DependencyGraphSpdxSbomSbom dataLicense(String dataLicense) {
    
    this.dataLicense = dataLicense;
    return this;
  }

   /**
   * The license under which the SPDX document is licensed.
   * @return dataLicense
  **/
  @javax.annotation.Nonnull

  public String getDataLicense() {
    return dataLicense;
  }


  public void setDataLicense(String dataLicense) {
    this.dataLicense = dataLicense;
  }


  public DependencyGraphSpdxSbomSbom documentDescribes(List<String> documentDescribes) {
    
    this.documentDescribes = documentDescribes;
    return this;
  }

  public DependencyGraphSpdxSbomSbom addDocumentDescribesItem(String documentDescribesItem) {
    if (this.documentDescribes == null) {
      this.documentDescribes = new ArrayList<>();
    }
    this.documentDescribes.add(documentDescribesItem);
    return this;
  }

   /**
   * The name of the repository that the SPDX document describes.
   * @return documentDescribes
  **/
  @javax.annotation.Nonnull

  public List<String> getDocumentDescribes() {
    return documentDescribes;
  }


  public void setDocumentDescribes(List<String> documentDescribes) {
    this.documentDescribes = documentDescribes;
  }


  public DependencyGraphSpdxSbomSbom documentNamespace(String documentNamespace) {
    
    this.documentNamespace = documentNamespace;
    return this;
  }

   /**
   * The namespace for the SPDX document.
   * @return documentNamespace
  **/
  @javax.annotation.Nonnull

  public String getDocumentNamespace() {
    return documentNamespace;
  }


  public void setDocumentNamespace(String documentNamespace) {
    this.documentNamespace = documentNamespace;
  }


  public DependencyGraphSpdxSbomSbom packages(List<DependencyGraphSpdxSbomSbomPackagesInner> packages) {
    
    this.packages = packages;
    return this;
  }

  public DependencyGraphSpdxSbomSbom addPackagesItem(DependencyGraphSpdxSbomSbomPackagesInner packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @javax.annotation.Nonnull

  public List<DependencyGraphSpdxSbomSbomPackagesInner> getPackages() {
    return packages;
  }


  public void setPackages(List<DependencyGraphSpdxSbomSbomPackagesInner> packages) {
    this.packages = packages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependencyGraphSpdxSbomSbom dependencyGraphSpdxSbomSbom = (DependencyGraphSpdxSbomSbom) o;
    return Objects.equals(this.SPDXID, dependencyGraphSpdxSbomSbom.SPDXID) &&
        Objects.equals(this.spdxVersion, dependencyGraphSpdxSbomSbom.spdxVersion) &&
        Objects.equals(this.creationInfo, dependencyGraphSpdxSbomSbom.creationInfo) &&
        Objects.equals(this.name, dependencyGraphSpdxSbomSbom.name) &&
        Objects.equals(this.dataLicense, dependencyGraphSpdxSbomSbom.dataLicense) &&
        Objects.equals(this.documentDescribes, dependencyGraphSpdxSbomSbom.documentDescribes) &&
        Objects.equals(this.documentNamespace, dependencyGraphSpdxSbomSbom.documentNamespace) &&
        Objects.equals(this.packages, dependencyGraphSpdxSbomSbom.packages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(SPDXID, spdxVersion, creationInfo, name, dataLicense, documentDescribes, documentNamespace, packages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependencyGraphSpdxSbomSbom {\n");
    sb.append("    SPDXID: ").append(toIndentedString(SPDXID)).append("\n");
    sb.append("    spdxVersion: ").append(toIndentedString(spdxVersion)).append("\n");
    sb.append("    creationInfo: ").append(toIndentedString(creationInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataLicense: ").append(toIndentedString(dataLicense)).append("\n");
    sb.append("    documentDescribes: ").append(toIndentedString(documentDescribes)).append("\n");
    sb.append("    documentNamespace: ").append(toIndentedString(documentNamespace)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SPDXID");
    openapiFields.add("spdxVersion");
    openapiFields.add("creationInfo");
    openapiFields.add("name");
    openapiFields.add("dataLicense");
    openapiFields.add("documentDescribes");
    openapiFields.add("documentNamespace");
    openapiFields.add("packages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SPDXID");
    openapiRequiredFields.add("spdxVersion");
    openapiRequiredFields.add("creationInfo");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("dataLicense");
    openapiRequiredFields.add("documentDescribes");
    openapiRequiredFields.add("documentNamespace");
    openapiRequiredFields.add("packages");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DependencyGraphSpdxSbomSbom
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DependencyGraphSpdxSbomSbom.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DependencyGraphSpdxSbomSbom is not found in the empty JSON string", DependencyGraphSpdxSbomSbom.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DependencyGraphSpdxSbomSbom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DependencyGraphSpdxSbomSbom` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DependencyGraphSpdxSbomSbom.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("SPDXID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPDXID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPDXID").toString()));
      }
      if (!jsonObj.get("spdxVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spdxVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spdxVersion").toString()));
      }
      // validate the required field `creationInfo`
      DependencyGraphSpdxSbomSbomCreationInfo.validateJsonObject(jsonObj.getAsJsonObject("creationInfo"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("dataLicense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataLicense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataLicense").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("documentDescribes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("documentDescribes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDescribes` to be an array in the JSON string but got `%s`", jsonObj.get("documentDescribes").toString()));
      }
      if (!jsonObj.get("documentNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNamespace").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }

      JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
      // validate the required field `packages` (array)
      for (int i = 0; i < jsonArraypackages.size(); i++) {
        DependencyGraphSpdxSbomSbomPackagesInner.validateJsonObject(jsonArraypackages.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DependencyGraphSpdxSbomSbom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DependencyGraphSpdxSbomSbom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DependencyGraphSpdxSbomSbom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DependencyGraphSpdxSbomSbom.class));

       return (TypeAdapter<T>) new TypeAdapter<DependencyGraphSpdxSbomSbom>() {
           @Override
           public void write(JsonWriter out, DependencyGraphSpdxSbomSbom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DependencyGraphSpdxSbomSbom read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DependencyGraphSpdxSbomSbom given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DependencyGraphSpdxSbomSbom
  * @throws IOException if the JSON string is invalid with respect to DependencyGraphSpdxSbomSbom
  */
  public static DependencyGraphSpdxSbomSbom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DependencyGraphSpdxSbomSbom.class);
  }

 /**
  * Convert an instance of DependencyGraphSpdxSbomSbom to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

