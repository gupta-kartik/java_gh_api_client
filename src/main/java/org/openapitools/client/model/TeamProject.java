/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.TeamProjectPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A team&#39;s access to a project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class TeamProject {
  public static final String SERIALIZED_NAME_OWNER_URL = "owner_url";
  @SerializedName(SERIALIZED_NAME_OWNER_URL)
  private String ownerUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_COLUMNS_URL = "columns_url";
  @SerializedName(SERIALIZED_NAME_COLUMNS_URL)
  private String columnsUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private SimpleUser creator;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_ORGANIZATION_PERMISSION = "organization_permission";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_PERMISSION)
  private String organizationPermission;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private TeamProjectPermissions permissions;

  public TeamProject() {
  }

  public TeamProject ownerUrl(String ownerUrl) {
    
    this.ownerUrl = ownerUrl;
    return this;
  }

   /**
   * Get ownerUrl
   * @return ownerUrl
  **/
  @javax.annotation.Nonnull

  public String getOwnerUrl() {
    return ownerUrl;
  }


  public void setOwnerUrl(String ownerUrl) {
    this.ownerUrl = ownerUrl;
  }


  public TeamProject url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public TeamProject htmlUrl(String htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public String getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public TeamProject columnsUrl(String columnsUrl) {
    
    this.columnsUrl = columnsUrl;
    return this;
  }

   /**
   * Get columnsUrl
   * @return columnsUrl
  **/
  @javax.annotation.Nonnull

  public String getColumnsUrl() {
    return columnsUrl;
  }


  public void setColumnsUrl(String columnsUrl) {
    this.columnsUrl = columnsUrl;
  }


  public TeamProject id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public TeamProject nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public TeamProject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TeamProject body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public TeamProject number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public TeamProject state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public TeamProject creator(SimpleUser creator) {
    
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nonnull

  public SimpleUser getCreator() {
    return creator;
  }


  public void setCreator(SimpleUser creator) {
    this.creator = creator;
  }


  public TeamProject createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public TeamProject updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TeamProject organizationPermission(String organizationPermission) {
    
    this.organizationPermission = organizationPermission;
    return this;
  }

   /**
   * The organization permission for this project. Only present when owner is an organization.
   * @return organizationPermission
  **/
  @javax.annotation.Nullable

  public String getOrganizationPermission() {
    return organizationPermission;
  }


  public void setOrganizationPermission(String organizationPermission) {
    this.organizationPermission = organizationPermission;
  }


  public TeamProject _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Whether the project is private or not. Only present when owner is an organization.
   * @return _private
  **/
  @javax.annotation.Nullable

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public TeamProject permissions(TeamProjectPermissions permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull

  public TeamProjectPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(TeamProjectPermissions permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamProject teamProject = (TeamProject) o;
    return Objects.equals(this.ownerUrl, teamProject.ownerUrl) &&
        Objects.equals(this.url, teamProject.url) &&
        Objects.equals(this.htmlUrl, teamProject.htmlUrl) &&
        Objects.equals(this.columnsUrl, teamProject.columnsUrl) &&
        Objects.equals(this.id, teamProject.id) &&
        Objects.equals(this.nodeId, teamProject.nodeId) &&
        Objects.equals(this.name, teamProject.name) &&
        Objects.equals(this.body, teamProject.body) &&
        Objects.equals(this.number, teamProject.number) &&
        Objects.equals(this.state, teamProject.state) &&
        Objects.equals(this.creator, teamProject.creator) &&
        Objects.equals(this.createdAt, teamProject.createdAt) &&
        Objects.equals(this.updatedAt, teamProject.updatedAt) &&
        Objects.equals(this.organizationPermission, teamProject.organizationPermission) &&
        Objects.equals(this._private, teamProject._private) &&
        Objects.equals(this.permissions, teamProject.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerUrl, url, htmlUrl, columnsUrl, id, nodeId, name, body, number, state, creator, createdAt, updatedAt, organizationPermission, _private, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamProject {\n");
    sb.append("    ownerUrl: ").append(toIndentedString(ownerUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    columnsUrl: ").append(toIndentedString(columnsUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    organizationPermission: ").append(toIndentedString(organizationPermission)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("owner_url");
    openapiFields.add("url");
    openapiFields.add("html_url");
    openapiFields.add("columns_url");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("name");
    openapiFields.add("body");
    openapiFields.add("number");
    openapiFields.add("state");
    openapiFields.add("creator");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("organization_permission");
    openapiFields.add("private");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("owner_url");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("columns_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("permissions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TeamProject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TeamProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamProject is not found in the empty JSON string", TeamProject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TeamProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamProject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamProject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("owner_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("columns_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columns_url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `creator`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("creator"));
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("organization_permission") != null && !jsonObj.get("organization_permission").isJsonNull()) && !jsonObj.get("organization_permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_permission").toString()));
      }
      // validate the required field `permissions`
      TeamProjectPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamProject.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamProject>() {
           @Override
           public void write(JsonWriter out, TeamProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamProject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamProject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamProject
  * @throws IOException if the JSON string is invalid with respect to TeamProject
  */
  public static TeamProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamProject.class);
  }

 /**
  * Convert an instance of TeamProject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

