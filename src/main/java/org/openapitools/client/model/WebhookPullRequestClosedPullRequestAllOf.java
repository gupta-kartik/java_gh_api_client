/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookPullRequestClosedPullRequestAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookPullRequestClosedPullRequestAllOf {
  public static final String SERIALIZED_NAME_ALLOW_AUTO_MERGE = "allow_auto_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_MERGE)
  private Boolean allowAutoMerge = false;

  public static final String SERIALIZED_NAME_ALLOW_UPDATE_BRANCH = "allow_update_branch";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE_BRANCH)
  private Boolean allowUpdateBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge = false;

  /**
   * The default value for a merge commit message. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(MergeCommitMessageEnum.Adapter.class)
  public enum MergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    PR_TITLE("PR_TITLE"),
    
    BLANK("BLANK");

    private String value;

    MergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitMessageEnum fromValue(String value) {
      for (MergeCommitMessageEnum b : MergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_MESSAGE = "merge_commit_message";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_MESSAGE)
  private MergeCommitMessageEnum mergeCommitMessage;

  /**
   * The default value for a merge commit title. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., \&quot;Merge pull request #123 from branch-name\&quot;).
   */
  @JsonAdapter(MergeCommitTitleEnum.Adapter.class)
  public enum MergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    MERGE_MESSAGE("MERGE_MESSAGE");

    private String value;

    MergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitTitleEnum fromValue(String value) {
      for (MergeCommitTitleEnum b : MergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_TITLE = "merge_commit_title";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_TITLE)
  private MergeCommitTitleEnum mergeCommitTitle;

  /**
   * The default value for a squash merge commit message: - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(SquashMergeCommitMessageEnum.Adapter.class)
  public enum SquashMergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    COMMIT_MESSAGES("COMMIT_MESSAGES"),
    
    BLANK("BLANK");

    private String value;

    SquashMergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitMessageEnum fromValue(String value) {
      for (SquashMergeCommitMessageEnum b : SquashMergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE = "squash_merge_commit_message";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE)
  private SquashMergeCommitMessageEnum squashMergeCommitMessage;

  /**
   * The default value for a squash merge commit title: - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   */
  @JsonAdapter(SquashMergeCommitTitleEnum.Adapter.class)
  public enum SquashMergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");

    private String value;

    SquashMergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitTitleEnum fromValue(String value) {
      for (SquashMergeCommitTitleEnum b : SquashMergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE = "squash_merge_commit_title";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE)
  private SquashMergeCommitTitleEnum squashMergeCommitTitle;

  public static final String SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT = "use_squash_pr_title_as_default";
  @SerializedName(SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT)
  private Boolean useSquashPrTitleAsDefault = false;

  public WebhookPullRequestClosedPullRequestAllOf() {
  }

  public WebhookPullRequestClosedPullRequestAllOf allowAutoMerge(Boolean allowAutoMerge) {
    
    this.allowAutoMerge = allowAutoMerge;
    return this;
  }

   /**
   * Whether to allow auto-merge for pull requests.
   * @return allowAutoMerge
  **/
  @javax.annotation.Nullable

  public Boolean getAllowAutoMerge() {
    return allowAutoMerge;
  }


  public void setAllowAutoMerge(Boolean allowAutoMerge) {
    this.allowAutoMerge = allowAutoMerge;
  }


  public WebhookPullRequestClosedPullRequestAllOf allowUpdateBranch(Boolean allowUpdateBranch) {
    
    this.allowUpdateBranch = allowUpdateBranch;
    return this;
  }

   /**
   * Whether to allow updating the pull request&#39;s branch.
   * @return allowUpdateBranch
  **/
  @javax.annotation.Nullable

  public Boolean getAllowUpdateBranch() {
    return allowUpdateBranch;
  }


  public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
  }


  public WebhookPullRequestClosedPullRequestAllOf deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

   /**
   * Whether to delete head branches when pull requests are merged.
   * @return deleteBranchOnMerge
  **/
  @javax.annotation.Nullable

  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }


  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public WebhookPullRequestClosedPullRequestAllOf mergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    
    this.mergeCommitMessage = mergeCommitMessage;
    return this;
  }

   /**
   * The default value for a merge commit message. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return mergeCommitMessage
  **/
  @javax.annotation.Nullable

  public MergeCommitMessageEnum getMergeCommitMessage() {
    return mergeCommitMessage;
  }


  public void setMergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
  }


  public WebhookPullRequestClosedPullRequestAllOf mergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    
    this.mergeCommitTitle = mergeCommitTitle;
    return this;
  }

   /**
   * The default value for a merge commit title. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., \&quot;Merge pull request #123 from branch-name\&quot;).
   * @return mergeCommitTitle
  **/
  @javax.annotation.Nullable

  public MergeCommitTitleEnum getMergeCommitTitle() {
    return mergeCommitTitle;
  }


  public void setMergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    this.mergeCommitTitle = mergeCommitTitle;
  }


  public WebhookPullRequestClosedPullRequestAllOf squashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    
    this.squashMergeCommitMessage = squashMergeCommitMessage;
    return this;
  }

   /**
   * The default value for a squash merge commit message: - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return squashMergeCommitMessage
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
    return squashMergeCommitMessage;
  }


  public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    this.squashMergeCommitMessage = squashMergeCommitMessage;
  }


  public WebhookPullRequestClosedPullRequestAllOf squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    
    this.squashMergeCommitTitle = squashMergeCommitTitle;
    return this;
  }

   /**
   * The default value for a squash merge commit title: - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   * @return squashMergeCommitTitle
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
    return squashMergeCommitTitle;
  }


  public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    this.squashMergeCommitTitle = squashMergeCommitTitle;
  }


  public WebhookPullRequestClosedPullRequestAllOf useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    return this;
  }

   /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use &#x60;squash_merge_commit_title&#x60; instead.**
   * @return useSquashPrTitleAsDefault
  **/
  @javax.annotation.Nullable

  public Boolean getUseSquashPrTitleAsDefault() {
    return useSquashPrTitleAsDefault;
  }


  public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookPullRequestClosedPullRequestAllOf webhookPullRequestClosedPullRequestAllOf = (WebhookPullRequestClosedPullRequestAllOf) o;
    return Objects.equals(this.allowAutoMerge, webhookPullRequestClosedPullRequestAllOf.allowAutoMerge) &&
        Objects.equals(this.allowUpdateBranch, webhookPullRequestClosedPullRequestAllOf.allowUpdateBranch) &&
        Objects.equals(this.deleteBranchOnMerge, webhookPullRequestClosedPullRequestAllOf.deleteBranchOnMerge) &&
        Objects.equals(this.mergeCommitMessage, webhookPullRequestClosedPullRequestAllOf.mergeCommitMessage) &&
        Objects.equals(this.mergeCommitTitle, webhookPullRequestClosedPullRequestAllOf.mergeCommitTitle) &&
        Objects.equals(this.squashMergeCommitMessage, webhookPullRequestClosedPullRequestAllOf.squashMergeCommitMessage) &&
        Objects.equals(this.squashMergeCommitTitle, webhookPullRequestClosedPullRequestAllOf.squashMergeCommitTitle) &&
        Objects.equals(this.useSquashPrTitleAsDefault, webhookPullRequestClosedPullRequestAllOf.useSquashPrTitleAsDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAutoMerge, allowUpdateBranch, deleteBranchOnMerge, mergeCommitMessage, mergeCommitTitle, squashMergeCommitMessage, squashMergeCommitTitle, useSquashPrTitleAsDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookPullRequestClosedPullRequestAllOf {\n");
    sb.append("    allowAutoMerge: ").append(toIndentedString(allowAutoMerge)).append("\n");
    sb.append("    allowUpdateBranch: ").append(toIndentedString(allowUpdateBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    mergeCommitMessage: ").append(toIndentedString(mergeCommitMessage)).append("\n");
    sb.append("    mergeCommitTitle: ").append(toIndentedString(mergeCommitTitle)).append("\n");
    sb.append("    squashMergeCommitMessage: ").append(toIndentedString(squashMergeCommitMessage)).append("\n");
    sb.append("    squashMergeCommitTitle: ").append(toIndentedString(squashMergeCommitTitle)).append("\n");
    sb.append("    useSquashPrTitleAsDefault: ").append(toIndentedString(useSquashPrTitleAsDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_auto_merge");
    openapiFields.add("allow_update_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("merge_commit_message");
    openapiFields.add("merge_commit_title");
    openapiFields.add("squash_merge_commit_message");
    openapiFields.add("squash_merge_commit_title");
    openapiFields.add("use_squash_pr_title_as_default");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookPullRequestClosedPullRequestAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookPullRequestClosedPullRequestAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookPullRequestClosedPullRequestAllOf is not found in the empty JSON string", WebhookPullRequestClosedPullRequestAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookPullRequestClosedPullRequestAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookPullRequestClosedPullRequestAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) && !jsonObj.get("merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_message").toString()));
      }
      if ((jsonObj.get("merge_commit_title") != null && !jsonObj.get("merge_commit_title").isJsonNull()) && !jsonObj.get("merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_title").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_message") != null && !jsonObj.get("squash_merge_commit_message").isJsonNull()) && !jsonObj.get("squash_merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_message").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_title") != null && !jsonObj.get("squash_merge_commit_title").isJsonNull()) && !jsonObj.get("squash_merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookPullRequestClosedPullRequestAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookPullRequestClosedPullRequestAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookPullRequestClosedPullRequestAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookPullRequestClosedPullRequestAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookPullRequestClosedPullRequestAllOf>() {
           @Override
           public void write(JsonWriter out, WebhookPullRequestClosedPullRequestAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookPullRequestClosedPullRequestAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookPullRequestClosedPullRequestAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookPullRequestClosedPullRequestAllOf
  * @throws IOException if the JSON string is invalid with respect to WebhookPullRequestClosedPullRequestAllOf
  */
  public static WebhookPullRequestClosedPullRequestAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookPullRequestClosedPullRequestAllOf.class);
  }

 /**
  * Convert an instance of WebhookPullRequestClosedPullRequestAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

