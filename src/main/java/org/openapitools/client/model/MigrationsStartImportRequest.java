/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MigrationsStartImportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class MigrationsStartImportRequest {
  public static final String SERIALIZED_NAME_VCS_URL = "vcs_url";
  @SerializedName(SERIALIZED_NAME_VCS_URL)
  private String vcsUrl;

  /**
   * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   */
  @JsonAdapter(VcsEnum.Adapter.class)
  public enum VcsEnum {
    SUBVERSION("subversion"),
    
    GIT("git"),
    
    MERCURIAL("mercurial"),
    
    TFVC("tfvc");

    private String value;

    VcsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VcsEnum fromValue(String value) {
      for (VcsEnum b : VcsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VcsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VcsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VcsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VcsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VCS = "vcs";
  @SerializedName(SERIALIZED_NAME_VCS)
  private VcsEnum vcs;

  public static final String SERIALIZED_NAME_VCS_USERNAME = "vcs_username";
  @SerializedName(SERIALIZED_NAME_VCS_USERNAME)
  private String vcsUsername;

  public static final String SERIALIZED_NAME_VCS_PASSWORD = "vcs_password";
  @SerializedName(SERIALIZED_NAME_VCS_PASSWORD)
  private String vcsPassword;

  public static final String SERIALIZED_NAME_TFVC_PROJECT = "tfvc_project";
  @SerializedName(SERIALIZED_NAME_TFVC_PROJECT)
  private String tfvcProject;

  public MigrationsStartImportRequest() {
  }

  public MigrationsStartImportRequest vcsUrl(String vcsUrl) {
    
    this.vcsUrl = vcsUrl;
    return this;
  }

   /**
   * The URL of the originating repository.
   * @return vcsUrl
  **/
  @javax.annotation.Nonnull

  public String getVcsUrl() {
    return vcsUrl;
  }


  public void setVcsUrl(String vcsUrl) {
    this.vcsUrl = vcsUrl;
  }


  public MigrationsStartImportRequest vcs(VcsEnum vcs) {
    
    this.vcs = vcs;
    return this;
  }

   /**
   * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
   * @return vcs
  **/
  @javax.annotation.Nullable

  public VcsEnum getVcs() {
    return vcs;
  }


  public void setVcs(VcsEnum vcs) {
    this.vcs = vcs;
  }


  public MigrationsStartImportRequest vcsUsername(String vcsUsername) {
    
    this.vcsUsername = vcsUsername;
    return this;
  }

   /**
   * If authentication is required, the username to provide to &#x60;vcs_url&#x60;.
   * @return vcsUsername
  **/
  @javax.annotation.Nullable

  public String getVcsUsername() {
    return vcsUsername;
  }


  public void setVcsUsername(String vcsUsername) {
    this.vcsUsername = vcsUsername;
  }


  public MigrationsStartImportRequest vcsPassword(String vcsPassword) {
    
    this.vcsPassword = vcsPassword;
    return this;
  }

   /**
   * If authentication is required, the password to provide to &#x60;vcs_url&#x60;.
   * @return vcsPassword
  **/
  @javax.annotation.Nullable

  public String getVcsPassword() {
    return vcsPassword;
  }


  public void setVcsPassword(String vcsPassword) {
    this.vcsPassword = vcsPassword;
  }


  public MigrationsStartImportRequest tfvcProject(String tfvcProject) {
    
    this.tfvcProject = tfvcProject;
    return this;
  }

   /**
   * For a tfvc import, the name of the project that is being imported.
   * @return tfvcProject
  **/
  @javax.annotation.Nullable

  public String getTfvcProject() {
    return tfvcProject;
  }


  public void setTfvcProject(String tfvcProject) {
    this.tfvcProject = tfvcProject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationsStartImportRequest migrationsStartImportRequest = (MigrationsStartImportRequest) o;
    return Objects.equals(this.vcsUrl, migrationsStartImportRequest.vcsUrl) &&
        Objects.equals(this.vcs, migrationsStartImportRequest.vcs) &&
        Objects.equals(this.vcsUsername, migrationsStartImportRequest.vcsUsername) &&
        Objects.equals(this.vcsPassword, migrationsStartImportRequest.vcsPassword) &&
        Objects.equals(this.tfvcProject, migrationsStartImportRequest.tfvcProject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vcsUrl, vcs, vcsUsername, vcsPassword, tfvcProject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationsStartImportRequest {\n");
    sb.append("    vcsUrl: ").append(toIndentedString(vcsUrl)).append("\n");
    sb.append("    vcs: ").append(toIndentedString(vcs)).append("\n");
    sb.append("    vcsUsername: ").append(toIndentedString(vcsUsername)).append("\n");
    sb.append("    vcsPassword: ").append(toIndentedString(vcsPassword)).append("\n");
    sb.append("    tfvcProject: ").append(toIndentedString(tfvcProject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vcs_url");
    openapiFields.add("vcs");
    openapiFields.add("vcs_username");
    openapiFields.add("vcs_password");
    openapiFields.add("tfvc_project");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vcs_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MigrationsStartImportRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MigrationsStartImportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationsStartImportRequest is not found in the empty JSON string", MigrationsStartImportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MigrationsStartImportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationsStartImportRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MigrationsStartImportRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("vcs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_url").toString()));
      }
      if ((jsonObj.get("vcs") != null && !jsonObj.get("vcs").isJsonNull()) && !jsonObj.get("vcs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs").toString()));
      }
      if ((jsonObj.get("vcs_username") != null && !jsonObj.get("vcs_username").isJsonNull()) && !jsonObj.get("vcs_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_username").toString()));
      }
      if ((jsonObj.get("vcs_password") != null && !jsonObj.get("vcs_password").isJsonNull()) && !jsonObj.get("vcs_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcs_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcs_password").toString()));
      }
      if ((jsonObj.get("tfvc_project") != null && !jsonObj.get("tfvc_project").isJsonNull()) && !jsonObj.get("tfvc_project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tfvc_project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tfvc_project").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationsStartImportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationsStartImportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationsStartImportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationsStartImportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationsStartImportRequest>() {
           @Override
           public void write(JsonWriter out, MigrationsStartImportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationsStartImportRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MigrationsStartImportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MigrationsStartImportRequest
  * @throws IOException if the JSON string is invalid with respect to MigrationsStartImportRequest
  */
  public static MigrationsStartImportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationsStartImportRequest.class);
  }

 /**
  * Convert an instance of MigrationsStartImportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

