/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.WebhookLabelEditedChangesDescription;
import org.openapitools.client.model.WebhookLabelEditedChangesName;
import org.openapitools.client.model.WebhookTeamEditedChangesNotificationSetting;
import org.openapitools.client.model.WebhookTeamEditedChangesPrivacy;
import org.openapitools.client.model.WebhookTeamEditedChangesRepository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The changes to the team if the action was &#x60;edited&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookTeamEditedChanges {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private WebhookLabelEditedChangesDescription description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private WebhookLabelEditedChangesName name;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private WebhookTeamEditedChangesPrivacy privacy;

  public static final String SERIALIZED_NAME_NOTIFICATION_SETTING = "notification_setting";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SETTING)
  private WebhookTeamEditedChangesNotificationSetting notificationSetting;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private WebhookTeamEditedChangesRepository repository;

  public WebhookTeamEditedChanges() {
  }

  public WebhookTeamEditedChanges description(WebhookLabelEditedChangesDescription description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public WebhookLabelEditedChangesDescription getDescription() {
    return description;
  }


  public void setDescription(WebhookLabelEditedChangesDescription description) {
    this.description = description;
  }


  public WebhookTeamEditedChanges name(WebhookLabelEditedChangesName name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public WebhookLabelEditedChangesName getName() {
    return name;
  }


  public void setName(WebhookLabelEditedChangesName name) {
    this.name = name;
  }


  public WebhookTeamEditedChanges privacy(WebhookTeamEditedChangesPrivacy privacy) {
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nullable

  public WebhookTeamEditedChangesPrivacy getPrivacy() {
    return privacy;
  }


  public void setPrivacy(WebhookTeamEditedChangesPrivacy privacy) {
    this.privacy = privacy;
  }


  public WebhookTeamEditedChanges notificationSetting(WebhookTeamEditedChangesNotificationSetting notificationSetting) {
    
    this.notificationSetting = notificationSetting;
    return this;
  }

   /**
   * Get notificationSetting
   * @return notificationSetting
  **/
  @javax.annotation.Nullable

  public WebhookTeamEditedChangesNotificationSetting getNotificationSetting() {
    return notificationSetting;
  }


  public void setNotificationSetting(WebhookTeamEditedChangesNotificationSetting notificationSetting) {
    this.notificationSetting = notificationSetting;
  }


  public WebhookTeamEditedChanges repository(WebhookTeamEditedChangesRepository repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nullable

  public WebhookTeamEditedChangesRepository getRepository() {
    return repository;
  }


  public void setRepository(WebhookTeamEditedChangesRepository repository) {
    this.repository = repository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookTeamEditedChanges webhookTeamEditedChanges = (WebhookTeamEditedChanges) o;
    return Objects.equals(this.description, webhookTeamEditedChanges.description) &&
        Objects.equals(this.name, webhookTeamEditedChanges.name) &&
        Objects.equals(this.privacy, webhookTeamEditedChanges.privacy) &&
        Objects.equals(this.notificationSetting, webhookTeamEditedChanges.notificationSetting) &&
        Objects.equals(this.repository, webhookTeamEditedChanges.repository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, privacy, notificationSetting, repository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookTeamEditedChanges {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    notificationSetting: ").append(toIndentedString(notificationSetting)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("privacy");
    openapiFields.add("notification_setting");
    openapiFields.add("repository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookTeamEditedChanges
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookTeamEditedChanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookTeamEditedChanges is not found in the empty JSON string", WebhookTeamEditedChanges.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookTeamEditedChanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookTeamEditedChanges` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        WebhookLabelEditedChangesDescription.validateJsonObject(jsonObj.getAsJsonObject("description"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        WebhookLabelEditedChangesName.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        WebhookTeamEditedChangesPrivacy.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      }
      // validate the optional field `notification_setting`
      if (jsonObj.get("notification_setting") != null && !jsonObj.get("notification_setting").isJsonNull()) {
        WebhookTeamEditedChangesNotificationSetting.validateJsonObject(jsonObj.getAsJsonObject("notification_setting"));
      }
      // validate the optional field `repository`
      if (jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) {
        WebhookTeamEditedChangesRepository.validateJsonObject(jsonObj.getAsJsonObject("repository"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookTeamEditedChanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookTeamEditedChanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookTeamEditedChanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookTeamEditedChanges.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookTeamEditedChanges>() {
           @Override
           public void write(JsonWriter out, WebhookTeamEditedChanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookTeamEditedChanges read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookTeamEditedChanges given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookTeamEditedChanges
  * @throws IOException if the JSON string is invalid with respect to WebhookTeamEditedChanges
  */
  public static WebhookTeamEditedChanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookTeamEditedChanges.class);
  }

 /**
  * Convert an instance of WebhookTeamEditedChanges to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

