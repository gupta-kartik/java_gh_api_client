/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of permissions for the GitHub app
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class IntegrationPermissions {
  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private String issues;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private String checks;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private String contents;

  public static final String SERIALIZED_NAME_DEPLOYMENTS = "deployments";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS)
  private String deployments;

  public IntegrationPermissions() {
  }

  public IntegrationPermissions issues(String issues) {
    
    this.issues = issues;
    return this;
  }

   /**
   * Get issues
   * @return issues
  **/
  @javax.annotation.Nullable

  public String getIssues() {
    return issues;
  }


  public void setIssues(String issues) {
    this.issues = issues;
  }


  public IntegrationPermissions checks(String checks) {
    
    this.checks = checks;
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable

  public String getChecks() {
    return checks;
  }


  public void setChecks(String checks) {
    this.checks = checks;
  }


  public IntegrationPermissions metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable

  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public IntegrationPermissions contents(String contents) {
    
    this.contents = contents;
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable

  public String getContents() {
    return contents;
  }


  public void setContents(String contents) {
    this.contents = contents;
  }


  public IntegrationPermissions deployments(String deployments) {
    
    this.deployments = deployments;
    return this;
  }

   /**
   * Get deployments
   * @return deployments
  **/
  @javax.annotation.Nullable

  public String getDeployments() {
    return deployments;
  }


  public void setDeployments(String deployments) {
    this.deployments = deployments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationPermissions integrationPermissions = (IntegrationPermissions) o;
    return Objects.equals(this.issues, integrationPermissions.issues) &&
        Objects.equals(this.checks, integrationPermissions.checks) &&
        Objects.equals(this.metadata, integrationPermissions.metadata) &&
        Objects.equals(this.contents, integrationPermissions.contents) &&
        Objects.equals(this.deployments, integrationPermissions.deployments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issues, checks, metadata, contents, deployments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationPermissions {\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issues");
    openapiFields.add("checks");
    openapiFields.add("metadata");
    openapiFields.add("contents");
    openapiFields.add("deployments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationPermissions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegrationPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationPermissions is not found in the empty JSON string", IntegrationPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IntegrationPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationPermissions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) && !jsonObj.get("issues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      if ((jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) && !jsonObj.get("checks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) && !jsonObj.get("contents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents").toString()));
      }
      if ((jsonObj.get("deployments") != null && !jsonObj.get("deployments").isJsonNull()) && !jsonObj.get("deployments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationPermissions>() {
           @Override
           public void write(JsonWriter out, IntegrationPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationPermissions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationPermissions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationPermissions
  * @throws IOException if the JSON string is invalid with respect to IntegrationPermissions
  */
  public static IntegrationPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationPermissions.class);
  }

 /**
  * Convert an instance of IntegrationPermissions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

