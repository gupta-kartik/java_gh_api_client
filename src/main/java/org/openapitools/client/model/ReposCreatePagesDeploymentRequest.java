/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The object used to create GitHub Pages deployment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ReposCreatePagesDeploymentRequest {
  public static final String SERIALIZED_NAME_ARTIFACT_URL = "artifact_url";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_URL)
  private String artifactUrl;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment = "github-pages";

  public static final String SERIALIZED_NAME_PAGES_BUILD_VERSION = "pages_build_version";
  @SerializedName(SERIALIZED_NAME_PAGES_BUILD_VERSION)
  private String pagesBuildVersion = "GITHUB_SHA";

  public static final String SERIALIZED_NAME_OIDC_TOKEN = "oidc_token";
  @SerializedName(SERIALIZED_NAME_OIDC_TOKEN)
  private String oidcToken;

  public ReposCreatePagesDeploymentRequest() {
  }

  public ReposCreatePagesDeploymentRequest artifactUrl(String artifactUrl) {
    
    this.artifactUrl = artifactUrl;
    return this;
  }

   /**
   * The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
   * @return artifactUrl
  **/
  @javax.annotation.Nonnull

  public String getArtifactUrl() {
    return artifactUrl;
  }


  public void setArtifactUrl(String artifactUrl) {
    this.artifactUrl = artifactUrl;
  }


  public ReposCreatePagesDeploymentRequest environment(String environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * The target environment for this GitHub Pages deployment.
   * @return environment
  **/
  @javax.annotation.Nullable

  public String getEnvironment() {
    return environment;
  }


  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public ReposCreatePagesDeploymentRequest pagesBuildVersion(String pagesBuildVersion) {
    
    this.pagesBuildVersion = pagesBuildVersion;
    return this;
  }

   /**
   * A unique string that represents the version of the build for this deployment.
   * @return pagesBuildVersion
  **/
  @javax.annotation.Nonnull

  public String getPagesBuildVersion() {
    return pagesBuildVersion;
  }


  public void setPagesBuildVersion(String pagesBuildVersion) {
    this.pagesBuildVersion = pagesBuildVersion;
  }


  public ReposCreatePagesDeploymentRequest oidcToken(String oidcToken) {
    
    this.oidcToken = oidcToken;
    return this;
  }

   /**
   * The OIDC token issued by GitHub Actions certifying the origin of the deployment.
   * @return oidcToken
  **/
  @javax.annotation.Nonnull

  public String getOidcToken() {
    return oidcToken;
  }


  public void setOidcToken(String oidcToken) {
    this.oidcToken = oidcToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposCreatePagesDeploymentRequest reposCreatePagesDeploymentRequest = (ReposCreatePagesDeploymentRequest) o;
    return Objects.equals(this.artifactUrl, reposCreatePagesDeploymentRequest.artifactUrl) &&
        Objects.equals(this.environment, reposCreatePagesDeploymentRequest.environment) &&
        Objects.equals(this.pagesBuildVersion, reposCreatePagesDeploymentRequest.pagesBuildVersion) &&
        Objects.equals(this.oidcToken, reposCreatePagesDeploymentRequest.oidcToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactUrl, environment, pagesBuildVersion, oidcToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposCreatePagesDeploymentRequest {\n");
    sb.append("    artifactUrl: ").append(toIndentedString(artifactUrl)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    pagesBuildVersion: ").append(toIndentedString(pagesBuildVersion)).append("\n");
    sb.append("    oidcToken: ").append(toIndentedString(oidcToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifact_url");
    openapiFields.add("environment");
    openapiFields.add("pages_build_version");
    openapiFields.add("oidc_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("artifact_url");
    openapiRequiredFields.add("pages_build_version");
    openapiRequiredFields.add("oidc_token");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReposCreatePagesDeploymentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReposCreatePagesDeploymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposCreatePagesDeploymentRequest is not found in the empty JSON string", ReposCreatePagesDeploymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReposCreatePagesDeploymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposCreatePagesDeploymentRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReposCreatePagesDeploymentRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("artifact_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifact_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifact_url").toString()));
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if (!jsonObj.get("pages_build_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages_build_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages_build_version").toString()));
      }
      if (!jsonObj.get("oidc_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidc_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidc_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposCreatePagesDeploymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposCreatePagesDeploymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposCreatePagesDeploymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposCreatePagesDeploymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposCreatePagesDeploymentRequest>() {
           @Override
           public void write(JsonWriter out, ReposCreatePagesDeploymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposCreatePagesDeploymentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReposCreatePagesDeploymentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReposCreatePagesDeploymentRequest
  * @throws IOException if the JSON string is invalid with respect to ReposCreatePagesDeploymentRequest
  */
  public static ReposCreatePagesDeploymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposCreatePagesDeploymentRequest.class);
  }

 /**
  * Convert an instance of ReposCreatePagesDeploymentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

