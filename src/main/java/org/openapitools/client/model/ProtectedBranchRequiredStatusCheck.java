/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ProtectedBranchRequiredStatusCheckChecksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protected Branch Required Status Check
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ProtectedBranchRequiredStatusCheck {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ENFORCEMENT_LEVEL = "enforcement_level";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_LEVEL)
  private String enforcementLevel;

  public static final String SERIALIZED_NAME_CONTEXTS = "contexts";
  @SerializedName(SERIALIZED_NAME_CONTEXTS)
  private List<String> contexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<ProtectedBranchRequiredStatusCheckChecksInner> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXTS_URL = "contexts_url";
  @SerializedName(SERIALIZED_NAME_CONTEXTS_URL)
  private String contextsUrl;

  public static final String SERIALIZED_NAME_STRICT = "strict";
  @SerializedName(SERIALIZED_NAME_STRICT)
  private Boolean strict;

  public ProtectedBranchRequiredStatusCheck() {
  }

  public ProtectedBranchRequiredStatusCheck url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public ProtectedBranchRequiredStatusCheck enforcementLevel(String enforcementLevel) {
    
    this.enforcementLevel = enforcementLevel;
    return this;
  }

   /**
   * Get enforcementLevel
   * @return enforcementLevel
  **/
  @javax.annotation.Nullable

  public String getEnforcementLevel() {
    return enforcementLevel;
  }


  public void setEnforcementLevel(String enforcementLevel) {
    this.enforcementLevel = enforcementLevel;
  }


  public ProtectedBranchRequiredStatusCheck contexts(List<String> contexts) {
    
    this.contexts = contexts;
    return this;
  }

  public ProtectedBranchRequiredStatusCheck addContextsItem(String contextsItem) {
    if (this.contexts == null) {
      this.contexts = new ArrayList<>();
    }
    this.contexts.add(contextsItem);
    return this;
  }

   /**
   * Get contexts
   * @return contexts
  **/
  @javax.annotation.Nonnull

  public List<String> getContexts() {
    return contexts;
  }


  public void setContexts(List<String> contexts) {
    this.contexts = contexts;
  }


  public ProtectedBranchRequiredStatusCheck checks(List<ProtectedBranchRequiredStatusCheckChecksInner> checks) {
    
    this.checks = checks;
    return this;
  }

  public ProtectedBranchRequiredStatusCheck addChecksItem(ProtectedBranchRequiredStatusCheckChecksInner checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nonnull

  public List<ProtectedBranchRequiredStatusCheckChecksInner> getChecks() {
    return checks;
  }


  public void setChecks(List<ProtectedBranchRequiredStatusCheckChecksInner> checks) {
    this.checks = checks;
  }


  public ProtectedBranchRequiredStatusCheck contextsUrl(String contextsUrl) {
    
    this.contextsUrl = contextsUrl;
    return this;
  }

   /**
   * Get contextsUrl
   * @return contextsUrl
  **/
  @javax.annotation.Nullable

  public String getContextsUrl() {
    return contextsUrl;
  }


  public void setContextsUrl(String contextsUrl) {
    this.contextsUrl = contextsUrl;
  }


  public ProtectedBranchRequiredStatusCheck strict(Boolean strict) {
    
    this.strict = strict;
    return this;
  }

   /**
   * Get strict
   * @return strict
  **/
  @javax.annotation.Nullable

  public Boolean getStrict() {
    return strict;
  }


  public void setStrict(Boolean strict) {
    this.strict = strict;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectedBranchRequiredStatusCheck protectedBranchRequiredStatusCheck = (ProtectedBranchRequiredStatusCheck) o;
    return Objects.equals(this.url, protectedBranchRequiredStatusCheck.url) &&
        Objects.equals(this.enforcementLevel, protectedBranchRequiredStatusCheck.enforcementLevel) &&
        Objects.equals(this.contexts, protectedBranchRequiredStatusCheck.contexts) &&
        Objects.equals(this.checks, protectedBranchRequiredStatusCheck.checks) &&
        Objects.equals(this.contextsUrl, protectedBranchRequiredStatusCheck.contextsUrl) &&
        Objects.equals(this.strict, protectedBranchRequiredStatusCheck.strict);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, enforcementLevel, contexts, checks, contextsUrl, strict);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectedBranchRequiredStatusCheck {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    enforcementLevel: ").append(toIndentedString(enforcementLevel)).append("\n");
    sb.append("    contexts: ").append(toIndentedString(contexts)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    contextsUrl: ").append(toIndentedString(contextsUrl)).append("\n");
    sb.append("    strict: ").append(toIndentedString(strict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("enforcement_level");
    openapiFields.add("contexts");
    openapiFields.add("checks");
    openapiFields.add("contexts_url");
    openapiFields.add("strict");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contexts");
    openapiRequiredFields.add("checks");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProtectedBranchRequiredStatusCheck
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProtectedBranchRequiredStatusCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectedBranchRequiredStatusCheck is not found in the empty JSON string", ProtectedBranchRequiredStatusCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProtectedBranchRequiredStatusCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectedBranchRequiredStatusCheck` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProtectedBranchRequiredStatusCheck.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("enforcement_level") != null && !jsonObj.get("enforcement_level").isJsonNull()) && !jsonObj.get("enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcement_level").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("contexts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("contexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexts` to be an array in the JSON string but got `%s`", jsonObj.get("contexts").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }

      JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
      // validate the required field `checks` (array)
      for (int i = 0; i < jsonArraychecks.size(); i++) {
        ProtectedBranchRequiredStatusCheckChecksInner.validateJsonObject(jsonArraychecks.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("contexts_url") != null && !jsonObj.get("contexts_url").isJsonNull()) && !jsonObj.get("contexts_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexts_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contexts_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectedBranchRequiredStatusCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectedBranchRequiredStatusCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectedBranchRequiredStatusCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectedBranchRequiredStatusCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectedBranchRequiredStatusCheck>() {
           @Override
           public void write(JsonWriter out, ProtectedBranchRequiredStatusCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectedBranchRequiredStatusCheck read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProtectedBranchRequiredStatusCheck given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProtectedBranchRequiredStatusCheck
  * @throws IOException if the JSON string is invalid with respect to ProtectedBranchRequiredStatusCheck
  */
  public static ProtectedBranchRequiredStatusCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectedBranchRequiredStatusCheck.class);
  }

 /**
  * Convert an instance of ProtectedBranchRequiredStatusCheck to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

