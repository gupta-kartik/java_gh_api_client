/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.DeploymentWorkflowRunHeadRepositoryOwner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository {
  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private String contributorsUrl;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private String deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private String downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private String eventsUrl;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private String forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private String hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private String languagesUrl;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private String mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private DeploymentWorkflowRunHeadRepositoryOwner owner;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private String stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private String subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private String subscriptionUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private String tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private String teamsUrl;

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository() {
  }

  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository archiveUrl(String archiveUrl) {
    
    this.archiveUrl = archiveUrl;
    return this;
  }

   /**
   * Get archiveUrl
   * @return archiveUrl
  **/
  @javax.annotation.Nullable

  public String getArchiveUrl() {
    return archiveUrl;
  }


  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository assigneesUrl(String assigneesUrl) {
    
    this.assigneesUrl = assigneesUrl;
    return this;
  }

   /**
   * Get assigneesUrl
   * @return assigneesUrl
  **/
  @javax.annotation.Nullable

  public String getAssigneesUrl() {
    return assigneesUrl;
  }


  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository blobsUrl(String blobsUrl) {
    
    this.blobsUrl = blobsUrl;
    return this;
  }

   /**
   * Get blobsUrl
   * @return blobsUrl
  **/
  @javax.annotation.Nullable

  public String getBlobsUrl() {
    return blobsUrl;
  }


  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository branchesUrl(String branchesUrl) {
    
    this.branchesUrl = branchesUrl;
    return this;
  }

   /**
   * Get branchesUrl
   * @return branchesUrl
  **/
  @javax.annotation.Nullable

  public String getBranchesUrl() {
    return branchesUrl;
  }


  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository collaboratorsUrl(String collaboratorsUrl) {
    
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

   /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
  **/
  @javax.annotation.Nullable

  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }


  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository commentsUrl(String commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nullable

  public String getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository commitsUrl(String commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nullable

  public String getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository compareUrl(String compareUrl) {
    
    this.compareUrl = compareUrl;
    return this;
  }

   /**
   * Get compareUrl
   * @return compareUrl
  **/
  @javax.annotation.Nullable

  public String getCompareUrl() {
    return compareUrl;
  }


  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository contentsUrl(String contentsUrl) {
    
    this.contentsUrl = contentsUrl;
    return this;
  }

   /**
   * Get contentsUrl
   * @return contentsUrl
  **/
  @javax.annotation.Nullable

  public String getContentsUrl() {
    return contentsUrl;
  }


  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository contributorsUrl(String contributorsUrl) {
    
    this.contributorsUrl = contributorsUrl;
    return this;
  }

   /**
   * Get contributorsUrl
   * @return contributorsUrl
  **/
  @javax.annotation.Nullable

  public String getContributorsUrl() {
    return contributorsUrl;
  }


  public void setContributorsUrl(String contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository deploymentsUrl(String deploymentsUrl) {
    
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

   /**
   * Get deploymentsUrl
   * @return deploymentsUrl
  **/
  @javax.annotation.Nullable

  public String getDeploymentsUrl() {
    return deploymentsUrl;
  }


  public void setDeploymentsUrl(String deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository downloadsUrl(String downloadsUrl) {
    
    this.downloadsUrl = downloadsUrl;
    return this;
  }

   /**
   * Get downloadsUrl
   * @return downloadsUrl
  **/
  @javax.annotation.Nullable

  public String getDownloadsUrl() {
    return downloadsUrl;
  }


  public void setDownloadsUrl(String downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository eventsUrl(String eventsUrl) {
    
    this.eventsUrl = eventsUrl;
    return this;
  }

   /**
   * Get eventsUrl
   * @return eventsUrl
  **/
  @javax.annotation.Nullable

  public String getEventsUrl() {
    return eventsUrl;
  }


  public void setEventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository fork(Boolean fork) {
    
    this.fork = fork;
    return this;
  }

   /**
   * Get fork
   * @return fork
  **/
  @javax.annotation.Nullable

  public Boolean getFork() {
    return fork;
  }


  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository forksUrl(String forksUrl) {
    
    this.forksUrl = forksUrl;
    return this;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @javax.annotation.Nullable

  public String getForksUrl() {
    return forksUrl;
  }


  public void setForksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository gitCommitsUrl(String gitCommitsUrl) {
    
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

   /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
  **/
  @javax.annotation.Nullable

  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }


  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository gitRefsUrl(String gitRefsUrl) {
    
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

   /**
   * Get gitRefsUrl
   * @return gitRefsUrl
  **/
  @javax.annotation.Nullable

  public String getGitRefsUrl() {
    return gitRefsUrl;
  }


  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository gitTagsUrl(String gitTagsUrl) {
    
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

   /**
   * Get gitTagsUrl
   * @return gitTagsUrl
  **/
  @javax.annotation.Nullable

  public String getGitTagsUrl() {
    return gitTagsUrl;
  }


  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository hooksUrl(String hooksUrl) {
    
    this.hooksUrl = hooksUrl;
    return this;
  }

   /**
   * Get hooksUrl
   * @return hooksUrl
  **/
  @javax.annotation.Nullable

  public String getHooksUrl() {
    return hooksUrl;
  }


  public void setHooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository htmlUrl(String htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nullable

  public String getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository issueCommentUrl(String issueCommentUrl) {
    
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

   /**
   * Get issueCommentUrl
   * @return issueCommentUrl
  **/
  @javax.annotation.Nullable

  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }


  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository issueEventsUrl(String issueEventsUrl) {
    
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

   /**
   * Get issueEventsUrl
   * @return issueEventsUrl
  **/
  @javax.annotation.Nullable

  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }


  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository issuesUrl(String issuesUrl) {
    
    this.issuesUrl = issuesUrl;
    return this;
  }

   /**
   * Get issuesUrl
   * @return issuesUrl
  **/
  @javax.annotation.Nullable

  public String getIssuesUrl() {
    return issuesUrl;
  }


  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository keysUrl(String keysUrl) {
    
    this.keysUrl = keysUrl;
    return this;
  }

   /**
   * Get keysUrl
   * @return keysUrl
  **/
  @javax.annotation.Nullable

  public String getKeysUrl() {
    return keysUrl;
  }


  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository labelsUrl(String labelsUrl) {
    
    this.labelsUrl = labelsUrl;
    return this;
  }

   /**
   * Get labelsUrl
   * @return labelsUrl
  **/
  @javax.annotation.Nullable

  public String getLabelsUrl() {
    return labelsUrl;
  }


  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository languagesUrl(String languagesUrl) {
    
    this.languagesUrl = languagesUrl;
    return this;
  }

   /**
   * Get languagesUrl
   * @return languagesUrl
  **/
  @javax.annotation.Nullable

  public String getLanguagesUrl() {
    return languagesUrl;
  }


  public void setLanguagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository mergesUrl(String mergesUrl) {
    
    this.mergesUrl = mergesUrl;
    return this;
  }

   /**
   * Get mergesUrl
   * @return mergesUrl
  **/
  @javax.annotation.Nullable

  public String getMergesUrl() {
    return mergesUrl;
  }


  public void setMergesUrl(String mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository milestonesUrl(String milestonesUrl) {
    
    this.milestonesUrl = milestonesUrl;
    return this;
  }

   /**
   * Get milestonesUrl
   * @return milestonesUrl
  **/
  @javax.annotation.Nullable

  public String getMilestonesUrl() {
    return milestonesUrl;
  }


  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nullable

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository notificationsUrl(String notificationsUrl) {
    
    this.notificationsUrl = notificationsUrl;
    return this;
  }

   /**
   * Get notificationsUrl
   * @return notificationsUrl
  **/
  @javax.annotation.Nullable

  public String getNotificationsUrl() {
    return notificationsUrl;
  }


  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository owner(DeploymentWorkflowRunHeadRepositoryOwner owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable

  public DeploymentWorkflowRunHeadRepositoryOwner getOwner() {
    return owner;
  }


  public void setOwner(DeploymentWorkflowRunHeadRepositoryOwner owner) {
    this.owner = owner;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Get _private
   * @return _private
  **/
  @javax.annotation.Nullable

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository pullsUrl(String pullsUrl) {
    
    this.pullsUrl = pullsUrl;
    return this;
  }

   /**
   * Get pullsUrl
   * @return pullsUrl
  **/
  @javax.annotation.Nullable

  public String getPullsUrl() {
    return pullsUrl;
  }


  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository releasesUrl(String releasesUrl) {
    
    this.releasesUrl = releasesUrl;
    return this;
  }

   /**
   * Get releasesUrl
   * @return releasesUrl
  **/
  @javax.annotation.Nullable

  public String getReleasesUrl() {
    return releasesUrl;
  }


  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository stargazersUrl(String stargazersUrl) {
    
    this.stargazersUrl = stargazersUrl;
    return this;
  }

   /**
   * Get stargazersUrl
   * @return stargazersUrl
  **/
  @javax.annotation.Nullable

  public String getStargazersUrl() {
    return stargazersUrl;
  }


  public void setStargazersUrl(String stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository statusesUrl(String statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nullable

  public String getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository subscribersUrl(String subscribersUrl) {
    
    this.subscribersUrl = subscribersUrl;
    return this;
  }

   /**
   * Get subscribersUrl
   * @return subscribersUrl
  **/
  @javax.annotation.Nullable

  public String getSubscribersUrl() {
    return subscribersUrl;
  }


  public void setSubscribersUrl(String subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository subscriptionUrl(String subscriptionUrl) {
    
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

   /**
   * Get subscriptionUrl
   * @return subscriptionUrl
  **/
  @javax.annotation.Nullable

  public String getSubscriptionUrl() {
    return subscriptionUrl;
  }


  public void setSubscriptionUrl(String subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository tagsUrl(String tagsUrl) {
    
    this.tagsUrl = tagsUrl;
    return this;
  }

   /**
   * Get tagsUrl
   * @return tagsUrl
  **/
  @javax.annotation.Nullable

  public String getTagsUrl() {
    return tagsUrl;
  }


  public void setTagsUrl(String tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository teamsUrl(String teamsUrl) {
    
    this.teamsUrl = teamsUrl;
    return this;
  }

   /**
   * Get teamsUrl
   * @return teamsUrl
  **/
  @javax.annotation.Nullable

  public String getTeamsUrl() {
    return teamsUrl;
  }


  public void setTeamsUrl(String teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository treesUrl(String treesUrl) {
    
    this.treesUrl = treesUrl;
    return this;
  }

   /**
   * Get treesUrl
   * @return treesUrl
  **/
  @javax.annotation.Nullable

  public String getTreesUrl() {
    return treesUrl;
  }


  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository = (WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository) o;
    return Objects.equals(this.archiveUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.archiveUrl) &&
        Objects.equals(this.assigneesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.assigneesUrl) &&
        Objects.equals(this.blobsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.blobsUrl) &&
        Objects.equals(this.branchesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.branchesUrl) &&
        Objects.equals(this.collaboratorsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.commentsUrl) &&
        Objects.equals(this.commitsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.commitsUrl) &&
        Objects.equals(this.compareUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.compareUrl) &&
        Objects.equals(this.contentsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.contentsUrl) &&
        Objects.equals(this.contributorsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.contributorsUrl) &&
        Objects.equals(this.deploymentsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.deploymentsUrl) &&
        Objects.equals(this.description, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.description) &&
        Objects.equals(this.downloadsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.downloadsUrl) &&
        Objects.equals(this.eventsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.eventsUrl) &&
        Objects.equals(this.fork, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.fork) &&
        Objects.equals(this.forksUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.forksUrl) &&
        Objects.equals(this.fullName, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.fullName) &&
        Objects.equals(this.gitCommitsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.gitTagsUrl) &&
        Objects.equals(this.hooksUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.hooksUrl) &&
        Objects.equals(this.htmlUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.htmlUrl) &&
        Objects.equals(this.id, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.id) &&
        Objects.equals(this.issueCommentUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.issuesUrl) &&
        Objects.equals(this.keysUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.keysUrl) &&
        Objects.equals(this.labelsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.labelsUrl) &&
        Objects.equals(this.languagesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.languagesUrl) &&
        Objects.equals(this.mergesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.mergesUrl) &&
        Objects.equals(this.milestonesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.milestonesUrl) &&
        Objects.equals(this.name, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.name) &&
        Objects.equals(this.nodeId, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.nodeId) &&
        Objects.equals(this.notificationsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.notificationsUrl) &&
        Objects.equals(this.owner, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.owner) &&
        Objects.equals(this._private, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository._private) &&
        Objects.equals(this.pullsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.pullsUrl) &&
        Objects.equals(this.releasesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.releasesUrl) &&
        Objects.equals(this.stargazersUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.stargazersUrl) &&
        Objects.equals(this.statusesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.statusesUrl) &&
        Objects.equals(this.subscribersUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.subscriptionUrl) &&
        Objects.equals(this.tagsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.tagsUrl) &&
        Objects.equals(this.teamsUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.teamsUrl) &&
        Objects.equals(this.treesUrl, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.treesUrl) &&
        Objects.equals(this.url, webhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveUrl, assigneesUrl, blobsUrl, branchesUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, deploymentsUrl, description, downloadsUrl, eventsUrl, fork, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, languagesUrl, mergesUrl, milestonesUrl, name, nodeId, notificationsUrl, owner, _private, pullsUrl, releasesUrl, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, tagsUrl, teamsUrl, treesUrl, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository {\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archive_url");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("languages_url");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("owner");
    openapiFields.add("private");
    openapiFields.add("pulls_url");
    openapiFields.add("releases_url");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("trees_url");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository is not found in the empty JSON string", WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("archive_url") != null && !jsonObj.get("archive_url").isJsonNull()) && !jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if ((jsonObj.get("assignees_url") != null && !jsonObj.get("assignees_url").isJsonNull()) && !jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if ((jsonObj.get("blobs_url") != null && !jsonObj.get("blobs_url").isJsonNull()) && !jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if ((jsonObj.get("branches_url") != null && !jsonObj.get("branches_url").isJsonNull()) && !jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if ((jsonObj.get("collaborators_url") != null && !jsonObj.get("collaborators_url").isJsonNull()) && !jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if ((jsonObj.get("comments_url") != null && !jsonObj.get("comments_url").isJsonNull()) && !jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if ((jsonObj.get("commits_url") != null && !jsonObj.get("commits_url").isJsonNull()) && !jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if ((jsonObj.get("compare_url") != null && !jsonObj.get("compare_url").isJsonNull()) && !jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if ((jsonObj.get("contents_url") != null && !jsonObj.get("contents_url").isJsonNull()) && !jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if ((jsonObj.get("contributors_url") != null && !jsonObj.get("contributors_url").isJsonNull()) && !jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      if ((jsonObj.get("deployments_url") != null && !jsonObj.get("deployments_url").isJsonNull()) && !jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("downloads_url") != null && !jsonObj.get("downloads_url").isJsonNull()) && !jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if ((jsonObj.get("events_url") != null && !jsonObj.get("events_url").isJsonNull()) && !jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if ((jsonObj.get("forks_url") != null && !jsonObj.get("forks_url").isJsonNull()) && !jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("git_commits_url") != null && !jsonObj.get("git_commits_url").isJsonNull()) && !jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if ((jsonObj.get("git_refs_url") != null && !jsonObj.get("git_refs_url").isJsonNull()) && !jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if ((jsonObj.get("git_tags_url") != null && !jsonObj.get("git_tags_url").isJsonNull()) && !jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if ((jsonObj.get("hooks_url") != null && !jsonObj.get("hooks_url").isJsonNull()) && !jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("issue_comment_url") != null && !jsonObj.get("issue_comment_url").isJsonNull()) && !jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if ((jsonObj.get("issue_events_url") != null && !jsonObj.get("issue_events_url").isJsonNull()) && !jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if ((jsonObj.get("issues_url") != null && !jsonObj.get("issues_url").isJsonNull()) && !jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if ((jsonObj.get("keys_url") != null && !jsonObj.get("keys_url").isJsonNull()) && !jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if ((jsonObj.get("labels_url") != null && !jsonObj.get("labels_url").isJsonNull()) && !jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if ((jsonObj.get("languages_url") != null && !jsonObj.get("languages_url").isJsonNull()) && !jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      if ((jsonObj.get("merges_url") != null && !jsonObj.get("merges_url").isJsonNull()) && !jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if ((jsonObj.get("milestones_url") != null && !jsonObj.get("milestones_url").isJsonNull()) && !jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("notifications_url") != null && !jsonObj.get("notifications_url").isJsonNull()) && !jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        DeploymentWorkflowRunHeadRepositoryOwner.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      if ((jsonObj.get("pulls_url") != null && !jsonObj.get("pulls_url").isJsonNull()) && !jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      if ((jsonObj.get("releases_url") != null && !jsonObj.get("releases_url").isJsonNull()) && !jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if ((jsonObj.get("stargazers_url") != null && !jsonObj.get("stargazers_url").isJsonNull()) && !jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if ((jsonObj.get("statuses_url") != null && !jsonObj.get("statuses_url").isJsonNull()) && !jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if ((jsonObj.get("subscribers_url") != null && !jsonObj.get("subscribers_url").isJsonNull()) && !jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if ((jsonObj.get("subscription_url") != null && !jsonObj.get("subscription_url").isJsonNull()) && !jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if ((jsonObj.get("tags_url") != null && !jsonObj.get("tags_url").isJsonNull()) && !jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if ((jsonObj.get("teams_url") != null && !jsonObj.get("teams_url").isJsonNull()) && !jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      if ((jsonObj.get("trees_url") != null && !jsonObj.get("trees_url").isJsonNull()) && !jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository>() {
           @Override
           public void write(JsonWriter out, WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository
  * @throws IOException if the JSON string is invalid with respect to WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository
  */
  public static WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository.class);
  }

 /**
  * Convert an instance of WebhookWorkflowRunCompletedWorkflowRunAllOfHeadRepository to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

