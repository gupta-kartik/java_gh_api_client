/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import org.openapitools.client.model.BranchProtectionRequiredSignatures;
import org.openapitools.client.model.BranchRestrictionPolicy;
import org.openapitools.client.model.ProtectedBranchAllowForkSyncing;
import org.openapitools.client.model.ProtectedBranchEnforceAdmins;
import org.openapitools.client.model.ProtectedBranchLockBranch;
import org.openapitools.client.model.ProtectedBranchRequiredConversationResolution;
import org.openapitools.client.model.ProtectedBranchRequiredLinearHistory;
import org.openapitools.client.model.ProtectedBranchRequiredPullRequestReviews;
import org.openapitools.client.model.StatusCheckPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Branch protections protect branches
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ProtectedBranch {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_REQUIRED_STATUS_CHECKS = "required_status_checks";
  @SerializedName(SERIALIZED_NAME_REQUIRED_STATUS_CHECKS)
  private StatusCheckPolicy requiredStatusChecks;

  public static final String SERIALIZED_NAME_REQUIRED_PULL_REQUEST_REVIEWS = "required_pull_request_reviews";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PULL_REQUEST_REVIEWS)
  private ProtectedBranchRequiredPullRequestReviews requiredPullRequestReviews;

  public static final String SERIALIZED_NAME_REQUIRED_SIGNATURES = "required_signatures";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SIGNATURES)
  private BranchProtectionRequiredSignatures requiredSignatures;

  public static final String SERIALIZED_NAME_ENFORCE_ADMINS = "enforce_admins";
  @SerializedName(SERIALIZED_NAME_ENFORCE_ADMINS)
  private ProtectedBranchEnforceAdmins enforceAdmins;

  public static final String SERIALIZED_NAME_REQUIRED_LINEAR_HISTORY = "required_linear_history";
  @SerializedName(SERIALIZED_NAME_REQUIRED_LINEAR_HISTORY)
  private ProtectedBranchRequiredLinearHistory requiredLinearHistory;

  public static final String SERIALIZED_NAME_ALLOW_FORCE_PUSHES = "allow_force_pushes";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORCE_PUSHES)
  private ProtectedBranchRequiredLinearHistory allowForcePushes;

  public static final String SERIALIZED_NAME_ALLOW_DELETIONS = "allow_deletions";
  @SerializedName(SERIALIZED_NAME_ALLOW_DELETIONS)
  private ProtectedBranchRequiredLinearHistory allowDeletions;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private BranchRestrictionPolicy restrictions;

  public static final String SERIALIZED_NAME_REQUIRED_CONVERSATION_RESOLUTION = "required_conversation_resolution";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CONVERSATION_RESOLUTION)
  private ProtectedBranchRequiredConversationResolution requiredConversationResolution;

  public static final String SERIALIZED_NAME_BLOCK_CREATIONS = "block_creations";
  @SerializedName(SERIALIZED_NAME_BLOCK_CREATIONS)
  private ProtectedBranchRequiredLinearHistory blockCreations;

  public static final String SERIALIZED_NAME_LOCK_BRANCH = "lock_branch";
  @SerializedName(SERIALIZED_NAME_LOCK_BRANCH)
  private ProtectedBranchLockBranch lockBranch;

  public static final String SERIALIZED_NAME_ALLOW_FORK_SYNCING = "allow_fork_syncing";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORK_SYNCING)
  private ProtectedBranchAllowForkSyncing allowForkSyncing;

  public ProtectedBranch() {
  }

  public ProtectedBranch url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public ProtectedBranch requiredStatusChecks(StatusCheckPolicy requiredStatusChecks) {
    
    this.requiredStatusChecks = requiredStatusChecks;
    return this;
  }

   /**
   * Get requiredStatusChecks
   * @return requiredStatusChecks
  **/
  @javax.annotation.Nullable

  public StatusCheckPolicy getRequiredStatusChecks() {
    return requiredStatusChecks;
  }


  public void setRequiredStatusChecks(StatusCheckPolicy requiredStatusChecks) {
    this.requiredStatusChecks = requiredStatusChecks;
  }


  public ProtectedBranch requiredPullRequestReviews(ProtectedBranchRequiredPullRequestReviews requiredPullRequestReviews) {
    
    this.requiredPullRequestReviews = requiredPullRequestReviews;
    return this;
  }

   /**
   * Get requiredPullRequestReviews
   * @return requiredPullRequestReviews
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredPullRequestReviews getRequiredPullRequestReviews() {
    return requiredPullRequestReviews;
  }


  public void setRequiredPullRequestReviews(ProtectedBranchRequiredPullRequestReviews requiredPullRequestReviews) {
    this.requiredPullRequestReviews = requiredPullRequestReviews;
  }


  public ProtectedBranch requiredSignatures(BranchProtectionRequiredSignatures requiredSignatures) {
    
    this.requiredSignatures = requiredSignatures;
    return this;
  }

   /**
   * Get requiredSignatures
   * @return requiredSignatures
  **/
  @javax.annotation.Nullable

  public BranchProtectionRequiredSignatures getRequiredSignatures() {
    return requiredSignatures;
  }


  public void setRequiredSignatures(BranchProtectionRequiredSignatures requiredSignatures) {
    this.requiredSignatures = requiredSignatures;
  }


  public ProtectedBranch enforceAdmins(ProtectedBranchEnforceAdmins enforceAdmins) {
    
    this.enforceAdmins = enforceAdmins;
    return this;
  }

   /**
   * Get enforceAdmins
   * @return enforceAdmins
  **/
  @javax.annotation.Nullable

  public ProtectedBranchEnforceAdmins getEnforceAdmins() {
    return enforceAdmins;
  }


  public void setEnforceAdmins(ProtectedBranchEnforceAdmins enforceAdmins) {
    this.enforceAdmins = enforceAdmins;
  }


  public ProtectedBranch requiredLinearHistory(ProtectedBranchRequiredLinearHistory requiredLinearHistory) {
    
    this.requiredLinearHistory = requiredLinearHistory;
    return this;
  }

   /**
   * Get requiredLinearHistory
   * @return requiredLinearHistory
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredLinearHistory getRequiredLinearHistory() {
    return requiredLinearHistory;
  }


  public void setRequiredLinearHistory(ProtectedBranchRequiredLinearHistory requiredLinearHistory) {
    this.requiredLinearHistory = requiredLinearHistory;
  }


  public ProtectedBranch allowForcePushes(ProtectedBranchRequiredLinearHistory allowForcePushes) {
    
    this.allowForcePushes = allowForcePushes;
    return this;
  }

   /**
   * Get allowForcePushes
   * @return allowForcePushes
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredLinearHistory getAllowForcePushes() {
    return allowForcePushes;
  }


  public void setAllowForcePushes(ProtectedBranchRequiredLinearHistory allowForcePushes) {
    this.allowForcePushes = allowForcePushes;
  }


  public ProtectedBranch allowDeletions(ProtectedBranchRequiredLinearHistory allowDeletions) {
    
    this.allowDeletions = allowDeletions;
    return this;
  }

   /**
   * Get allowDeletions
   * @return allowDeletions
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredLinearHistory getAllowDeletions() {
    return allowDeletions;
  }


  public void setAllowDeletions(ProtectedBranchRequiredLinearHistory allowDeletions) {
    this.allowDeletions = allowDeletions;
  }


  public ProtectedBranch restrictions(BranchRestrictionPolicy restrictions) {
    
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable

  public BranchRestrictionPolicy getRestrictions() {
    return restrictions;
  }


  public void setRestrictions(BranchRestrictionPolicy restrictions) {
    this.restrictions = restrictions;
  }


  public ProtectedBranch requiredConversationResolution(ProtectedBranchRequiredConversationResolution requiredConversationResolution) {
    
    this.requiredConversationResolution = requiredConversationResolution;
    return this;
  }

   /**
   * Get requiredConversationResolution
   * @return requiredConversationResolution
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredConversationResolution getRequiredConversationResolution() {
    return requiredConversationResolution;
  }


  public void setRequiredConversationResolution(ProtectedBranchRequiredConversationResolution requiredConversationResolution) {
    this.requiredConversationResolution = requiredConversationResolution;
  }


  public ProtectedBranch blockCreations(ProtectedBranchRequiredLinearHistory blockCreations) {
    
    this.blockCreations = blockCreations;
    return this;
  }

   /**
   * Get blockCreations
   * @return blockCreations
  **/
  @javax.annotation.Nullable

  public ProtectedBranchRequiredLinearHistory getBlockCreations() {
    return blockCreations;
  }


  public void setBlockCreations(ProtectedBranchRequiredLinearHistory blockCreations) {
    this.blockCreations = blockCreations;
  }


  public ProtectedBranch lockBranch(ProtectedBranchLockBranch lockBranch) {
    
    this.lockBranch = lockBranch;
    return this;
  }

   /**
   * Get lockBranch
   * @return lockBranch
  **/
  @javax.annotation.Nullable

  public ProtectedBranchLockBranch getLockBranch() {
    return lockBranch;
  }


  public void setLockBranch(ProtectedBranchLockBranch lockBranch) {
    this.lockBranch = lockBranch;
  }


  public ProtectedBranch allowForkSyncing(ProtectedBranchAllowForkSyncing allowForkSyncing) {
    
    this.allowForkSyncing = allowForkSyncing;
    return this;
  }

   /**
   * Get allowForkSyncing
   * @return allowForkSyncing
  **/
  @javax.annotation.Nullable

  public ProtectedBranchAllowForkSyncing getAllowForkSyncing() {
    return allowForkSyncing;
  }


  public void setAllowForkSyncing(ProtectedBranchAllowForkSyncing allowForkSyncing) {
    this.allowForkSyncing = allowForkSyncing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectedBranch protectedBranch = (ProtectedBranch) o;
    return Objects.equals(this.url, protectedBranch.url) &&
        Objects.equals(this.requiredStatusChecks, protectedBranch.requiredStatusChecks) &&
        Objects.equals(this.requiredPullRequestReviews, protectedBranch.requiredPullRequestReviews) &&
        Objects.equals(this.requiredSignatures, protectedBranch.requiredSignatures) &&
        Objects.equals(this.enforceAdmins, protectedBranch.enforceAdmins) &&
        Objects.equals(this.requiredLinearHistory, protectedBranch.requiredLinearHistory) &&
        Objects.equals(this.allowForcePushes, protectedBranch.allowForcePushes) &&
        Objects.equals(this.allowDeletions, protectedBranch.allowDeletions) &&
        Objects.equals(this.restrictions, protectedBranch.restrictions) &&
        Objects.equals(this.requiredConversationResolution, protectedBranch.requiredConversationResolution) &&
        Objects.equals(this.blockCreations, protectedBranch.blockCreations) &&
        Objects.equals(this.lockBranch, protectedBranch.lockBranch) &&
        Objects.equals(this.allowForkSyncing, protectedBranch.allowForkSyncing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, requiredStatusChecks, requiredPullRequestReviews, requiredSignatures, enforceAdmins, requiredLinearHistory, allowForcePushes, allowDeletions, restrictions, requiredConversationResolution, blockCreations, lockBranch, allowForkSyncing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectedBranch {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    requiredStatusChecks: ").append(toIndentedString(requiredStatusChecks)).append("\n");
    sb.append("    requiredPullRequestReviews: ").append(toIndentedString(requiredPullRequestReviews)).append("\n");
    sb.append("    requiredSignatures: ").append(toIndentedString(requiredSignatures)).append("\n");
    sb.append("    enforceAdmins: ").append(toIndentedString(enforceAdmins)).append("\n");
    sb.append("    requiredLinearHistory: ").append(toIndentedString(requiredLinearHistory)).append("\n");
    sb.append("    allowForcePushes: ").append(toIndentedString(allowForcePushes)).append("\n");
    sb.append("    allowDeletions: ").append(toIndentedString(allowDeletions)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    requiredConversationResolution: ").append(toIndentedString(requiredConversationResolution)).append("\n");
    sb.append("    blockCreations: ").append(toIndentedString(blockCreations)).append("\n");
    sb.append("    lockBranch: ").append(toIndentedString(lockBranch)).append("\n");
    sb.append("    allowForkSyncing: ").append(toIndentedString(allowForkSyncing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("required_status_checks");
    openapiFields.add("required_pull_request_reviews");
    openapiFields.add("required_signatures");
    openapiFields.add("enforce_admins");
    openapiFields.add("required_linear_history");
    openapiFields.add("allow_force_pushes");
    openapiFields.add("allow_deletions");
    openapiFields.add("restrictions");
    openapiFields.add("required_conversation_resolution");
    openapiFields.add("block_creations");
    openapiFields.add("lock_branch");
    openapiFields.add("allow_fork_syncing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProtectedBranch
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProtectedBranch.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectedBranch is not found in the empty JSON string", ProtectedBranch.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProtectedBranch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectedBranch` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProtectedBranch.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `required_status_checks`
      if (jsonObj.get("required_status_checks") != null && !jsonObj.get("required_status_checks").isJsonNull()) {
        StatusCheckPolicy.validateJsonObject(jsonObj.getAsJsonObject("required_status_checks"));
      }
      // validate the optional field `required_pull_request_reviews`
      if (jsonObj.get("required_pull_request_reviews") != null && !jsonObj.get("required_pull_request_reviews").isJsonNull()) {
        ProtectedBranchRequiredPullRequestReviews.validateJsonObject(jsonObj.getAsJsonObject("required_pull_request_reviews"));
      }
      // validate the optional field `required_signatures`
      if (jsonObj.get("required_signatures") != null && !jsonObj.get("required_signatures").isJsonNull()) {
        BranchProtectionRequiredSignatures.validateJsonObject(jsonObj.getAsJsonObject("required_signatures"));
      }
      // validate the optional field `enforce_admins`
      if (jsonObj.get("enforce_admins") != null && !jsonObj.get("enforce_admins").isJsonNull()) {
        ProtectedBranchEnforceAdmins.validateJsonObject(jsonObj.getAsJsonObject("enforce_admins"));
      }
      // validate the optional field `required_linear_history`
      if (jsonObj.get("required_linear_history") != null && !jsonObj.get("required_linear_history").isJsonNull()) {
        ProtectedBranchRequiredLinearHistory.validateJsonObject(jsonObj.getAsJsonObject("required_linear_history"));
      }
      // validate the optional field `allow_force_pushes`
      if (jsonObj.get("allow_force_pushes") != null && !jsonObj.get("allow_force_pushes").isJsonNull()) {
        ProtectedBranchRequiredLinearHistory.validateJsonObject(jsonObj.getAsJsonObject("allow_force_pushes"));
      }
      // validate the optional field `allow_deletions`
      if (jsonObj.get("allow_deletions") != null && !jsonObj.get("allow_deletions").isJsonNull()) {
        ProtectedBranchRequiredLinearHistory.validateJsonObject(jsonObj.getAsJsonObject("allow_deletions"));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        BranchRestrictionPolicy.validateJsonObject(jsonObj.getAsJsonObject("restrictions"));
      }
      // validate the optional field `required_conversation_resolution`
      if (jsonObj.get("required_conversation_resolution") != null && !jsonObj.get("required_conversation_resolution").isJsonNull()) {
        ProtectedBranchRequiredConversationResolution.validateJsonObject(jsonObj.getAsJsonObject("required_conversation_resolution"));
      }
      // validate the optional field `block_creations`
      if (jsonObj.get("block_creations") != null && !jsonObj.get("block_creations").isJsonNull()) {
        ProtectedBranchRequiredLinearHistory.validateJsonObject(jsonObj.getAsJsonObject("block_creations"));
      }
      // validate the optional field `lock_branch`
      if (jsonObj.get("lock_branch") != null && !jsonObj.get("lock_branch").isJsonNull()) {
        ProtectedBranchLockBranch.validateJsonObject(jsonObj.getAsJsonObject("lock_branch"));
      }
      // validate the optional field `allow_fork_syncing`
      if (jsonObj.get("allow_fork_syncing") != null && !jsonObj.get("allow_fork_syncing").isJsonNull()) {
        ProtectedBranchAllowForkSyncing.validateJsonObject(jsonObj.getAsJsonObject("allow_fork_syncing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectedBranch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectedBranch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectedBranch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectedBranch.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectedBranch>() {
           @Override
           public void write(JsonWriter out, ProtectedBranch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectedBranch read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProtectedBranch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProtectedBranch
  * @throws IOException if the JSON string is invalid with respect to ProtectedBranch
  */
  public static ProtectedBranch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectedBranch.class);
  }

 /**
  * Convert an instance of ProtectedBranch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

