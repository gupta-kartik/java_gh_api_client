/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.PendingDeploymentEnvironment;
import org.openapitools.client.model.PendingDeploymentReviewersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class PendingDeployment {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private PendingDeploymentEnvironment environment;

  public static final String SERIALIZED_NAME_WAIT_TIMER = "wait_timer";
  @SerializedName(SERIALIZED_NAME_WAIT_TIMER)
  private Integer waitTimer;

  public static final String SERIALIZED_NAME_WAIT_TIMER_STARTED_AT = "wait_timer_started_at";
  @SerializedName(SERIALIZED_NAME_WAIT_TIMER_STARTED_AT)
  private OffsetDateTime waitTimerStartedAt;

  public static final String SERIALIZED_NAME_CURRENT_USER_CAN_APPROVE = "current_user_can_approve";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_CAN_APPROVE)
  private Boolean currentUserCanApprove;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<PendingDeploymentReviewersInner> reviewers = new ArrayList<>();

  public PendingDeployment() {
  }

  public PendingDeployment environment(PendingDeploymentEnvironment environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nonnull

  public PendingDeploymentEnvironment getEnvironment() {
    return environment;
  }


  public void setEnvironment(PendingDeploymentEnvironment environment) {
    this.environment = environment;
  }


  public PendingDeployment waitTimer(Integer waitTimer) {
    
    this.waitTimer = waitTimer;
    return this;
  }

   /**
   * The set duration of the wait timer
   * @return waitTimer
  **/
  @javax.annotation.Nonnull

  public Integer getWaitTimer() {
    return waitTimer;
  }


  public void setWaitTimer(Integer waitTimer) {
    this.waitTimer = waitTimer;
  }


  public PendingDeployment waitTimerStartedAt(OffsetDateTime waitTimerStartedAt) {
    
    this.waitTimerStartedAt = waitTimerStartedAt;
    return this;
  }

   /**
   * The time that the wait timer began.
   * @return waitTimerStartedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getWaitTimerStartedAt() {
    return waitTimerStartedAt;
  }


  public void setWaitTimerStartedAt(OffsetDateTime waitTimerStartedAt) {
    this.waitTimerStartedAt = waitTimerStartedAt;
  }


  public PendingDeployment currentUserCanApprove(Boolean currentUserCanApprove) {
    
    this.currentUserCanApprove = currentUserCanApprove;
    return this;
  }

   /**
   * Whether the currently authenticated user can approve the deployment
   * @return currentUserCanApprove
  **/
  @javax.annotation.Nonnull

  public Boolean getCurrentUserCanApprove() {
    return currentUserCanApprove;
  }


  public void setCurrentUserCanApprove(Boolean currentUserCanApprove) {
    this.currentUserCanApprove = currentUserCanApprove;
  }


  public PendingDeployment reviewers(List<PendingDeploymentReviewersInner> reviewers) {
    
    this.reviewers = reviewers;
    return this;
  }

  public PendingDeployment addReviewersItem(PendingDeploymentReviewersInner reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

   /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   * @return reviewers
  **/
  @javax.annotation.Nonnull

  public List<PendingDeploymentReviewersInner> getReviewers() {
    return reviewers;
  }


  public void setReviewers(List<PendingDeploymentReviewersInner> reviewers) {
    this.reviewers = reviewers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingDeployment pendingDeployment = (PendingDeployment) o;
    return Objects.equals(this.environment, pendingDeployment.environment) &&
        Objects.equals(this.waitTimer, pendingDeployment.waitTimer) &&
        Objects.equals(this.waitTimerStartedAt, pendingDeployment.waitTimerStartedAt) &&
        Objects.equals(this.currentUserCanApprove, pendingDeployment.currentUserCanApprove) &&
        Objects.equals(this.reviewers, pendingDeployment.reviewers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, waitTimer, waitTimerStartedAt, currentUserCanApprove, reviewers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingDeployment {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    waitTimer: ").append(toIndentedString(waitTimer)).append("\n");
    sb.append("    waitTimerStartedAt: ").append(toIndentedString(waitTimerStartedAt)).append("\n");
    sb.append("    currentUserCanApprove: ").append(toIndentedString(currentUserCanApprove)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("wait_timer");
    openapiFields.add("wait_timer_started_at");
    openapiFields.add("current_user_can_approve");
    openapiFields.add("reviewers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("wait_timer");
    openapiRequiredFields.add("wait_timer_started_at");
    openapiRequiredFields.add("current_user_can_approve");
    openapiRequiredFields.add("reviewers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PendingDeployment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PendingDeployment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingDeployment is not found in the empty JSON string", PendingDeployment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PendingDeployment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingDeployment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PendingDeployment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `environment`
      PendingDeploymentEnvironment.validateJsonObject(jsonObj.getAsJsonObject("environment"));
      // ensure the json data is an array
      if (!jsonObj.get("reviewers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
      }

      JsonArray jsonArrayreviewers = jsonObj.getAsJsonArray("reviewers");
      // validate the required field `reviewers` (array)
      for (int i = 0; i < jsonArrayreviewers.size(); i++) {
        PendingDeploymentReviewersInner.validateJsonObject(jsonArrayreviewers.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingDeployment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingDeployment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingDeployment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingDeployment.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingDeployment>() {
           @Override
           public void write(JsonWriter out, PendingDeployment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingDeployment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PendingDeployment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PendingDeployment
  * @throws IOException if the JSON string is invalid with respect to PendingDeployment
  */
  public static PendingDeployment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingDeployment.class);
  }

 /**
  * Convert an instance of PendingDeployment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

