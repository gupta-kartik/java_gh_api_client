/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookPackagePublishedPackagePackageVersionNpmMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookPackagePublishedPackagePackageVersionNpmMetadata {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_NPM_USER = "npm_user";
  @SerializedName(SERIALIZED_NAME_NPM_USER)
  private String npmUser;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private Object author;

  public static final String SERIALIZED_NAME_BUGS = "bugs";
  @SerializedName(SERIALIZED_NAME_BUGS)
  private Object bugs;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private Object dependencies;

  public static final String SERIALIZED_NAME_DEV_DEPENDENCIES = "dev_dependencies";
  @SerializedName(SERIALIZED_NAME_DEV_DEPENDENCIES)
  private Object devDependencies;

  public static final String SERIALIZED_NAME_PEER_DEPENDENCIES = "peer_dependencies";
  @SerializedName(SERIALIZED_NAME_PEER_DEPENDENCIES)
  private Object peerDependencies;

  public static final String SERIALIZED_NAME_OPTIONAL_DEPENDENCIES = "optional_dependencies";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_DEPENDENCIES)
  private Object optionalDependencies;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIST = "dist";
  @SerializedName(SERIALIZED_NAME_DIST)
  private Object dist;

  public static final String SERIALIZED_NAME_GIT_HEAD = "git_head";
  @SerializedName(SERIALIZED_NAME_GIT_HEAD)
  private String gitHead;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  private String main;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private Object repository;

  public static final String SERIALIZED_NAME_SCRIPTS = "scripts";
  @SerializedName(SERIALIZED_NAME_SCRIPTS)
  private Object scripts;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NODE_VERSION = "node_version";
  @SerializedName(SERIALIZED_NAME_NODE_VERSION)
  private String nodeVersion;

  public static final String SERIALIZED_NAME_NPM_VERSION = "npm_version";
  @SerializedName(SERIALIZED_NAME_NPM_VERSION)
  private String npmVersion;

  public static final String SERIALIZED_NAME_HAS_SHRINKWRAP = "has_shrinkwrap";
  @SerializedName(SERIALIZED_NAME_HAS_SHRINKWRAP)
  private Boolean hasShrinkwrap;

  public static final String SERIALIZED_NAME_MAINTAINERS = "maintainers";
  @SerializedName(SERIALIZED_NAME_MAINTAINERS)
  private List<Object> maintainers;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private List<Object> contributors;

  public static final String SERIALIZED_NAME_ENGINES = "engines";
  @SerializedName(SERIALIZED_NAME_ENGINES)
  private Object engines;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<String> files;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private Object bin;

  public static final String SERIALIZED_NAME_MAN = "man";
  @SerializedName(SERIALIZED_NAME_MAN)
  private Object man;

  public static final String SERIALIZED_NAME_DIRECTORIES = "directories";
  @SerializedName(SERIALIZED_NAME_DIRECTORIES)
  private Object directories;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private List<String> os;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private List<String> cpu;

  public static final String SERIALIZED_NAME_README = "readme";
  @SerializedName(SERIALIZED_NAME_README)
  private String readme;

  public static final String SERIALIZED_NAME_INSTALLATION_COMMAND = "installation_command";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_COMMAND)
  private String installationCommand;

  public static final String SERIALIZED_NAME_RELEASE_ID = "release_id";
  @SerializedName(SERIALIZED_NAME_RELEASE_ID)
  private Integer releaseId;

  public static final String SERIALIZED_NAME_COMMIT_OID = "commit_oid";
  @SerializedName(SERIALIZED_NAME_COMMIT_OID)
  private String commitOid;

  public static final String SERIALIZED_NAME_PUBLISHED_VIA_ACTIONS = "published_via_actions";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_VIA_ACTIONS)
  private Boolean publishedViaActions;

  public static final String SERIALIZED_NAME_DELETED_BY_ID = "deleted_by_id";
  @SerializedName(SERIALIZED_NAME_DELETED_BY_ID)
  private Integer deletedById;

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata() {
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata npmUser(String npmUser) {
    
    this.npmUser = npmUser;
    return this;
  }

   /**
   * Get npmUser
   * @return npmUser
  **/
  @javax.annotation.Nullable

  public String getNpmUser() {
    return npmUser;
  }


  public void setNpmUser(String npmUser) {
    this.npmUser = npmUser;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata author(Object author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable

  public Object getAuthor() {
    return author;
  }


  public void setAuthor(Object author) {
    this.author = author;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata bugs(Object bugs) {
    
    this.bugs = bugs;
    return this;
  }

   /**
   * Get bugs
   * @return bugs
  **/
  @javax.annotation.Nullable

  public Object getBugs() {
    return bugs;
  }


  public void setBugs(Object bugs) {
    this.bugs = bugs;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata dependencies(Object dependencies) {
    
    this.dependencies = dependencies;
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @javax.annotation.Nullable

  public Object getDependencies() {
    return dependencies;
  }


  public void setDependencies(Object dependencies) {
    this.dependencies = dependencies;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata devDependencies(Object devDependencies) {
    
    this.devDependencies = devDependencies;
    return this;
  }

   /**
   * Get devDependencies
   * @return devDependencies
  **/
  @javax.annotation.Nullable

  public Object getDevDependencies() {
    return devDependencies;
  }


  public void setDevDependencies(Object devDependencies) {
    this.devDependencies = devDependencies;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata peerDependencies(Object peerDependencies) {
    
    this.peerDependencies = peerDependencies;
    return this;
  }

   /**
   * Get peerDependencies
   * @return peerDependencies
  **/
  @javax.annotation.Nullable

  public Object getPeerDependencies() {
    return peerDependencies;
  }


  public void setPeerDependencies(Object peerDependencies) {
    this.peerDependencies = peerDependencies;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata optionalDependencies(Object optionalDependencies) {
    
    this.optionalDependencies = optionalDependencies;
    return this;
  }

   /**
   * Get optionalDependencies
   * @return optionalDependencies
  **/
  @javax.annotation.Nullable

  public Object getOptionalDependencies() {
    return optionalDependencies;
  }


  public void setOptionalDependencies(Object optionalDependencies) {
    this.optionalDependencies = optionalDependencies;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata dist(Object dist) {
    
    this.dist = dist;
    return this;
  }

   /**
   * Get dist
   * @return dist
  **/
  @javax.annotation.Nullable

  public Object getDist() {
    return dist;
  }


  public void setDist(Object dist) {
    this.dist = dist;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata gitHead(String gitHead) {
    
    this.gitHead = gitHead;
    return this;
  }

   /**
   * Get gitHead
   * @return gitHead
  **/
  @javax.annotation.Nullable

  public String getGitHead() {
    return gitHead;
  }


  public void setGitHead(String gitHead) {
    this.gitHead = gitHead;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata homepage(String homepage) {
    
    this.homepage = homepage;
    return this;
  }

   /**
   * Get homepage
   * @return homepage
  **/
  @javax.annotation.Nullable

  public String getHomepage() {
    return homepage;
  }


  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata license(String license) {
    
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nullable

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    this.license = license;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata main(String main) {
    
    this.main = main;
    return this;
  }

   /**
   * Get main
   * @return main
  **/
  @javax.annotation.Nullable

  public String getMain() {
    return main;
  }


  public void setMain(String main) {
    this.main = main;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata repository(Object repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nullable

  public Object getRepository() {
    return repository;
  }


  public void setRepository(Object repository) {
    this.repository = repository;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata scripts(Object scripts) {
    
    this.scripts = scripts;
    return this;
  }

   /**
   * Get scripts
   * @return scripts
  **/
  @javax.annotation.Nullable

  public Object getScripts() {
    return scripts;
  }


  public void setScripts(Object scripts) {
    this.scripts = scripts;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata nodeVersion(String nodeVersion) {
    
    this.nodeVersion = nodeVersion;
    return this;
  }

   /**
   * Get nodeVersion
   * @return nodeVersion
  **/
  @javax.annotation.Nullable

  public String getNodeVersion() {
    return nodeVersion;
  }


  public void setNodeVersion(String nodeVersion) {
    this.nodeVersion = nodeVersion;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata npmVersion(String npmVersion) {
    
    this.npmVersion = npmVersion;
    return this;
  }

   /**
   * Get npmVersion
   * @return npmVersion
  **/
  @javax.annotation.Nullable

  public String getNpmVersion() {
    return npmVersion;
  }


  public void setNpmVersion(String npmVersion) {
    this.npmVersion = npmVersion;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata hasShrinkwrap(Boolean hasShrinkwrap) {
    
    this.hasShrinkwrap = hasShrinkwrap;
    return this;
  }

   /**
   * Get hasShrinkwrap
   * @return hasShrinkwrap
  **/
  @javax.annotation.Nullable

  public Boolean getHasShrinkwrap() {
    return hasShrinkwrap;
  }


  public void setHasShrinkwrap(Boolean hasShrinkwrap) {
    this.hasShrinkwrap = hasShrinkwrap;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata maintainers(List<Object> maintainers) {
    
    this.maintainers = maintainers;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addMaintainersItem(Object maintainersItem) {
    if (this.maintainers == null) {
      this.maintainers = new ArrayList<>();
    }
    this.maintainers.add(maintainersItem);
    return this;
  }

   /**
   * Get maintainers
   * @return maintainers
  **/
  @javax.annotation.Nullable

  public List<Object> getMaintainers() {
    return maintainers;
  }


  public void setMaintainers(List<Object> maintainers) {
    this.maintainers = maintainers;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata contributors(List<Object> contributors) {
    
    this.contributors = contributors;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addContributorsItem(Object contributorsItem) {
    if (this.contributors == null) {
      this.contributors = new ArrayList<>();
    }
    this.contributors.add(contributorsItem);
    return this;
  }

   /**
   * Get contributors
   * @return contributors
  **/
  @javax.annotation.Nullable

  public List<Object> getContributors() {
    return contributors;
  }


  public void setContributors(List<Object> contributors) {
    this.contributors = contributors;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata engines(Object engines) {
    
    this.engines = engines;
    return this;
  }

   /**
   * Get engines
   * @return engines
  **/
  @javax.annotation.Nullable

  public Object getEngines() {
    return engines;
  }


  public void setEngines(Object engines) {
    this.engines = engines;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata keywords(List<String> keywords) {
    
    this.keywords = keywords;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Get keywords
   * @return keywords
  **/
  @javax.annotation.Nullable

  public List<String> getKeywords() {
    return keywords;
  }


  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata files(List<String> files) {
    
    this.files = files;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addFilesItem(String filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable

  public List<String> getFiles() {
    return files;
  }


  public void setFiles(List<String> files) {
    this.files = files;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata bin(Object bin) {
    
    this.bin = bin;
    return this;
  }

   /**
   * Get bin
   * @return bin
  **/
  @javax.annotation.Nullable

  public Object getBin() {
    return bin;
  }


  public void setBin(Object bin) {
    this.bin = bin;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata man(Object man) {
    
    this.man = man;
    return this;
  }

   /**
   * Get man
   * @return man
  **/
  @javax.annotation.Nullable

  public Object getMan() {
    return man;
  }


  public void setMan(Object man) {
    this.man = man;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata directories(Object directories) {
    
    this.directories = directories;
    return this;
  }

   /**
   * Get directories
   * @return directories
  **/
  @javax.annotation.Nullable

  public Object getDirectories() {
    return directories;
  }


  public void setDirectories(Object directories) {
    this.directories = directories;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata os(List<String> os) {
    
    this.os = os;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addOsItem(String osItem) {
    if (this.os == null) {
      this.os = new ArrayList<>();
    }
    this.os.add(osItem);
    return this;
  }

   /**
   * Get os
   * @return os
  **/
  @javax.annotation.Nullable

  public List<String> getOs() {
    return os;
  }


  public void setOs(List<String> os) {
    this.os = os;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata cpu(List<String> cpu) {
    
    this.cpu = cpu;
    return this;
  }

  public WebhookPackagePublishedPackagePackageVersionNpmMetadata addCpuItem(String cpuItem) {
    if (this.cpu == null) {
      this.cpu = new ArrayList<>();
    }
    this.cpu.add(cpuItem);
    return this;
  }

   /**
   * Get cpu
   * @return cpu
  **/
  @javax.annotation.Nullable

  public List<String> getCpu() {
    return cpu;
  }


  public void setCpu(List<String> cpu) {
    this.cpu = cpu;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata readme(String readme) {
    
    this.readme = readme;
    return this;
  }

   /**
   * Get readme
   * @return readme
  **/
  @javax.annotation.Nullable

  public String getReadme() {
    return readme;
  }


  public void setReadme(String readme) {
    this.readme = readme;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata installationCommand(String installationCommand) {
    
    this.installationCommand = installationCommand;
    return this;
  }

   /**
   * Get installationCommand
   * @return installationCommand
  **/
  @javax.annotation.Nullable

  public String getInstallationCommand() {
    return installationCommand;
  }


  public void setInstallationCommand(String installationCommand) {
    this.installationCommand = installationCommand;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata releaseId(Integer releaseId) {
    
    this.releaseId = releaseId;
    return this;
  }

   /**
   * Get releaseId
   * @return releaseId
  **/
  @javax.annotation.Nullable

  public Integer getReleaseId() {
    return releaseId;
  }


  public void setReleaseId(Integer releaseId) {
    this.releaseId = releaseId;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata commitOid(String commitOid) {
    
    this.commitOid = commitOid;
    return this;
  }

   /**
   * Get commitOid
   * @return commitOid
  **/
  @javax.annotation.Nullable

  public String getCommitOid() {
    return commitOid;
  }


  public void setCommitOid(String commitOid) {
    this.commitOid = commitOid;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata publishedViaActions(Boolean publishedViaActions) {
    
    this.publishedViaActions = publishedViaActions;
    return this;
  }

   /**
   * Get publishedViaActions
   * @return publishedViaActions
  **/
  @javax.annotation.Nullable

  public Boolean getPublishedViaActions() {
    return publishedViaActions;
  }


  public void setPublishedViaActions(Boolean publishedViaActions) {
    this.publishedViaActions = publishedViaActions;
  }


  public WebhookPackagePublishedPackagePackageVersionNpmMetadata deletedById(Integer deletedById) {
    
    this.deletedById = deletedById;
    return this;
  }

   /**
   * Get deletedById
   * @return deletedById
  **/
  @javax.annotation.Nullable

  public Integer getDeletedById() {
    return deletedById;
  }


  public void setDeletedById(Integer deletedById) {
    this.deletedById = deletedById;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookPackagePublishedPackagePackageVersionNpmMetadata webhookPackagePublishedPackagePackageVersionNpmMetadata = (WebhookPackagePublishedPackagePackageVersionNpmMetadata) o;
    return Objects.equals(this.name, webhookPackagePublishedPackagePackageVersionNpmMetadata.name) &&
        Objects.equals(this.version, webhookPackagePublishedPackagePackageVersionNpmMetadata.version) &&
        Objects.equals(this.npmUser, webhookPackagePublishedPackagePackageVersionNpmMetadata.npmUser) &&
        Objects.equals(this.author, webhookPackagePublishedPackagePackageVersionNpmMetadata.author) &&
        Objects.equals(this.bugs, webhookPackagePublishedPackagePackageVersionNpmMetadata.bugs) &&
        Objects.equals(this.dependencies, webhookPackagePublishedPackagePackageVersionNpmMetadata.dependencies) &&
        Objects.equals(this.devDependencies, webhookPackagePublishedPackagePackageVersionNpmMetadata.devDependencies) &&
        Objects.equals(this.peerDependencies, webhookPackagePublishedPackagePackageVersionNpmMetadata.peerDependencies) &&
        Objects.equals(this.optionalDependencies, webhookPackagePublishedPackagePackageVersionNpmMetadata.optionalDependencies) &&
        Objects.equals(this.description, webhookPackagePublishedPackagePackageVersionNpmMetadata.description) &&
        Objects.equals(this.dist, webhookPackagePublishedPackagePackageVersionNpmMetadata.dist) &&
        Objects.equals(this.gitHead, webhookPackagePublishedPackagePackageVersionNpmMetadata.gitHead) &&
        Objects.equals(this.homepage, webhookPackagePublishedPackagePackageVersionNpmMetadata.homepage) &&
        Objects.equals(this.license, webhookPackagePublishedPackagePackageVersionNpmMetadata.license) &&
        Objects.equals(this.main, webhookPackagePublishedPackagePackageVersionNpmMetadata.main) &&
        Objects.equals(this.repository, webhookPackagePublishedPackagePackageVersionNpmMetadata.repository) &&
        Objects.equals(this.scripts, webhookPackagePublishedPackagePackageVersionNpmMetadata.scripts) &&
        Objects.equals(this.id, webhookPackagePublishedPackagePackageVersionNpmMetadata.id) &&
        Objects.equals(this.nodeVersion, webhookPackagePublishedPackagePackageVersionNpmMetadata.nodeVersion) &&
        Objects.equals(this.npmVersion, webhookPackagePublishedPackagePackageVersionNpmMetadata.npmVersion) &&
        Objects.equals(this.hasShrinkwrap, webhookPackagePublishedPackagePackageVersionNpmMetadata.hasShrinkwrap) &&
        Objects.equals(this.maintainers, webhookPackagePublishedPackagePackageVersionNpmMetadata.maintainers) &&
        Objects.equals(this.contributors, webhookPackagePublishedPackagePackageVersionNpmMetadata.contributors) &&
        Objects.equals(this.engines, webhookPackagePublishedPackagePackageVersionNpmMetadata.engines) &&
        Objects.equals(this.keywords, webhookPackagePublishedPackagePackageVersionNpmMetadata.keywords) &&
        Objects.equals(this.files, webhookPackagePublishedPackagePackageVersionNpmMetadata.files) &&
        Objects.equals(this.bin, webhookPackagePublishedPackagePackageVersionNpmMetadata.bin) &&
        Objects.equals(this.man, webhookPackagePublishedPackagePackageVersionNpmMetadata.man) &&
        Objects.equals(this.directories, webhookPackagePublishedPackagePackageVersionNpmMetadata.directories) &&
        Objects.equals(this.os, webhookPackagePublishedPackagePackageVersionNpmMetadata.os) &&
        Objects.equals(this.cpu, webhookPackagePublishedPackagePackageVersionNpmMetadata.cpu) &&
        Objects.equals(this.readme, webhookPackagePublishedPackagePackageVersionNpmMetadata.readme) &&
        Objects.equals(this.installationCommand, webhookPackagePublishedPackagePackageVersionNpmMetadata.installationCommand) &&
        Objects.equals(this.releaseId, webhookPackagePublishedPackagePackageVersionNpmMetadata.releaseId) &&
        Objects.equals(this.commitOid, webhookPackagePublishedPackagePackageVersionNpmMetadata.commitOid) &&
        Objects.equals(this.publishedViaActions, webhookPackagePublishedPackagePackageVersionNpmMetadata.publishedViaActions) &&
        Objects.equals(this.deletedById, webhookPackagePublishedPackagePackageVersionNpmMetadata.deletedById);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, version, npmUser, author, bugs, dependencies, devDependencies, peerDependencies, optionalDependencies, description, dist, gitHead, homepage, license, main, repository, scripts, id, nodeVersion, npmVersion, hasShrinkwrap, maintainers, contributors, engines, keywords, files, bin, man, directories, os, cpu, readme, installationCommand, releaseId, commitOid, publishedViaActions, deletedById);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookPackagePublishedPackagePackageVersionNpmMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    npmUser: ").append(toIndentedString(npmUser)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    bugs: ").append(toIndentedString(bugs)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    devDependencies: ").append(toIndentedString(devDependencies)).append("\n");
    sb.append("    peerDependencies: ").append(toIndentedString(peerDependencies)).append("\n");
    sb.append("    optionalDependencies: ").append(toIndentedString(optionalDependencies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dist: ").append(toIndentedString(dist)).append("\n");
    sb.append("    gitHead: ").append(toIndentedString(gitHead)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeVersion: ").append(toIndentedString(nodeVersion)).append("\n");
    sb.append("    npmVersion: ").append(toIndentedString(npmVersion)).append("\n");
    sb.append("    hasShrinkwrap: ").append(toIndentedString(hasShrinkwrap)).append("\n");
    sb.append("    maintainers: ").append(toIndentedString(maintainers)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    engines: ").append(toIndentedString(engines)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    man: ").append(toIndentedString(man)).append("\n");
    sb.append("    directories: ").append(toIndentedString(directories)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    readme: ").append(toIndentedString(readme)).append("\n");
    sb.append("    installationCommand: ").append(toIndentedString(installationCommand)).append("\n");
    sb.append("    releaseId: ").append(toIndentedString(releaseId)).append("\n");
    sb.append("    commitOid: ").append(toIndentedString(commitOid)).append("\n");
    sb.append("    publishedViaActions: ").append(toIndentedString(publishedViaActions)).append("\n");
    sb.append("    deletedById: ").append(toIndentedString(deletedById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("version");
    openapiFields.add("npm_user");
    openapiFields.add("author");
    openapiFields.add("bugs");
    openapiFields.add("dependencies");
    openapiFields.add("dev_dependencies");
    openapiFields.add("peer_dependencies");
    openapiFields.add("optional_dependencies");
    openapiFields.add("description");
    openapiFields.add("dist");
    openapiFields.add("git_head");
    openapiFields.add("homepage");
    openapiFields.add("license");
    openapiFields.add("main");
    openapiFields.add("repository");
    openapiFields.add("scripts");
    openapiFields.add("id");
    openapiFields.add("node_version");
    openapiFields.add("npm_version");
    openapiFields.add("has_shrinkwrap");
    openapiFields.add("maintainers");
    openapiFields.add("contributors");
    openapiFields.add("engines");
    openapiFields.add("keywords");
    openapiFields.add("files");
    openapiFields.add("bin");
    openapiFields.add("man");
    openapiFields.add("directories");
    openapiFields.add("os");
    openapiFields.add("cpu");
    openapiFields.add("readme");
    openapiFields.add("installation_command");
    openapiFields.add("release_id");
    openapiFields.add("commit_oid");
    openapiFields.add("published_via_actions");
    openapiFields.add("deleted_by_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookPackagePublishedPackagePackageVersionNpmMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookPackagePublishedPackagePackageVersionNpmMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookPackagePublishedPackagePackageVersionNpmMetadata is not found in the empty JSON string", WebhookPackagePublishedPackagePackageVersionNpmMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookPackagePublishedPackagePackageVersionNpmMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookPackagePublishedPackagePackageVersionNpmMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("npm_user") != null && !jsonObj.get("npm_user").isJsonNull()) && !jsonObj.get("npm_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `npm_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("npm_user").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("git_head") != null && !jsonObj.get("git_head").isJsonNull()) && !jsonObj.get("git_head").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_head` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_head").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) && !jsonObj.get("main").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("node_version") != null && !jsonObj.get("node_version").isJsonNull()) && !jsonObj.get("node_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_version").toString()));
      }
      if ((jsonObj.get("npm_version") != null && !jsonObj.get("npm_version").isJsonNull()) && !jsonObj.get("npm_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `npm_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("npm_version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("maintainers") != null && !jsonObj.get("maintainers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintainers` to be an array in the JSON string but got `%s`", jsonObj.get("maintainers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors` to be an array in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("os") != null && !jsonObj.get("os").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be an array in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu` to be an array in the JSON string but got `%s`", jsonObj.get("cpu").toString()));
      }
      if ((jsonObj.get("readme") != null && !jsonObj.get("readme").isJsonNull()) && !jsonObj.get("readme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readme").toString()));
      }
      if ((jsonObj.get("installation_command") != null && !jsonObj.get("installation_command").isJsonNull()) && !jsonObj.get("installation_command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installation_command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installation_command").toString()));
      }
      if ((jsonObj.get("commit_oid") != null && !jsonObj.get("commit_oid").isJsonNull()) && !jsonObj.get("commit_oid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_oid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_oid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookPackagePublishedPackagePackageVersionNpmMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookPackagePublishedPackagePackageVersionNpmMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookPackagePublishedPackagePackageVersionNpmMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookPackagePublishedPackagePackageVersionNpmMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookPackagePublishedPackagePackageVersionNpmMetadata>() {
           @Override
           public void write(JsonWriter out, WebhookPackagePublishedPackagePackageVersionNpmMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookPackagePublishedPackagePackageVersionNpmMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookPackagePublishedPackagePackageVersionNpmMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookPackagePublishedPackagePackageVersionNpmMetadata
  * @throws IOException if the JSON string is invalid with respect to WebhookPackagePublishedPackagePackageVersionNpmMetadata
  */
  public static WebhookPackagePublishedPackagePackageVersionNpmMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookPackagePublishedPackagePackageVersionNpmMetadata.class);
  }

 /**
  * Convert an instance of WebhookPackagePublishedPackagePackageVersionNpmMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

