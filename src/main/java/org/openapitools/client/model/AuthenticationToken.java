/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Repository;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Authentication Token
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class AuthenticationToken {
  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Object permissions;

  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  private List<Repository> repositories;

  public static final String SERIALIZED_NAME_SINGLE_FILE = "single_file";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE)
  private String singleFile;

  /**
   * Describe whether all repositories have been selected or there&#39;s a selection involved
   */
  @JsonAdapter(RepositorySelectionEnum.Adapter.class)
  public enum RepositorySelectionEnum {
    ALL("all"),
    
    SELECTED("selected");

    private String value;

    RepositorySelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositorySelectionEnum fromValue(String value) {
      for (RepositorySelectionEnum b : RepositorySelectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositorySelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositorySelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositorySelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositorySelectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_SELECTION = "repository_selection";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SELECTION)
  private RepositorySelectionEnum repositorySelection;

  public AuthenticationToken() {
  }

  public AuthenticationToken token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * The token used for authentication
   * @return token
  **/
  @javax.annotation.Nonnull

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public AuthenticationToken expiresAt(OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The time this token expires
   * @return expiresAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public AuthenticationToken permissions(Object permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable

  public Object getPermissions() {
    return permissions;
  }


  public void setPermissions(Object permissions) {
    this.permissions = permissions;
  }


  public AuthenticationToken repositories(List<Repository> repositories) {
    
    this.repositories = repositories;
    return this;
  }

  public AuthenticationToken addRepositoriesItem(Repository repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

   /**
   * The repositories this token has access to
   * @return repositories
  **/
  @javax.annotation.Nullable

  public List<Repository> getRepositories() {
    return repositories;
  }


  public void setRepositories(List<Repository> repositories) {
    this.repositories = repositories;
  }


  public AuthenticationToken singleFile(String singleFile) {
    
    this.singleFile = singleFile;
    return this;
  }

   /**
   * Get singleFile
   * @return singleFile
  **/
  @javax.annotation.Nullable

  public String getSingleFile() {
    return singleFile;
  }


  public void setSingleFile(String singleFile) {
    this.singleFile = singleFile;
  }


  public AuthenticationToken repositorySelection(RepositorySelectionEnum repositorySelection) {
    
    this.repositorySelection = repositorySelection;
    return this;
  }

   /**
   * Describe whether all repositories have been selected or there&#39;s a selection involved
   * @return repositorySelection
  **/
  @javax.annotation.Nullable

  public RepositorySelectionEnum getRepositorySelection() {
    return repositorySelection;
  }


  public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
    this.repositorySelection = repositorySelection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationToken authenticationToken = (AuthenticationToken) o;
    return Objects.equals(this.token, authenticationToken.token) &&
        Objects.equals(this.expiresAt, authenticationToken.expiresAt) &&
        Objects.equals(this.permissions, authenticationToken.permissions) &&
        Objects.equals(this.repositories, authenticationToken.repositories) &&
        Objects.equals(this.singleFile, authenticationToken.singleFile) &&
        Objects.equals(this.repositorySelection, authenticationToken.repositorySelection);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, expiresAt, permissions, repositories, singleFile, repositorySelection);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationToken {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    singleFile: ").append(toIndentedString(singleFile)).append("\n");
    sb.append("    repositorySelection: ").append(toIndentedString(repositorySelection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("token");
    openapiFields.add("expires_at");
    openapiFields.add("permissions");
    openapiFields.add("repositories");
    openapiFields.add("single_file");
    openapiFields.add("repository_selection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("token");
    openapiRequiredFields.add("expires_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticationToken
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticationToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationToken is not found in the empty JSON string", AuthenticationToken.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationToken` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticationToken.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (jsonObj.get("repositories") != null && !jsonObj.get("repositories").isJsonNull()) {
        JsonArray jsonArrayrepositories = jsonObj.getAsJsonArray("repositories");
        if (jsonArrayrepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
          }

          // validate the optional field `repositories` (array)
          for (int i = 0; i < jsonArrayrepositories.size(); i++) {
            Repository.validateJsonObject(jsonArrayrepositories.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("single_file") != null && !jsonObj.get("single_file").isJsonNull()) && !jsonObj.get("single_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("single_file").toString()));
      }
      if ((jsonObj.get("repository_selection") != null && !jsonObj.get("repository_selection").isJsonNull()) && !jsonObj.get("repository_selection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_selection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_selection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationToken.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationToken>() {
           @Override
           public void write(JsonWriter out, AuthenticationToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationToken read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticationToken given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticationToken
  * @throws IOException if the JSON string is invalid with respect to AuthenticationToken
  */
  public static AuthenticationToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationToken.class);
  }

 /**
  * Convert an instance of AuthenticationToken to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

