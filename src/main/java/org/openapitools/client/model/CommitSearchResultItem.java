/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CommitSearchResultItemCommit;
import org.openapitools.client.model.FileCommitCommitParentsInner;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.NullableGitUser;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.SearchResultTextMatchesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Commit Search Result Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CommitSearchResultItem {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private CommitSearchResultItemCommit commit;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private NullableSimpleUser author;

  public static final String SERIALIZED_NAME_COMMITTER = "committer";
  @SerializedName(SERIALIZED_NAME_COMMITTER)
  private NullableGitUser committer;

  public static final String SERIALIZED_NAME_PARENTS = "parents";
  @SerializedName(SERIALIZED_NAME_PARENTS)
  private List<FileCommitCommitParentsInner> parents = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private MinimalRepository repository;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_TEXT_MATCHES = "text_matches";
  @SerializedName(SERIALIZED_NAME_TEXT_MATCHES)
  private List<SearchResultTextMatchesInner> textMatches;

  public CommitSearchResultItem() {
  }

  public CommitSearchResultItem url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public CommitSearchResultItem sha(String sha) {
    
    this.sha = sha;
    return this;
  }

   /**
   * Get sha
   * @return sha
  **/
  @javax.annotation.Nonnull

  public String getSha() {
    return sha;
  }


  public void setSha(String sha) {
    this.sha = sha;
  }


  public CommitSearchResultItem htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public CommitSearchResultItem commentsUrl(URI commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public CommitSearchResultItem commit(CommitSearchResultItemCommit commit) {
    
    this.commit = commit;
    return this;
  }

   /**
   * Get commit
   * @return commit
  **/
  @javax.annotation.Nonnull

  public CommitSearchResultItemCommit getCommit() {
    return commit;
  }


  public void setCommit(CommitSearchResultItemCommit commit) {
    this.commit = commit;
  }


  public CommitSearchResultItem author(NullableSimpleUser author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getAuthor() {
    return author;
  }


  public void setAuthor(NullableSimpleUser author) {
    this.author = author;
  }


  public CommitSearchResultItem committer(NullableGitUser committer) {
    
    this.committer = committer;
    return this;
  }

   /**
   * Get committer
   * @return committer
  **/
  @javax.annotation.Nullable

  public NullableGitUser getCommitter() {
    return committer;
  }


  public void setCommitter(NullableGitUser committer) {
    this.committer = committer;
  }


  public CommitSearchResultItem parents(List<FileCommitCommitParentsInner> parents) {
    
    this.parents = parents;
    return this;
  }

  public CommitSearchResultItem addParentsItem(FileCommitCommitParentsInner parentsItem) {
    if (this.parents == null) {
      this.parents = new ArrayList<>();
    }
    this.parents.add(parentsItem);
    return this;
  }

   /**
   * Get parents
   * @return parents
  **/
  @javax.annotation.Nonnull

  public List<FileCommitCommitParentsInner> getParents() {
    return parents;
  }


  public void setParents(List<FileCommitCommitParentsInner> parents) {
    this.parents = parents;
  }


  public CommitSearchResultItem repository(MinimalRepository repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nonnull

  public MinimalRepository getRepository() {
    return repository;
  }


  public void setRepository(MinimalRepository repository) {
    this.repository = repository;
  }


  public CommitSearchResultItem score(BigDecimal score) {
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nonnull

  public BigDecimal getScore() {
    return score;
  }


  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public CommitSearchResultItem nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public CommitSearchResultItem textMatches(List<SearchResultTextMatchesInner> textMatches) {
    
    this.textMatches = textMatches;
    return this;
  }

  public CommitSearchResultItem addTextMatchesItem(SearchResultTextMatchesInner textMatchesItem) {
    if (this.textMatches == null) {
      this.textMatches = new ArrayList<>();
    }
    this.textMatches.add(textMatchesItem);
    return this;
  }

   /**
   * Get textMatches
   * @return textMatches
  **/
  @javax.annotation.Nullable

  public List<SearchResultTextMatchesInner> getTextMatches() {
    return textMatches;
  }


  public void setTextMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitSearchResultItem commitSearchResultItem = (CommitSearchResultItem) o;
    return Objects.equals(this.url, commitSearchResultItem.url) &&
        Objects.equals(this.sha, commitSearchResultItem.sha) &&
        Objects.equals(this.htmlUrl, commitSearchResultItem.htmlUrl) &&
        Objects.equals(this.commentsUrl, commitSearchResultItem.commentsUrl) &&
        Objects.equals(this.commit, commitSearchResultItem.commit) &&
        Objects.equals(this.author, commitSearchResultItem.author) &&
        Objects.equals(this.committer, commitSearchResultItem.committer) &&
        Objects.equals(this.parents, commitSearchResultItem.parents) &&
        Objects.equals(this.repository, commitSearchResultItem.repository) &&
        Objects.equals(this.score, commitSearchResultItem.score) &&
        Objects.equals(this.nodeId, commitSearchResultItem.nodeId) &&
        Objects.equals(this.textMatches, commitSearchResultItem.textMatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, sha, htmlUrl, commentsUrl, commit, author, committer, parents, repository, score, nodeId, textMatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitSearchResultItem {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    committer: ").append(toIndentedString(committer)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    textMatches: ").append(toIndentedString(textMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("sha");
    openapiFields.add("html_url");
    openapiFields.add("comments_url");
    openapiFields.add("commit");
    openapiFields.add("author");
    openapiFields.add("committer");
    openapiFields.add("parents");
    openapiFields.add("repository");
    openapiFields.add("score");
    openapiFields.add("node_id");
    openapiFields.add("text_matches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("sha");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commit");
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("committer");
    openapiRequiredFields.add("parents");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("node_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommitSearchResultItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommitSearchResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitSearchResultItem is not found in the empty JSON string", CommitSearchResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommitSearchResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitSearchResultItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommitSearchResultItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      // validate the required field `commit`
      CommitSearchResultItemCommit.validateJsonObject(jsonObj.getAsJsonObject("commit"));
      // validate the required field `author`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("author"));
      // validate the required field `committer`
      NullableGitUser.validateJsonObject(jsonObj.getAsJsonObject("committer"));
      // ensure the json data is an array
      if (!jsonObj.get("parents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parents` to be an array in the JSON string but got `%s`", jsonObj.get("parents").toString()));
      }

      JsonArray jsonArrayparents = jsonObj.getAsJsonArray("parents");
      // validate the required field `parents` (array)
      for (int i = 0; i < jsonArrayparents.size(); i++) {
        FileCommitCommitParentsInner.validateJsonObject(jsonArrayparents.get(i).getAsJsonObject());
      };
      // validate the required field `repository`
      MinimalRepository.validateJsonObject(jsonObj.getAsJsonObject("repository"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (jsonObj.get("text_matches") != null && !jsonObj.get("text_matches").isJsonNull()) {
        JsonArray jsonArraytextMatches = jsonObj.getAsJsonArray("text_matches");
        if (jsonArraytextMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_matches` to be an array in the JSON string but got `%s`", jsonObj.get("text_matches").toString()));
          }

          // validate the optional field `text_matches` (array)
          for (int i = 0; i < jsonArraytextMatches.size(); i++) {
            SearchResultTextMatchesInner.validateJsonObject(jsonArraytextMatches.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitSearchResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitSearchResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitSearchResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitSearchResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitSearchResultItem>() {
           @Override
           public void write(JsonWriter out, CommitSearchResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitSearchResultItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommitSearchResultItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommitSearchResultItem
  * @throws IOException if the JSON string is invalid with respect to CommitSearchResultItem
  */
  public static CommitSearchResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitSearchResultItem.class);
  }

 /**
  * Convert an instance of CommitSearchResultItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

