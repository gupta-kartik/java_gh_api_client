/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.AutoMerge;
import org.openapitools.client.model.NullableMilestone;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.PullRequestBase;
import org.openapitools.client.model.PullRequestHead;
import org.openapitools.client.model.PullRequestLabelsInner;
import org.openapitools.client.model.PullRequestSimpleLinks;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.TeamSimple;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookPullRequestOpenedPullRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookPullRequestOpenedPullRequest {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private URI diffUrl;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private URI patchUrl;

  public static final String SERIALIZED_NAME_ISSUE_URL = "issue_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_URL)
  private URI issueUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private URI commitsUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS_URL = "review_comments_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS_URL)
  private URI reviewCommentsUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENT_URL = "review_comment_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENT_URL)
  private String reviewCommentUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private URI statusesUrl;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  /**
   * State of this Pull Request. Either &#x60;open&#x60; or &#x60;closed&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("open"),
    
    CLOSED("closed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleUser user;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<PullRequestLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private NullableMilestone milestone;

  public static final String SERIALIZED_NAME_ACTIVE_LOCK_REASON = "active_lock_reason";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCK_REASON)
  private String activeLockReason;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_MERGED_AT = "merged_at";
  @SerializedName(SERIALIZED_NAME_MERGED_AT)
  private OffsetDateTime mergedAt;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private NullableSimpleUser assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<SimpleUser> assignees;

  public static final String SERIALIZED_NAME_REQUESTED_REVIEWERS = "requested_reviewers";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REVIEWERS)
  private List<SimpleUser> requestedReviewers;

  public static final String SERIALIZED_NAME_REQUESTED_TEAMS = "requested_teams";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TEAMS)
  private List<TeamSimple> requestedTeams;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private PullRequestHead head;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private PullRequestBase base;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PullRequestSimpleLinks links;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociation authorAssociation;

  public static final String SERIALIZED_NAME_AUTO_MERGE = "auto_merge";
  @SerializedName(SERIALIZED_NAME_AUTO_MERGE)
  private AutoMerge autoMerge;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_MERGED = "merged";
  @SerializedName(SERIALIZED_NAME_MERGED)
  private Boolean merged;

  public static final String SERIALIZED_NAME_MERGEABLE = "mergeable";
  @SerializedName(SERIALIZED_NAME_MERGEABLE)
  private Boolean mergeable;

  public static final String SERIALIZED_NAME_REBASEABLE = "rebaseable";
  @SerializedName(SERIALIZED_NAME_REBASEABLE)
  private Boolean rebaseable;

  public static final String SERIALIZED_NAME_MERGEABLE_STATE = "mergeable_state";
  @SerializedName(SERIALIZED_NAME_MERGEABLE_STATE)
  private String mergeableState;

  public static final String SERIALIZED_NAME_MERGED_BY = "merged_by";
  @SerializedName(SERIALIZED_NAME_MERGED_BY)
  private NullableSimpleUser mergedBy;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Integer comments;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS = "review_comments";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS)
  private Integer reviewComments;

  public static final String SERIALIZED_NAME_MAINTAINER_CAN_MODIFY = "maintainer_can_modify";
  @SerializedName(SERIALIZED_NAME_MAINTAINER_CAN_MODIFY)
  private Boolean maintainerCanModify;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private Integer commits;

  public static final String SERIALIZED_NAME_ADDITIONS = "additions";
  @SerializedName(SERIALIZED_NAME_ADDITIONS)
  private Integer additions;

  public static final String SERIALIZED_NAME_DELETIONS = "deletions";
  @SerializedName(SERIALIZED_NAME_DELETIONS)
  private Integer deletions;

  public static final String SERIALIZED_NAME_CHANGED_FILES = "changed_files";
  @SerializedName(SERIALIZED_NAME_CHANGED_FILES)
  private Integer changedFiles;

  public static final String SERIALIZED_NAME_ALLOW_AUTO_MERGE = "allow_auto_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_MERGE)
  private Boolean allowAutoMerge = false;

  public static final String SERIALIZED_NAME_ALLOW_UPDATE_BRANCH = "allow_update_branch";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE_BRANCH)
  private Boolean allowUpdateBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge = false;

  /**
   * The default value for a merge commit message. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(MergeCommitMessageEnum.Adapter.class)
  public enum MergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    PR_TITLE("PR_TITLE"),
    
    BLANK("BLANK");

    private String value;

    MergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitMessageEnum fromValue(String value) {
      for (MergeCommitMessageEnum b : MergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_MESSAGE = "merge_commit_message";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_MESSAGE)
  private MergeCommitMessageEnum mergeCommitMessage;

  /**
   * The default value for a merge commit title. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  @JsonAdapter(MergeCommitTitleEnum.Adapter.class)
  public enum MergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    MERGE_MESSAGE("MERGE_MESSAGE");

    private String value;

    MergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitTitleEnum fromValue(String value) {
      for (MergeCommitTitleEnum b : MergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_TITLE = "merge_commit_title";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_TITLE)
  private MergeCommitTitleEnum mergeCommitTitle;

  /**
   * The default value for a squash merge commit message: - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(SquashMergeCommitMessageEnum.Adapter.class)
  public enum SquashMergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    COMMIT_MESSAGES("COMMIT_MESSAGES"),
    
    BLANK("BLANK");

    private String value;

    SquashMergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitMessageEnum fromValue(String value) {
      for (SquashMergeCommitMessageEnum b : SquashMergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE = "squash_merge_commit_message";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE)
  private SquashMergeCommitMessageEnum squashMergeCommitMessage;

  /**
   * The default value for a squash merge commit title: - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   */
  @JsonAdapter(SquashMergeCommitTitleEnum.Adapter.class)
  public enum SquashMergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");

    private String value;

    SquashMergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitTitleEnum fromValue(String value) {
      for (SquashMergeCommitTitleEnum b : SquashMergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE = "squash_merge_commit_title";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE)
  private SquashMergeCommitTitleEnum squashMergeCommitTitle;

  public static final String SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT = "use_squash_pr_title_as_default";
  @SerializedName(SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT)
  private Boolean useSquashPrTitleAsDefault = false;

  public WebhookPullRequestOpenedPullRequest() {
  }

  public WebhookPullRequestOpenedPullRequest url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public WebhookPullRequestOpenedPullRequest id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookPullRequestOpenedPullRequest nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookPullRequestOpenedPullRequest htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WebhookPullRequestOpenedPullRequest diffUrl(URI diffUrl) {
    
    this.diffUrl = diffUrl;
    return this;
  }

   /**
   * Get diffUrl
   * @return diffUrl
  **/
  @javax.annotation.Nonnull

  public URI getDiffUrl() {
    return diffUrl;
  }


  public void setDiffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
  }


  public WebhookPullRequestOpenedPullRequest patchUrl(URI patchUrl) {
    
    this.patchUrl = patchUrl;
    return this;
  }

   /**
   * Get patchUrl
   * @return patchUrl
  **/
  @javax.annotation.Nonnull

  public URI getPatchUrl() {
    return patchUrl;
  }


  public void setPatchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
  }


  public WebhookPullRequestOpenedPullRequest issueUrl(URI issueUrl) {
    
    this.issueUrl = issueUrl;
    return this;
  }

   /**
   * Get issueUrl
   * @return issueUrl
  **/
  @javax.annotation.Nonnull

  public URI getIssueUrl() {
    return issueUrl;
  }


  public void setIssueUrl(URI issueUrl) {
    this.issueUrl = issueUrl;
  }


  public WebhookPullRequestOpenedPullRequest commitsUrl(URI commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public WebhookPullRequestOpenedPullRequest reviewCommentsUrl(URI reviewCommentsUrl) {
    
    this.reviewCommentsUrl = reviewCommentsUrl;
    return this;
  }

   /**
   * Get reviewCommentsUrl
   * @return reviewCommentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getReviewCommentsUrl() {
    return reviewCommentsUrl;
  }


  public void setReviewCommentsUrl(URI reviewCommentsUrl) {
    this.reviewCommentsUrl = reviewCommentsUrl;
  }


  public WebhookPullRequestOpenedPullRequest reviewCommentUrl(String reviewCommentUrl) {
    
    this.reviewCommentUrl = reviewCommentUrl;
    return this;
  }

   /**
   * Get reviewCommentUrl
   * @return reviewCommentUrl
  **/
  @javax.annotation.Nonnull

  public String getReviewCommentUrl() {
    return reviewCommentUrl;
  }


  public void setReviewCommentUrl(String reviewCommentUrl) {
    this.reviewCommentUrl = reviewCommentUrl;
  }


  public WebhookPullRequestOpenedPullRequest commentsUrl(URI commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public WebhookPullRequestOpenedPullRequest statusesUrl(URI statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nonnull

  public URI getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public WebhookPullRequestOpenedPullRequest number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Number uniquely identifying the pull request within its repository.
   * @return number
  **/
  @javax.annotation.Nonnull

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public WebhookPullRequestOpenedPullRequest state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * State of this Pull Request. Either &#x60;open&#x60; or &#x60;closed&#x60;.
   * @return state
  **/
  @javax.annotation.Nonnull

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public WebhookPullRequestOpenedPullRequest locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nonnull

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public WebhookPullRequestOpenedPullRequest title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The title of the pull request.
   * @return title
  **/
  @javax.annotation.Nonnull

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public WebhookPullRequestOpenedPullRequest user(SimpleUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull

  public SimpleUser getUser() {
    return user;
  }


  public void setUser(SimpleUser user) {
    this.user = user;
  }


  public WebhookPullRequestOpenedPullRequest body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public WebhookPullRequestOpenedPullRequest labels(List<PullRequestLabelsInner> labels) {
    
    this.labels = labels;
    return this;
  }

  public WebhookPullRequestOpenedPullRequest addLabelsItem(PullRequestLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nonnull

  public List<PullRequestLabelsInner> getLabels() {
    return labels;
  }


  public void setLabels(List<PullRequestLabelsInner> labels) {
    this.labels = labels;
  }


  public WebhookPullRequestOpenedPullRequest milestone(NullableMilestone milestone) {
    
    this.milestone = milestone;
    return this;
  }

   /**
   * Get milestone
   * @return milestone
  **/
  @javax.annotation.Nullable

  public NullableMilestone getMilestone() {
    return milestone;
  }


  public void setMilestone(NullableMilestone milestone) {
    this.milestone = milestone;
  }


  public WebhookPullRequestOpenedPullRequest activeLockReason(String activeLockReason) {
    
    this.activeLockReason = activeLockReason;
    return this;
  }

   /**
   * Get activeLockReason
   * @return activeLockReason
  **/
  @javax.annotation.Nullable

  public String getActiveLockReason() {
    return activeLockReason;
  }


  public void setActiveLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
  }


  public WebhookPullRequestOpenedPullRequest createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookPullRequestOpenedPullRequest updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookPullRequestOpenedPullRequest closedAt(OffsetDateTime closedAt) {
    
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Get closedAt
   * @return closedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getClosedAt() {
    return closedAt;
  }


  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public WebhookPullRequestOpenedPullRequest mergedAt(OffsetDateTime mergedAt) {
    
    this.mergedAt = mergedAt;
    return this;
  }

   /**
   * Get mergedAt
   * @return mergedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getMergedAt() {
    return mergedAt;
  }


  public void setMergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
  }


  public WebhookPullRequestOpenedPullRequest mergeCommitSha(String mergeCommitSha) {
    
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

   /**
   * Get mergeCommitSha
   * @return mergeCommitSha
  **/
  @javax.annotation.Nullable

  public String getMergeCommitSha() {
    return mergeCommitSha;
  }


  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public WebhookPullRequestOpenedPullRequest assignee(NullableSimpleUser assignee) {
    
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getAssignee() {
    return assignee;
  }


  public void setAssignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
  }


  public WebhookPullRequestOpenedPullRequest assignees(List<SimpleUser> assignees) {
    
    this.assignees = assignees;
    return this;
  }

  public WebhookPullRequestOpenedPullRequest addAssigneesItem(SimpleUser assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

   /**
   * Get assignees
   * @return assignees
  **/
  @javax.annotation.Nullable

  public List<SimpleUser> getAssignees() {
    return assignees;
  }


  public void setAssignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
  }


  public WebhookPullRequestOpenedPullRequest requestedReviewers(List<SimpleUser> requestedReviewers) {
    
    this.requestedReviewers = requestedReviewers;
    return this;
  }

  public WebhookPullRequestOpenedPullRequest addRequestedReviewersItem(SimpleUser requestedReviewersItem) {
    if (this.requestedReviewers == null) {
      this.requestedReviewers = new ArrayList<>();
    }
    this.requestedReviewers.add(requestedReviewersItem);
    return this;
  }

   /**
   * Get requestedReviewers
   * @return requestedReviewers
  **/
  @javax.annotation.Nullable

  public List<SimpleUser> getRequestedReviewers() {
    return requestedReviewers;
  }


  public void setRequestedReviewers(List<SimpleUser> requestedReviewers) {
    this.requestedReviewers = requestedReviewers;
  }


  public WebhookPullRequestOpenedPullRequest requestedTeams(List<TeamSimple> requestedTeams) {
    
    this.requestedTeams = requestedTeams;
    return this;
  }

  public WebhookPullRequestOpenedPullRequest addRequestedTeamsItem(TeamSimple requestedTeamsItem) {
    if (this.requestedTeams == null) {
      this.requestedTeams = new ArrayList<>();
    }
    this.requestedTeams.add(requestedTeamsItem);
    return this;
  }

   /**
   * Get requestedTeams
   * @return requestedTeams
  **/
  @javax.annotation.Nullable

  public List<TeamSimple> getRequestedTeams() {
    return requestedTeams;
  }


  public void setRequestedTeams(List<TeamSimple> requestedTeams) {
    this.requestedTeams = requestedTeams;
  }


  public WebhookPullRequestOpenedPullRequest head(PullRequestHead head) {
    
    this.head = head;
    return this;
  }

   /**
   * Get head
   * @return head
  **/
  @javax.annotation.Nonnull

  public PullRequestHead getHead() {
    return head;
  }


  public void setHead(PullRequestHead head) {
    this.head = head;
  }


  public WebhookPullRequestOpenedPullRequest base(PullRequestBase base) {
    
    this.base = base;
    return this;
  }

   /**
   * Get base
   * @return base
  **/
  @javax.annotation.Nonnull

  public PullRequestBase getBase() {
    return base;
  }


  public void setBase(PullRequestBase base) {
    this.base = base;
  }


  public WebhookPullRequestOpenedPullRequest links(PullRequestSimpleLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nonnull

  public PullRequestSimpleLinks getLinks() {
    return links;
  }


  public void setLinks(PullRequestSimpleLinks links) {
    this.links = links;
  }


  public WebhookPullRequestOpenedPullRequest authorAssociation(AuthorAssociation authorAssociation) {
    
    this.authorAssociation = authorAssociation;
    return this;
  }

   /**
   * Get authorAssociation
   * @return authorAssociation
  **/
  @javax.annotation.Nonnull

  public AuthorAssociation getAuthorAssociation() {
    return authorAssociation;
  }


  public void setAuthorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public WebhookPullRequestOpenedPullRequest autoMerge(AutoMerge autoMerge) {
    
    this.autoMerge = autoMerge;
    return this;
  }

   /**
   * Get autoMerge
   * @return autoMerge
  **/
  @javax.annotation.Nullable

  public AutoMerge getAutoMerge() {
    return autoMerge;
  }


  public void setAutoMerge(AutoMerge autoMerge) {
    this.autoMerge = autoMerge;
  }


  public WebhookPullRequestOpenedPullRequest draft(Boolean draft) {
    
    this.draft = draft;
    return this;
  }

   /**
   * Indicates whether or not the pull request is a draft.
   * @return draft
  **/
  @javax.annotation.Nullable

  public Boolean getDraft() {
    return draft;
  }


  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public WebhookPullRequestOpenedPullRequest merged(Boolean merged) {
    
    this.merged = merged;
    return this;
  }

   /**
   * Get merged
   * @return merged
  **/
  @javax.annotation.Nonnull

  public Boolean getMerged() {
    return merged;
  }


  public void setMerged(Boolean merged) {
    this.merged = merged;
  }


  public WebhookPullRequestOpenedPullRequest mergeable(Boolean mergeable) {
    
    this.mergeable = mergeable;
    return this;
  }

   /**
   * Get mergeable
   * @return mergeable
  **/
  @javax.annotation.Nullable

  public Boolean getMergeable() {
    return mergeable;
  }


  public void setMergeable(Boolean mergeable) {
    this.mergeable = mergeable;
  }


  public WebhookPullRequestOpenedPullRequest rebaseable(Boolean rebaseable) {
    
    this.rebaseable = rebaseable;
    return this;
  }

   /**
   * Get rebaseable
   * @return rebaseable
  **/
  @javax.annotation.Nullable

  public Boolean getRebaseable() {
    return rebaseable;
  }


  public void setRebaseable(Boolean rebaseable) {
    this.rebaseable = rebaseable;
  }


  public WebhookPullRequestOpenedPullRequest mergeableState(String mergeableState) {
    
    this.mergeableState = mergeableState;
    return this;
  }

   /**
   * Get mergeableState
   * @return mergeableState
  **/
  @javax.annotation.Nonnull

  public String getMergeableState() {
    return mergeableState;
  }


  public void setMergeableState(String mergeableState) {
    this.mergeableState = mergeableState;
  }


  public WebhookPullRequestOpenedPullRequest mergedBy(NullableSimpleUser mergedBy) {
    
    this.mergedBy = mergedBy;
    return this;
  }

   /**
   * Get mergedBy
   * @return mergedBy
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getMergedBy() {
    return mergedBy;
  }


  public void setMergedBy(NullableSimpleUser mergedBy) {
    this.mergedBy = mergedBy;
  }


  public WebhookPullRequestOpenedPullRequest comments(Integer comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nonnull

  public Integer getComments() {
    return comments;
  }


  public void setComments(Integer comments) {
    this.comments = comments;
  }


  public WebhookPullRequestOpenedPullRequest reviewComments(Integer reviewComments) {
    
    this.reviewComments = reviewComments;
    return this;
  }

   /**
   * Get reviewComments
   * @return reviewComments
  **/
  @javax.annotation.Nonnull

  public Integer getReviewComments() {
    return reviewComments;
  }


  public void setReviewComments(Integer reviewComments) {
    this.reviewComments = reviewComments;
  }


  public WebhookPullRequestOpenedPullRequest maintainerCanModify(Boolean maintainerCanModify) {
    
    this.maintainerCanModify = maintainerCanModify;
    return this;
  }

   /**
   * Indicates whether maintainers can modify the pull request.
   * @return maintainerCanModify
  **/
  @javax.annotation.Nonnull

  public Boolean getMaintainerCanModify() {
    return maintainerCanModify;
  }


  public void setMaintainerCanModify(Boolean maintainerCanModify) {
    this.maintainerCanModify = maintainerCanModify;
  }


  public WebhookPullRequestOpenedPullRequest commits(Integer commits) {
    
    this.commits = commits;
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @javax.annotation.Nonnull

  public Integer getCommits() {
    return commits;
  }


  public void setCommits(Integer commits) {
    this.commits = commits;
  }


  public WebhookPullRequestOpenedPullRequest additions(Integer additions) {
    
    this.additions = additions;
    return this;
  }

   /**
   * Get additions
   * @return additions
  **/
  @javax.annotation.Nonnull

  public Integer getAdditions() {
    return additions;
  }


  public void setAdditions(Integer additions) {
    this.additions = additions;
  }


  public WebhookPullRequestOpenedPullRequest deletions(Integer deletions) {
    
    this.deletions = deletions;
    return this;
  }

   /**
   * Get deletions
   * @return deletions
  **/
  @javax.annotation.Nonnull

  public Integer getDeletions() {
    return deletions;
  }


  public void setDeletions(Integer deletions) {
    this.deletions = deletions;
  }


  public WebhookPullRequestOpenedPullRequest changedFiles(Integer changedFiles) {
    
    this.changedFiles = changedFiles;
    return this;
  }

   /**
   * Get changedFiles
   * @return changedFiles
  **/
  @javax.annotation.Nonnull

  public Integer getChangedFiles() {
    return changedFiles;
  }


  public void setChangedFiles(Integer changedFiles) {
    this.changedFiles = changedFiles;
  }


  public WebhookPullRequestOpenedPullRequest allowAutoMerge(Boolean allowAutoMerge) {
    
    this.allowAutoMerge = allowAutoMerge;
    return this;
  }

   /**
   * Whether to allow auto-merge for pull requests.
   * @return allowAutoMerge
  **/
  @javax.annotation.Nullable

  public Boolean getAllowAutoMerge() {
    return allowAutoMerge;
  }


  public void setAllowAutoMerge(Boolean allowAutoMerge) {
    this.allowAutoMerge = allowAutoMerge;
  }


  public WebhookPullRequestOpenedPullRequest allowUpdateBranch(Boolean allowUpdateBranch) {
    
    this.allowUpdateBranch = allowUpdateBranch;
    return this;
  }

   /**
   * Whether to allow updating the pull request&#39;s branch.
   * @return allowUpdateBranch
  **/
  @javax.annotation.Nullable

  public Boolean getAllowUpdateBranch() {
    return allowUpdateBranch;
  }


  public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
  }


  public WebhookPullRequestOpenedPullRequest deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

   /**
   * Whether to delete head branches when pull requests are merged.
   * @return deleteBranchOnMerge
  **/
  @javax.annotation.Nullable

  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }


  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public WebhookPullRequestOpenedPullRequest mergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    
    this.mergeCommitMessage = mergeCommitMessage;
    return this;
  }

   /**
   * The default value for a merge commit message. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return mergeCommitMessage
  **/
  @javax.annotation.Nullable

  public MergeCommitMessageEnum getMergeCommitMessage() {
    return mergeCommitMessage;
  }


  public void setMergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
  }


  public WebhookPullRequestOpenedPullRequest mergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    
    this.mergeCommitTitle = mergeCommitTitle;
    return this;
  }

   /**
   * The default value for a merge commit title. - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @return mergeCommitTitle
  **/
  @javax.annotation.Nullable

  public MergeCommitTitleEnum getMergeCommitTitle() {
    return mergeCommitTitle;
  }


  public void setMergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    this.mergeCommitTitle = mergeCommitTitle;
  }


  public WebhookPullRequestOpenedPullRequest squashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    
    this.squashMergeCommitMessage = squashMergeCommitMessage;
    return this;
  }

   /**
   * The default value for a squash merge commit message: - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return squashMergeCommitMessage
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
    return squashMergeCommitMessage;
  }


  public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    this.squashMergeCommitMessage = squashMergeCommitMessage;
  }


  public WebhookPullRequestOpenedPullRequest squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    
    this.squashMergeCommitTitle = squashMergeCommitTitle;
    return this;
  }

   /**
   * The default value for a squash merge commit title: - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   * @return squashMergeCommitTitle
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
    return squashMergeCommitTitle;
  }


  public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    this.squashMergeCommitTitle = squashMergeCommitTitle;
  }


  public WebhookPullRequestOpenedPullRequest useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    return this;
  }

   /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use &#x60;squash_merge_commit_title&#x60; instead.**
   * @return useSquashPrTitleAsDefault
  **/
  @javax.annotation.Nullable

  public Boolean getUseSquashPrTitleAsDefault() {
    return useSquashPrTitleAsDefault;
  }


  public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookPullRequestOpenedPullRequest webhookPullRequestOpenedPullRequest = (WebhookPullRequestOpenedPullRequest) o;
    return Objects.equals(this.url, webhookPullRequestOpenedPullRequest.url) &&
        Objects.equals(this.id, webhookPullRequestOpenedPullRequest.id) &&
        Objects.equals(this.nodeId, webhookPullRequestOpenedPullRequest.nodeId) &&
        Objects.equals(this.htmlUrl, webhookPullRequestOpenedPullRequest.htmlUrl) &&
        Objects.equals(this.diffUrl, webhookPullRequestOpenedPullRequest.diffUrl) &&
        Objects.equals(this.patchUrl, webhookPullRequestOpenedPullRequest.patchUrl) &&
        Objects.equals(this.issueUrl, webhookPullRequestOpenedPullRequest.issueUrl) &&
        Objects.equals(this.commitsUrl, webhookPullRequestOpenedPullRequest.commitsUrl) &&
        Objects.equals(this.reviewCommentsUrl, webhookPullRequestOpenedPullRequest.reviewCommentsUrl) &&
        Objects.equals(this.reviewCommentUrl, webhookPullRequestOpenedPullRequest.reviewCommentUrl) &&
        Objects.equals(this.commentsUrl, webhookPullRequestOpenedPullRequest.commentsUrl) &&
        Objects.equals(this.statusesUrl, webhookPullRequestOpenedPullRequest.statusesUrl) &&
        Objects.equals(this.number, webhookPullRequestOpenedPullRequest.number) &&
        Objects.equals(this.state, webhookPullRequestOpenedPullRequest.state) &&
        Objects.equals(this.locked, webhookPullRequestOpenedPullRequest.locked) &&
        Objects.equals(this.title, webhookPullRequestOpenedPullRequest.title) &&
        Objects.equals(this.user, webhookPullRequestOpenedPullRequest.user) &&
        Objects.equals(this.body, webhookPullRequestOpenedPullRequest.body) &&
        Objects.equals(this.labels, webhookPullRequestOpenedPullRequest.labels) &&
        Objects.equals(this.milestone, webhookPullRequestOpenedPullRequest.milestone) &&
        Objects.equals(this.activeLockReason, webhookPullRequestOpenedPullRequest.activeLockReason) &&
        Objects.equals(this.createdAt, webhookPullRequestOpenedPullRequest.createdAt) &&
        Objects.equals(this.updatedAt, webhookPullRequestOpenedPullRequest.updatedAt) &&
        Objects.equals(this.closedAt, webhookPullRequestOpenedPullRequest.closedAt) &&
        Objects.equals(this.mergedAt, webhookPullRequestOpenedPullRequest.mergedAt) &&
        Objects.equals(this.mergeCommitSha, webhookPullRequestOpenedPullRequest.mergeCommitSha) &&
        Objects.equals(this.assignee, webhookPullRequestOpenedPullRequest.assignee) &&
        Objects.equals(this.assignees, webhookPullRequestOpenedPullRequest.assignees) &&
        Objects.equals(this.requestedReviewers, webhookPullRequestOpenedPullRequest.requestedReviewers) &&
        Objects.equals(this.requestedTeams, webhookPullRequestOpenedPullRequest.requestedTeams) &&
        Objects.equals(this.head, webhookPullRequestOpenedPullRequest.head) &&
        Objects.equals(this.base, webhookPullRequestOpenedPullRequest.base) &&
        Objects.equals(this.links, webhookPullRequestOpenedPullRequest.links) &&
        Objects.equals(this.authorAssociation, webhookPullRequestOpenedPullRequest.authorAssociation) &&
        Objects.equals(this.autoMerge, webhookPullRequestOpenedPullRequest.autoMerge) &&
        Objects.equals(this.draft, webhookPullRequestOpenedPullRequest.draft) &&
        Objects.equals(this.merged, webhookPullRequestOpenedPullRequest.merged) &&
        Objects.equals(this.mergeable, webhookPullRequestOpenedPullRequest.mergeable) &&
        Objects.equals(this.rebaseable, webhookPullRequestOpenedPullRequest.rebaseable) &&
        Objects.equals(this.mergeableState, webhookPullRequestOpenedPullRequest.mergeableState) &&
        Objects.equals(this.mergedBy, webhookPullRequestOpenedPullRequest.mergedBy) &&
        Objects.equals(this.comments, webhookPullRequestOpenedPullRequest.comments) &&
        Objects.equals(this.reviewComments, webhookPullRequestOpenedPullRequest.reviewComments) &&
        Objects.equals(this.maintainerCanModify, webhookPullRequestOpenedPullRequest.maintainerCanModify) &&
        Objects.equals(this.commits, webhookPullRequestOpenedPullRequest.commits) &&
        Objects.equals(this.additions, webhookPullRequestOpenedPullRequest.additions) &&
        Objects.equals(this.deletions, webhookPullRequestOpenedPullRequest.deletions) &&
        Objects.equals(this.changedFiles, webhookPullRequestOpenedPullRequest.changedFiles) &&
        Objects.equals(this.allowAutoMerge, webhookPullRequestOpenedPullRequest.allowAutoMerge) &&
        Objects.equals(this.allowUpdateBranch, webhookPullRequestOpenedPullRequest.allowUpdateBranch) &&
        Objects.equals(this.deleteBranchOnMerge, webhookPullRequestOpenedPullRequest.deleteBranchOnMerge) &&
        Objects.equals(this.mergeCommitMessage, webhookPullRequestOpenedPullRequest.mergeCommitMessage) &&
        Objects.equals(this.mergeCommitTitle, webhookPullRequestOpenedPullRequest.mergeCommitTitle) &&
        Objects.equals(this.squashMergeCommitMessage, webhookPullRequestOpenedPullRequest.squashMergeCommitMessage) &&
        Objects.equals(this.squashMergeCommitTitle, webhookPullRequestOpenedPullRequest.squashMergeCommitTitle) &&
        Objects.equals(this.useSquashPrTitleAsDefault, webhookPullRequestOpenedPullRequest.useSquashPrTitleAsDefault);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, id, nodeId, htmlUrl, diffUrl, patchUrl, issueUrl, commitsUrl, reviewCommentsUrl, reviewCommentUrl, commentsUrl, statusesUrl, number, state, locked, title, user, body, labels, milestone, activeLockReason, createdAt, updatedAt, closedAt, mergedAt, mergeCommitSha, assignee, assignees, requestedReviewers, requestedTeams, head, base, links, authorAssociation, autoMerge, draft, merged, mergeable, rebaseable, mergeableState, mergedBy, comments, reviewComments, maintainerCanModify, commits, additions, deletions, changedFiles, allowAutoMerge, allowUpdateBranch, deleteBranchOnMerge, mergeCommitMessage, mergeCommitTitle, squashMergeCommitMessage, squashMergeCommitTitle, useSquashPrTitleAsDefault);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookPullRequestOpenedPullRequest {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    reviewCommentsUrl: ").append(toIndentedString(reviewCommentsUrl)).append("\n");
    sb.append("    reviewCommentUrl: ").append(toIndentedString(reviewCommentUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    activeLockReason: ").append(toIndentedString(activeLockReason)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    mergedAt: ").append(toIndentedString(mergedAt)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    requestedReviewers: ").append(toIndentedString(requestedReviewers)).append("\n");
    sb.append("    requestedTeams: ").append(toIndentedString(requestedTeams)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    autoMerge: ").append(toIndentedString(autoMerge)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    mergeable: ").append(toIndentedString(mergeable)).append("\n");
    sb.append("    rebaseable: ").append(toIndentedString(rebaseable)).append("\n");
    sb.append("    mergeableState: ").append(toIndentedString(mergeableState)).append("\n");
    sb.append("    mergedBy: ").append(toIndentedString(mergedBy)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    reviewComments: ").append(toIndentedString(reviewComments)).append("\n");
    sb.append("    maintainerCanModify: ").append(toIndentedString(maintainerCanModify)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("    deletions: ").append(toIndentedString(deletions)).append("\n");
    sb.append("    changedFiles: ").append(toIndentedString(changedFiles)).append("\n");
    sb.append("    allowAutoMerge: ").append(toIndentedString(allowAutoMerge)).append("\n");
    sb.append("    allowUpdateBranch: ").append(toIndentedString(allowUpdateBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    mergeCommitMessage: ").append(toIndentedString(mergeCommitMessage)).append("\n");
    sb.append("    mergeCommitTitle: ").append(toIndentedString(mergeCommitTitle)).append("\n");
    sb.append("    squashMergeCommitMessage: ").append(toIndentedString(squashMergeCommitMessage)).append("\n");
    sb.append("    squashMergeCommitTitle: ").append(toIndentedString(squashMergeCommitTitle)).append("\n");
    sb.append("    useSquashPrTitleAsDefault: ").append(toIndentedString(useSquashPrTitleAsDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("html_url");
    openapiFields.add("diff_url");
    openapiFields.add("patch_url");
    openapiFields.add("issue_url");
    openapiFields.add("commits_url");
    openapiFields.add("review_comments_url");
    openapiFields.add("review_comment_url");
    openapiFields.add("comments_url");
    openapiFields.add("statuses_url");
    openapiFields.add("number");
    openapiFields.add("state");
    openapiFields.add("locked");
    openapiFields.add("title");
    openapiFields.add("user");
    openapiFields.add("body");
    openapiFields.add("labels");
    openapiFields.add("milestone");
    openapiFields.add("active_lock_reason");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("closed_at");
    openapiFields.add("merged_at");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("requested_reviewers");
    openapiFields.add("requested_teams");
    openapiFields.add("head");
    openapiFields.add("base");
    openapiFields.add("_links");
    openapiFields.add("author_association");
    openapiFields.add("auto_merge");
    openapiFields.add("draft");
    openapiFields.add("merged");
    openapiFields.add("mergeable");
    openapiFields.add("rebaseable");
    openapiFields.add("mergeable_state");
    openapiFields.add("merged_by");
    openapiFields.add("comments");
    openapiFields.add("review_comments");
    openapiFields.add("maintainer_can_modify");
    openapiFields.add("commits");
    openapiFields.add("additions");
    openapiFields.add("deletions");
    openapiFields.add("changed_files");
    openapiFields.add("allow_auto_merge");
    openapiFields.add("allow_update_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("merge_commit_message");
    openapiFields.add("merge_commit_title");
    openapiFields.add("squash_merge_commit_message");
    openapiFields.add("squash_merge_commit_title");
    openapiFields.add("use_squash_pr_title_as_default");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("diff_url");
    openapiRequiredFields.add("patch_url");
    openapiRequiredFields.add("issue_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("review_comments_url");
    openapiRequiredFields.add("review_comment_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("milestone");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("merged_at");
    openapiRequiredFields.add("merge_commit_sha");
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("head");
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("author_association");
    openapiRequiredFields.add("auto_merge");
    openapiRequiredFields.add("merged");
    openapiRequiredFields.add("mergeable");
    openapiRequiredFields.add("mergeable_state");
    openapiRequiredFields.add("merged_by");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("review_comments");
    openapiRequiredFields.add("maintainer_can_modify");
    openapiRequiredFields.add("commits");
    openapiRequiredFields.add("additions");
    openapiRequiredFields.add("deletions");
    openapiRequiredFields.add("changed_files");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookPullRequestOpenedPullRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookPullRequestOpenedPullRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookPullRequestOpenedPullRequest is not found in the empty JSON string", WebhookPullRequestOpenedPullRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookPullRequestOpenedPullRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookPullRequestOpenedPullRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookPullRequestOpenedPullRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      if (!jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      if (!jsonObj.get("issue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("review_comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comments_url").toString()));
      }
      if (!jsonObj.get("review_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comment_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the required field `user`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        PullRequestLabelsInner.validateJsonObject(jsonArraylabels.get(i).getAsJsonObject());
      };
      // validate the required field `milestone`
      NullableMilestone.validateJsonObject(jsonObj.getAsJsonObject("milestone"));
      if ((jsonObj.get("active_lock_reason") != null && !jsonObj.get("active_lock_reason").isJsonNull()) && !jsonObj.get("active_lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_lock_reason").toString()));
      }
      if (!jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      // validate the required field `assignee`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("assignee"));
      if (jsonObj.get("assignees") != null && !jsonObj.get("assignees").isJsonNull()) {
        JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
        if (jsonArrayassignees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
          }

          // validate the optional field `assignees` (array)
          for (int i = 0; i < jsonArrayassignees.size(); i++) {
            SimpleUser.validateJsonObject(jsonArrayassignees.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("requested_reviewers") != null && !jsonObj.get("requested_reviewers").isJsonNull()) {
        JsonArray jsonArrayrequestedReviewers = jsonObj.getAsJsonArray("requested_reviewers");
        if (jsonArrayrequestedReviewers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_reviewers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("requested_reviewers").toString()));
          }

          // validate the optional field `requested_reviewers` (array)
          for (int i = 0; i < jsonArrayrequestedReviewers.size(); i++) {
            SimpleUser.validateJsonObject(jsonArrayrequestedReviewers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("requested_teams") != null && !jsonObj.get("requested_teams").isJsonNull()) {
        JsonArray jsonArrayrequestedTeams = jsonObj.getAsJsonArray("requested_teams");
        if (jsonArrayrequestedTeams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_teams` to be an array in the JSON string but got `%s`", jsonObj.get("requested_teams").toString()));
          }

          // validate the optional field `requested_teams` (array)
          for (int i = 0; i < jsonArrayrequestedTeams.size(); i++) {
            TeamSimple.validateJsonObject(jsonArrayrequestedTeams.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `head`
      PullRequestHead.validateJsonObject(jsonObj.getAsJsonObject("head"));
      // validate the required field `base`
      PullRequestBase.validateJsonObject(jsonObj.getAsJsonObject("base"));
      // validate the required field `_links`
      PullRequestSimpleLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      // validate the required field `auto_merge`
      AutoMerge.validateJsonObject(jsonObj.getAsJsonObject("auto_merge"));
      if (!jsonObj.get("mergeable_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeable_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeable_state").toString()));
      }
      // validate the required field `merged_by`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("merged_by"));
      if ((jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) && !jsonObj.get("merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_message").toString()));
      }
      if ((jsonObj.get("merge_commit_title") != null && !jsonObj.get("merge_commit_title").isJsonNull()) && !jsonObj.get("merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_title").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_message") != null && !jsonObj.get("squash_merge_commit_message").isJsonNull()) && !jsonObj.get("squash_merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_message").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_title") != null && !jsonObj.get("squash_merge_commit_title").isJsonNull()) && !jsonObj.get("squash_merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookPullRequestOpenedPullRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookPullRequestOpenedPullRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookPullRequestOpenedPullRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookPullRequestOpenedPullRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookPullRequestOpenedPullRequest>() {
           @Override
           public void write(JsonWriter out, WebhookPullRequestOpenedPullRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookPullRequestOpenedPullRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookPullRequestOpenedPullRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookPullRequestOpenedPullRequest
  * @throws IOException if the JSON string is invalid with respect to WebhookPullRequestOpenedPullRequest
  */
  public static WebhookPullRequestOpenedPullRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookPullRequestOpenedPullRequest.class);
  }

 /**
  * Convert an instance of WebhookPullRequestOpenedPullRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

