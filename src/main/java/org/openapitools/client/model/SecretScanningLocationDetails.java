/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import org.openapitools.client.model.SecretScanningLocationCommit;
import org.openapitools.client.model.SecretScanningLocationIssueBody;
import org.openapitools.client.model.SecretScanningLocationIssueComment;
import org.openapitools.client.model.SecretScanningLocationIssueTitle;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class SecretScanningLocationDetails extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SecretScanningLocationDetails.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SecretScanningLocationDetails.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SecretScanningLocationDetails' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SecretScanningLocationCommit> adapterSecretScanningLocationCommit = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningLocationCommit.class));
            final TypeAdapter<SecretScanningLocationIssueBody> adapterSecretScanningLocationIssueBody = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningLocationIssueBody.class));
            final TypeAdapter<SecretScanningLocationIssueComment> adapterSecretScanningLocationIssueComment = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningLocationIssueComment.class));
            final TypeAdapter<SecretScanningLocationIssueTitle> adapterSecretScanningLocationIssueTitle = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningLocationIssueTitle.class));

            return (TypeAdapter<T>) new TypeAdapter<SecretScanningLocationDetails>() {
                @Override
                public void write(JsonWriter out, SecretScanningLocationDetails value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SecretScanningLocationCommit`
                    if (value.getActualInstance() instanceof SecretScanningLocationCommit) {
                        JsonObject obj = adapterSecretScanningLocationCommit.toJsonTree((SecretScanningLocationCommit)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SecretScanningLocationIssueBody`
                    if (value.getActualInstance() instanceof SecretScanningLocationIssueBody) {
                        JsonObject obj = adapterSecretScanningLocationIssueBody.toJsonTree((SecretScanningLocationIssueBody)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SecretScanningLocationIssueComment`
                    if (value.getActualInstance() instanceof SecretScanningLocationIssueComment) {
                        JsonObject obj = adapterSecretScanningLocationIssueComment.toJsonTree((SecretScanningLocationIssueComment)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SecretScanningLocationIssueTitle`
                    if (value.getActualInstance() instanceof SecretScanningLocationIssueTitle) {
                        JsonObject obj = adapterSecretScanningLocationIssueTitle.toJsonTree((SecretScanningLocationIssueTitle)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle");
                }

                @Override
                public SecretScanningLocationDetails read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SecretScanningLocationCommit
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecretScanningLocationCommit.validateJsonObject(jsonObject);
                        actualAdapter = adapterSecretScanningLocationCommit;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecretScanningLocationCommit'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecretScanningLocationCommit failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecretScanningLocationCommit'", e);
                    }

                    // deserialize SecretScanningLocationIssueBody
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecretScanningLocationIssueBody.validateJsonObject(jsonObject);
                        actualAdapter = adapterSecretScanningLocationIssueBody;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecretScanningLocationIssueBody'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueBody failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecretScanningLocationIssueBody'", e);
                    }

                    // deserialize SecretScanningLocationIssueComment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecretScanningLocationIssueComment.validateJsonObject(jsonObject);
                        actualAdapter = adapterSecretScanningLocationIssueComment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecretScanningLocationIssueComment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueComment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecretScanningLocationIssueComment'", e);
                    }

                    // deserialize SecretScanningLocationIssueTitle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecretScanningLocationIssueTitle.validateJsonObject(jsonObject);
                        actualAdapter = adapterSecretScanningLocationIssueTitle;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecretScanningLocationIssueTitle'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueTitle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecretScanningLocationIssueTitle'", e);
                    }

                    if (match == 1) {
                        SecretScanningLocationDetails ret = new SecretScanningLocationDetails();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SecretScanningLocationDetails: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SecretScanningLocationDetails() {
        super("oneOf", Boolean.FALSE);
    }

    public SecretScanningLocationDetails(SecretScanningLocationCommit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SecretScanningLocationDetails(SecretScanningLocationIssueBody o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SecretScanningLocationDetails(SecretScanningLocationIssueComment o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SecretScanningLocationDetails(SecretScanningLocationIssueTitle o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SecretScanningLocationCommit", new GenericType<SecretScanningLocationCommit>() {
        });
        schemas.put("SecretScanningLocationIssueBody", new GenericType<SecretScanningLocationIssueBody>() {
        });
        schemas.put("SecretScanningLocationIssueComment", new GenericType<SecretScanningLocationIssueComment>() {
        });
        schemas.put("SecretScanningLocationIssueTitle", new GenericType<SecretScanningLocationIssueTitle>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SecretScanningLocationDetails.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SecretScanningLocationCommit) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretScanningLocationIssueBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretScanningLocationIssueComment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretScanningLocationIssueTitle) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle");
    }

    /**
     * Get the actual instance, which can be the following:
     * SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle
     *
     * @return The actual instance (SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecretScanningLocationCommit`. If the actual instance is not `SecretScanningLocationCommit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretScanningLocationCommit`
     * @throws ClassCastException if the instance is not `SecretScanningLocationCommit`
     */
    public SecretScanningLocationCommit getSecretScanningLocationCommit() throws ClassCastException {
        return (SecretScanningLocationCommit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecretScanningLocationIssueBody`. If the actual instance is not `SecretScanningLocationIssueBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretScanningLocationIssueBody`
     * @throws ClassCastException if the instance is not `SecretScanningLocationIssueBody`
     */
    public SecretScanningLocationIssueBody getSecretScanningLocationIssueBody() throws ClassCastException {
        return (SecretScanningLocationIssueBody)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecretScanningLocationIssueComment`. If the actual instance is not `SecretScanningLocationIssueComment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretScanningLocationIssueComment`
     * @throws ClassCastException if the instance is not `SecretScanningLocationIssueComment`
     */
    public SecretScanningLocationIssueComment getSecretScanningLocationIssueComment() throws ClassCastException {
        return (SecretScanningLocationIssueComment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecretScanningLocationIssueTitle`. If the actual instance is not `SecretScanningLocationIssueTitle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretScanningLocationIssueTitle`
     * @throws ClassCastException if the instance is not `SecretScanningLocationIssueTitle`
     */
    public SecretScanningLocationIssueTitle getSecretScanningLocationIssueTitle() throws ClassCastException {
        return (SecretScanningLocationIssueTitle)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SecretScanningLocationDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with SecretScanningLocationCommit
    try {
      SecretScanningLocationCommit.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretScanningLocationCommit failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecretScanningLocationIssueBody
    try {
      SecretScanningLocationIssueBody.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueBody failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecretScanningLocationIssueComment
    try {
      SecretScanningLocationIssueComment.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueComment failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecretScanningLocationIssueTitle
    try {
      SecretScanningLocationIssueTitle.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretScanningLocationIssueTitle failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for SecretScanningLocationDetails with oneOf schemas: SecretScanningLocationCommit, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SecretScanningLocationDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SecretScanningLocationDetails
  * @throws IOException if the JSON string is invalid with respect to SecretScanningLocationDetails
  */
  public static SecretScanningLocationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretScanningLocationDetails.class);
  }

 /**
  * Convert an instance of SecretScanningLocationDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

