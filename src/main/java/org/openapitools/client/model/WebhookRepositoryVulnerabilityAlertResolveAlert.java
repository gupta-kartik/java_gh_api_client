/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.User;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookRepositoryVulnerabilityAlertResolveAlert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookRepositoryVulnerabilityAlertResolveAlert {
  public static final String SERIALIZED_NAME_AFFECTED_PACKAGE_NAME = "affected_package_name";
  @SerializedName(SERIALIZED_NAME_AFFECTED_PACKAGE_NAME)
  private String affectedPackageName;

  public static final String SERIALIZED_NAME_AFFECTED_RANGE = "affected_range";
  @SerializedName(SERIALIZED_NAME_AFFECTED_RANGE)
  private String affectedRange;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DISMISS_REASON = "dismiss_reason";
  @SerializedName(SERIALIZED_NAME_DISMISS_REASON)
  private String dismissReason;

  public static final String SERIALIZED_NAME_DISMISSED_AT = "dismissed_at";
  @SerializedName(SERIALIZED_NAME_DISMISSED_AT)
  private String dismissedAt;

  public static final String SERIALIZED_NAME_DISMISSER = "dismisser";
  @SerializedName(SERIALIZED_NAME_DISMISSER)
  private User dismisser;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_EXTERNAL_REFERENCE = "external_reference";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REFERENCE)
  private String externalReference;

  public static final String SERIALIZED_NAME_FIX_REASON = "fix_reason";
  @SerializedName(SERIALIZED_NAME_FIX_REASON)
  private String fixReason;

  public static final String SERIALIZED_NAME_FIXED_AT = "fixed_at";
  @SerializedName(SERIALIZED_NAME_FIXED_AT)
  private OffsetDateTime fixedAt;

  public static final String SERIALIZED_NAME_FIXED_IN = "fixed_in";
  @SerializedName(SERIALIZED_NAME_FIXED_IN)
  private String fixedIn;

  public static final String SERIALIZED_NAME_GHSA_ID = "ghsa_id";
  @SerializedName(SERIALIZED_NAME_GHSA_ID)
  private String ghsaId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    FIXED("fixed"),
    
    OPEN("open");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public WebhookRepositoryVulnerabilityAlertResolveAlert() {
  }

  public WebhookRepositoryVulnerabilityAlertResolveAlert affectedPackageName(String affectedPackageName) {
    
    this.affectedPackageName = affectedPackageName;
    return this;
  }

   /**
   * Get affectedPackageName
   * @return affectedPackageName
  **/
  @javax.annotation.Nonnull

  public String getAffectedPackageName() {
    return affectedPackageName;
  }


  public void setAffectedPackageName(String affectedPackageName) {
    this.affectedPackageName = affectedPackageName;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert affectedRange(String affectedRange) {
    
    this.affectedRange = affectedRange;
    return this;
  }

   /**
   * Get affectedRange
   * @return affectedRange
  **/
  @javax.annotation.Nonnull

  public String getAffectedRange() {
    return affectedRange;
  }


  public void setAffectedRange(String affectedRange) {
    this.affectedRange = affectedRange;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert dismissReason(String dismissReason) {
    
    this.dismissReason = dismissReason;
    return this;
  }

   /**
   * Get dismissReason
   * @return dismissReason
  **/
  @javax.annotation.Nullable

  public String getDismissReason() {
    return dismissReason;
  }


  public void setDismissReason(String dismissReason) {
    this.dismissReason = dismissReason;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert dismissedAt(String dismissedAt) {
    
    this.dismissedAt = dismissedAt;
    return this;
  }

   /**
   * Get dismissedAt
   * @return dismissedAt
  **/
  @javax.annotation.Nullable

  public String getDismissedAt() {
    return dismissedAt;
  }


  public void setDismissedAt(String dismissedAt) {
    this.dismissedAt = dismissedAt;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert dismisser(User dismisser) {
    
    this.dismisser = dismisser;
    return this;
  }

   /**
   * Get dismisser
   * @return dismisser
  **/
  @javax.annotation.Nullable

  public User getDismisser() {
    return dismisser;
  }


  public void setDismisser(User dismisser) {
    this.dismisser = dismisser;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert externalIdentifier(String externalIdentifier) {
    
    this.externalIdentifier = externalIdentifier;
    return this;
  }

   /**
   * Get externalIdentifier
   * @return externalIdentifier
  **/
  @javax.annotation.Nonnull

  public String getExternalIdentifier() {
    return externalIdentifier;
  }


  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert externalReference(String externalReference) {
    
    this.externalReference = externalReference;
    return this;
  }

   /**
   * Get externalReference
   * @return externalReference
  **/
  @javax.annotation.Nullable

  public String getExternalReference() {
    return externalReference;
  }


  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert fixReason(String fixReason) {
    
    this.fixReason = fixReason;
    return this;
  }

   /**
   * Get fixReason
   * @return fixReason
  **/
  @javax.annotation.Nullable

  public String getFixReason() {
    return fixReason;
  }


  public void setFixReason(String fixReason) {
    this.fixReason = fixReason;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert fixedAt(OffsetDateTime fixedAt) {
    
    this.fixedAt = fixedAt;
    return this;
  }

   /**
   * Get fixedAt
   * @return fixedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getFixedAt() {
    return fixedAt;
  }


  public void setFixedAt(OffsetDateTime fixedAt) {
    this.fixedAt = fixedAt;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert fixedIn(String fixedIn) {
    
    this.fixedIn = fixedIn;
    return this;
  }

   /**
   * Get fixedIn
   * @return fixedIn
  **/
  @javax.annotation.Nullable

  public String getFixedIn() {
    return fixedIn;
  }


  public void setFixedIn(String fixedIn) {
    this.fixedIn = fixedIn;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert ghsaId(String ghsaId) {
    
    this.ghsaId = ghsaId;
    return this;
  }

   /**
   * Get ghsaId
   * @return ghsaId
  **/
  @javax.annotation.Nonnull

  public String getGhsaId() {
    return ghsaId;
  }


  public void setGhsaId(String ghsaId) {
    this.ghsaId = ghsaId;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert severity(String severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @javax.annotation.Nonnull

  public String getSeverity() {
    return severity;
  }


  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public WebhookRepositoryVulnerabilityAlertResolveAlert state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookRepositoryVulnerabilityAlertResolveAlert webhookRepositoryVulnerabilityAlertResolveAlert = (WebhookRepositoryVulnerabilityAlertResolveAlert) o;
    return Objects.equals(this.affectedPackageName, webhookRepositoryVulnerabilityAlertResolveAlert.affectedPackageName) &&
        Objects.equals(this.affectedRange, webhookRepositoryVulnerabilityAlertResolveAlert.affectedRange) &&
        Objects.equals(this.createdAt, webhookRepositoryVulnerabilityAlertResolveAlert.createdAt) &&
        Objects.equals(this.dismissReason, webhookRepositoryVulnerabilityAlertResolveAlert.dismissReason) &&
        Objects.equals(this.dismissedAt, webhookRepositoryVulnerabilityAlertResolveAlert.dismissedAt) &&
        Objects.equals(this.dismisser, webhookRepositoryVulnerabilityAlertResolveAlert.dismisser) &&
        Objects.equals(this.externalIdentifier, webhookRepositoryVulnerabilityAlertResolveAlert.externalIdentifier) &&
        Objects.equals(this.externalReference, webhookRepositoryVulnerabilityAlertResolveAlert.externalReference) &&
        Objects.equals(this.fixReason, webhookRepositoryVulnerabilityAlertResolveAlert.fixReason) &&
        Objects.equals(this.fixedAt, webhookRepositoryVulnerabilityAlertResolveAlert.fixedAt) &&
        Objects.equals(this.fixedIn, webhookRepositoryVulnerabilityAlertResolveAlert.fixedIn) &&
        Objects.equals(this.ghsaId, webhookRepositoryVulnerabilityAlertResolveAlert.ghsaId) &&
        Objects.equals(this.id, webhookRepositoryVulnerabilityAlertResolveAlert.id) &&
        Objects.equals(this.nodeId, webhookRepositoryVulnerabilityAlertResolveAlert.nodeId) &&
        Objects.equals(this.number, webhookRepositoryVulnerabilityAlertResolveAlert.number) &&
        Objects.equals(this.severity, webhookRepositoryVulnerabilityAlertResolveAlert.severity) &&
        Objects.equals(this.state, webhookRepositoryVulnerabilityAlertResolveAlert.state);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedPackageName, affectedRange, createdAt, dismissReason, dismissedAt, dismisser, externalIdentifier, externalReference, fixReason, fixedAt, fixedIn, ghsaId, id, nodeId, number, severity, state);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookRepositoryVulnerabilityAlertResolveAlert {\n");
    sb.append("    affectedPackageName: ").append(toIndentedString(affectedPackageName)).append("\n");
    sb.append("    affectedRange: ").append(toIndentedString(affectedRange)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dismissReason: ").append(toIndentedString(dismissReason)).append("\n");
    sb.append("    dismissedAt: ").append(toIndentedString(dismissedAt)).append("\n");
    sb.append("    dismisser: ").append(toIndentedString(dismisser)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    fixReason: ").append(toIndentedString(fixReason)).append("\n");
    sb.append("    fixedAt: ").append(toIndentedString(fixedAt)).append("\n");
    sb.append("    fixedIn: ").append(toIndentedString(fixedIn)).append("\n");
    sb.append("    ghsaId: ").append(toIndentedString(ghsaId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affected_package_name");
    openapiFields.add("affected_range");
    openapiFields.add("created_at");
    openapiFields.add("dismiss_reason");
    openapiFields.add("dismissed_at");
    openapiFields.add("dismisser");
    openapiFields.add("external_identifier");
    openapiFields.add("external_reference");
    openapiFields.add("fix_reason");
    openapiFields.add("fixed_at");
    openapiFields.add("fixed_in");
    openapiFields.add("ghsa_id");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("severity");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("affected_package_name");
    openapiRequiredFields.add("affected_range");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("external_identifier");
    openapiRequiredFields.add("external_reference");
    openapiRequiredFields.add("ghsa_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("state");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookRepositoryVulnerabilityAlertResolveAlert
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookRepositoryVulnerabilityAlertResolveAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookRepositoryVulnerabilityAlertResolveAlert is not found in the empty JSON string", WebhookRepositoryVulnerabilityAlertResolveAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookRepositoryVulnerabilityAlertResolveAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookRepositoryVulnerabilityAlertResolveAlert` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookRepositoryVulnerabilityAlertResolveAlert.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("affected_package_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affected_package_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affected_package_name").toString()));
      }
      if (!jsonObj.get("affected_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affected_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affected_range").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("dismiss_reason") != null && !jsonObj.get("dismiss_reason").isJsonNull()) && !jsonObj.get("dismiss_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismiss_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dismiss_reason").toString()));
      }
      if ((jsonObj.get("dismissed_at") != null && !jsonObj.get("dismissed_at").isJsonNull()) && !jsonObj.get("dismissed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dismissed_at").toString()));
      }
      // validate the optional field `dismisser`
      if (jsonObj.get("dismisser") != null && !jsonObj.get("dismisser").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("dismisser"));
      }
      if (!jsonObj.get("external_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_identifier").toString()));
      }
      if (!jsonObj.get("external_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_reference").toString()));
      }
      if ((jsonObj.get("fix_reason") != null && !jsonObj.get("fix_reason").isJsonNull()) && !jsonObj.get("fix_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fix_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fix_reason").toString()));
      }
      if ((jsonObj.get("fixed_in") != null && !jsonObj.get("fixed_in").isJsonNull()) && !jsonObj.get("fixed_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed_in").toString()));
      }
      if (!jsonObj.get("ghsa_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ghsa_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ghsa_id").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookRepositoryVulnerabilityAlertResolveAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookRepositoryVulnerabilityAlertResolveAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookRepositoryVulnerabilityAlertResolveAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookRepositoryVulnerabilityAlertResolveAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookRepositoryVulnerabilityAlertResolveAlert>() {
           @Override
           public void write(JsonWriter out, WebhookRepositoryVulnerabilityAlertResolveAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookRepositoryVulnerabilityAlertResolveAlert read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookRepositoryVulnerabilityAlertResolveAlert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookRepositoryVulnerabilityAlertResolveAlert
  * @throws IOException if the JSON string is invalid with respect to WebhookRepositoryVulnerabilityAlertResolveAlert
  */
  public static WebhookRepositoryVulnerabilityAlertResolveAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookRepositoryVulnerabilityAlertResolveAlert.class);
  }

 /**
  * Convert an instance of WebhookRepositoryVulnerabilityAlertResolveAlert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

