/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of the machine powering a codespace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class NullableCodespaceMachine {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_STORAGE_IN_BYTES = "storage_in_bytes";
  @SerializedName(SERIALIZED_NAME_STORAGE_IN_BYTES)
  private Integer storageInBytes;

  public static final String SERIALIZED_NAME_MEMORY_IN_BYTES = "memory_in_bytes";
  @SerializedName(SERIALIZED_NAME_MEMORY_IN_BYTES)
  private Integer memoryInBytes;

  public static final String SERIALIZED_NAME_CPUS = "cpus";
  @SerializedName(SERIALIZED_NAME_CPUS)
  private Integer cpus;

  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \&quot;null\&quot; if prebuilds are not supported or prebuild availability could not be determined. Value will be \&quot;none\&quot; if no prebuild is available. Latest values \&quot;ready\&quot; and \&quot;in_progress\&quot; indicate the prebuild availability status.
   */
  @JsonAdapter(PrebuildAvailabilityEnum.Adapter.class)
  public enum PrebuildAvailabilityEnum {
    NONE("none"),
    
    READY("ready"),
    
    IN_PROGRESS("in_progress");

    private String value;

    PrebuildAvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrebuildAvailabilityEnum fromValue(String value) {
      for (PrebuildAvailabilityEnum b : PrebuildAvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrebuildAvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrebuildAvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrebuildAvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrebuildAvailabilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PREBUILD_AVAILABILITY = "prebuild_availability";
  @SerializedName(SERIALIZED_NAME_PREBUILD_AVAILABILITY)
  private PrebuildAvailabilityEnum prebuildAvailability;

  public NullableCodespaceMachine() {
  }

  public NullableCodespaceMachine name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the machine.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public NullableCodespaceMachine displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the machine includes cores, memory, and storage.
   * @return displayName
  **/
  @javax.annotation.Nonnull

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public NullableCodespaceMachine operatingSystem(String operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * The operating system of the machine.
   * @return operatingSystem
  **/
  @javax.annotation.Nonnull

  public String getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public NullableCodespaceMachine storageInBytes(Integer storageInBytes) {
    
    this.storageInBytes = storageInBytes;
    return this;
  }

   /**
   * How much storage is available to the codespace.
   * @return storageInBytes
  **/
  @javax.annotation.Nonnull

  public Integer getStorageInBytes() {
    return storageInBytes;
  }


  public void setStorageInBytes(Integer storageInBytes) {
    this.storageInBytes = storageInBytes;
  }


  public NullableCodespaceMachine memoryInBytes(Integer memoryInBytes) {
    
    this.memoryInBytes = memoryInBytes;
    return this;
  }

   /**
   * How much memory is available to the codespace.
   * @return memoryInBytes
  **/
  @javax.annotation.Nonnull

  public Integer getMemoryInBytes() {
    return memoryInBytes;
  }


  public void setMemoryInBytes(Integer memoryInBytes) {
    this.memoryInBytes = memoryInBytes;
  }


  public NullableCodespaceMachine cpus(Integer cpus) {
    
    this.cpus = cpus;
    return this;
  }

   /**
   * How many cores are available to the codespace.
   * @return cpus
  **/
  @javax.annotation.Nonnull

  public Integer getCpus() {
    return cpus;
  }


  public void setCpus(Integer cpus) {
    this.cpus = cpus;
  }


  public NullableCodespaceMachine prebuildAvailability(PrebuildAvailabilityEnum prebuildAvailability) {
    
    this.prebuildAvailability = prebuildAvailability;
    return this;
  }

   /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \&quot;null\&quot; if prebuilds are not supported or prebuild availability could not be determined. Value will be \&quot;none\&quot; if no prebuild is available. Latest values \&quot;ready\&quot; and \&quot;in_progress\&quot; indicate the prebuild availability status.
   * @return prebuildAvailability
  **/
  @javax.annotation.Nullable

  public PrebuildAvailabilityEnum getPrebuildAvailability() {
    return prebuildAvailability;
  }


  public void setPrebuildAvailability(PrebuildAvailabilityEnum prebuildAvailability) {
    this.prebuildAvailability = prebuildAvailability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NullableCodespaceMachine nullableCodespaceMachine = (NullableCodespaceMachine) o;
    return Objects.equals(this.name, nullableCodespaceMachine.name) &&
        Objects.equals(this.displayName, nullableCodespaceMachine.displayName) &&
        Objects.equals(this.operatingSystem, nullableCodespaceMachine.operatingSystem) &&
        Objects.equals(this.storageInBytes, nullableCodespaceMachine.storageInBytes) &&
        Objects.equals(this.memoryInBytes, nullableCodespaceMachine.memoryInBytes) &&
        Objects.equals(this.cpus, nullableCodespaceMachine.cpus) &&
        Objects.equals(this.prebuildAvailability, nullableCodespaceMachine.prebuildAvailability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, operatingSystem, storageInBytes, memoryInBytes, cpus, prebuildAvailability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NullableCodespaceMachine {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    storageInBytes: ").append(toIndentedString(storageInBytes)).append("\n");
    sb.append("    memoryInBytes: ").append(toIndentedString(memoryInBytes)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    prebuildAvailability: ").append(toIndentedString(prebuildAvailability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("display_name");
    openapiFields.add("operating_system");
    openapiFields.add("storage_in_bytes");
    openapiFields.add("memory_in_bytes");
    openapiFields.add("cpus");
    openapiFields.add("prebuild_availability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("operating_system");
    openapiRequiredFields.add("storage_in_bytes");
    openapiRequiredFields.add("memory_in_bytes");
    openapiRequiredFields.add("cpus");
    openapiRequiredFields.add("prebuild_availability");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NullableCodespaceMachine
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NullableCodespaceMachine.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NullableCodespaceMachine is not found in the empty JSON string", NullableCodespaceMachine.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NullableCodespaceMachine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NullableCodespaceMachine` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NullableCodespaceMachine.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if (!jsonObj.get("prebuild_availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prebuild_availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prebuild_availability").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NullableCodespaceMachine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NullableCodespaceMachine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NullableCodespaceMachine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NullableCodespaceMachine.class));

       return (TypeAdapter<T>) new TypeAdapter<NullableCodespaceMachine>() {
           @Override
           public void write(JsonWriter out, NullableCodespaceMachine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NullableCodespaceMachine read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NullableCodespaceMachine given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NullableCodespaceMachine
  * @throws IOException if the JSON string is invalid with respect to NullableCodespaceMachine
  */
  public static NullableCodespaceMachine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NullableCodespaceMachine.class);
  }

 /**
  * Convert an instance of NullableCodespaceMachine to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

