/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Organization Invitation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class OrganizationInvitation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_FAILED_AT = "failed_at";
  @SerializedName(SERIALIZED_NAME_FAILED_AT)
  private String failedAt;

  public static final String SERIALIZED_NAME_FAILED_REASON = "failed_reason";
  @SerializedName(SERIALIZED_NAME_FAILED_REASON)
  private String failedReason;

  public static final String SERIALIZED_NAME_INVITER = "inviter";
  @SerializedName(SERIALIZED_NAME_INVITER)
  private SimpleUser inviter;

  public static final String SERIALIZED_NAME_TEAM_COUNT = "team_count";
  @SerializedName(SERIALIZED_NAME_TEAM_COUNT)
  private Integer teamCount;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_INVITATION_TEAMS_URL = "invitation_teams_url";
  @SerializedName(SERIALIZED_NAME_INVITATION_TEAMS_URL)
  private String invitationTeamsUrl;

  public static final String SERIALIZED_NAME_INVITATION_SOURCE = "invitation_source";
  @SerializedName(SERIALIZED_NAME_INVITATION_SOURCE)
  private String invitationSource;

  public OrganizationInvitation() {
  }

  public OrganizationInvitation id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public OrganizationInvitation login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nullable

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public OrganizationInvitation email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public OrganizationInvitation role(String role) {
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nonnull

  public String getRole() {
    return role;
  }


  public void setRole(String role) {
    this.role = role;
  }


  public OrganizationInvitation createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public OrganizationInvitation failedAt(String failedAt) {
    
    this.failedAt = failedAt;
    return this;
  }

   /**
   * Get failedAt
   * @return failedAt
  **/
  @javax.annotation.Nullable

  public String getFailedAt() {
    return failedAt;
  }


  public void setFailedAt(String failedAt) {
    this.failedAt = failedAt;
  }


  public OrganizationInvitation failedReason(String failedReason) {
    
    this.failedReason = failedReason;
    return this;
  }

   /**
   * Get failedReason
   * @return failedReason
  **/
  @javax.annotation.Nullable

  public String getFailedReason() {
    return failedReason;
  }


  public void setFailedReason(String failedReason) {
    this.failedReason = failedReason;
  }


  public OrganizationInvitation inviter(SimpleUser inviter) {
    
    this.inviter = inviter;
    return this;
  }

   /**
   * Get inviter
   * @return inviter
  **/
  @javax.annotation.Nonnull

  public SimpleUser getInviter() {
    return inviter;
  }


  public void setInviter(SimpleUser inviter) {
    this.inviter = inviter;
  }


  public OrganizationInvitation teamCount(Integer teamCount) {
    
    this.teamCount = teamCount;
    return this;
  }

   /**
   * Get teamCount
   * @return teamCount
  **/
  @javax.annotation.Nonnull

  public Integer getTeamCount() {
    return teamCount;
  }


  public void setTeamCount(Integer teamCount) {
    this.teamCount = teamCount;
  }


  public OrganizationInvitation nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public OrganizationInvitation invitationTeamsUrl(String invitationTeamsUrl) {
    
    this.invitationTeamsUrl = invitationTeamsUrl;
    return this;
  }

   /**
   * Get invitationTeamsUrl
   * @return invitationTeamsUrl
  **/
  @javax.annotation.Nonnull

  public String getInvitationTeamsUrl() {
    return invitationTeamsUrl;
  }


  public void setInvitationTeamsUrl(String invitationTeamsUrl) {
    this.invitationTeamsUrl = invitationTeamsUrl;
  }


  public OrganizationInvitation invitationSource(String invitationSource) {
    
    this.invitationSource = invitationSource;
    return this;
  }

   /**
   * Get invitationSource
   * @return invitationSource
  **/
  @javax.annotation.Nullable

  public String getInvitationSource() {
    return invitationSource;
  }


  public void setInvitationSource(String invitationSource) {
    this.invitationSource = invitationSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationInvitation organizationInvitation = (OrganizationInvitation) o;
    return Objects.equals(this.id, organizationInvitation.id) &&
        Objects.equals(this.login, organizationInvitation.login) &&
        Objects.equals(this.email, organizationInvitation.email) &&
        Objects.equals(this.role, organizationInvitation.role) &&
        Objects.equals(this.createdAt, organizationInvitation.createdAt) &&
        Objects.equals(this.failedAt, organizationInvitation.failedAt) &&
        Objects.equals(this.failedReason, organizationInvitation.failedReason) &&
        Objects.equals(this.inviter, organizationInvitation.inviter) &&
        Objects.equals(this.teamCount, organizationInvitation.teamCount) &&
        Objects.equals(this.nodeId, organizationInvitation.nodeId) &&
        Objects.equals(this.invitationTeamsUrl, organizationInvitation.invitationTeamsUrl) &&
        Objects.equals(this.invitationSource, organizationInvitation.invitationSource);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, login, email, role, createdAt, failedAt, failedReason, inviter, teamCount, nodeId, invitationTeamsUrl, invitationSource);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationInvitation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    failedReason: ").append(toIndentedString(failedReason)).append("\n");
    sb.append("    inviter: ").append(toIndentedString(inviter)).append("\n");
    sb.append("    teamCount: ").append(toIndentedString(teamCount)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    invitationTeamsUrl: ").append(toIndentedString(invitationTeamsUrl)).append("\n");
    sb.append("    invitationSource: ").append(toIndentedString(invitationSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("login");
    openapiFields.add("email");
    openapiFields.add("role");
    openapiFields.add("created_at");
    openapiFields.add("failed_at");
    openapiFields.add("failed_reason");
    openapiFields.add("inviter");
    openapiFields.add("team_count");
    openapiFields.add("node_id");
    openapiFields.add("invitation_teams_url");
    openapiFields.add("invitation_source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("inviter");
    openapiRequiredFields.add("team_count");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("invitation_teams_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrganizationInvitation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrganizationInvitation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationInvitation is not found in the empty JSON string", OrganizationInvitation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrganizationInvitation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationInvitation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationInvitation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("failed_at") != null && !jsonObj.get("failed_at").isJsonNull()) && !jsonObj.get("failed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failed_at").toString()));
      }
      if ((jsonObj.get("failed_reason") != null && !jsonObj.get("failed_reason").isJsonNull()) && !jsonObj.get("failed_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failed_reason").toString()));
      }
      // validate the required field `inviter`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("inviter"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("invitation_teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitation_teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitation_teams_url").toString()));
      }
      if ((jsonObj.get("invitation_source") != null && !jsonObj.get("invitation_source").isJsonNull()) && !jsonObj.get("invitation_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitation_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitation_source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationInvitation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationInvitation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationInvitation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationInvitation.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationInvitation>() {
           @Override
           public void write(JsonWriter out, OrganizationInvitation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationInvitation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrganizationInvitation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrganizationInvitation
  * @throws IOException if the JSON string is invalid with respect to OrganizationInvitation
  */
  public static OrganizationInvitation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationInvitation.class);
  }

 /**
  * Convert an instance of OrganizationInvitation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

