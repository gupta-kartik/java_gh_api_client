/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.RepositoryAdvisoryAuthor;
import org.openapitools.client.model.RepositoryAdvisoryCredit;
import org.openapitools.client.model.RepositoryAdvisoryCreditsInner;
import org.openapitools.client.model.RepositoryAdvisoryCvss;
import org.openapitools.client.model.RepositoryAdvisoryCwesInner;
import org.openapitools.client.model.RepositoryAdvisoryIdentifiersInner;
import org.openapitools.client.model.RepositoryAdvisoryPublisher;
import org.openapitools.client.model.RepositoryAdvisorySubmission;
import org.openapitools.client.model.RepositoryAdvisoryVulnerability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A repository security advisory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class RepositoryAdvisory {
  public static final String SERIALIZED_NAME_GHSA_ID = "ghsa_id";
  @SerializedName(SERIALIZED_NAME_GHSA_ID)
  private String ghsaId;

  public static final String SERIALIZED_NAME_CVE_ID = "cve_id";
  @SerializedName(SERIALIZED_NAME_CVE_ID)
  private String cveId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The severity of the advisory.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    CRITICAL("critical"),
    
    HIGH("high"),
    
    MEDIUM("medium"),
    
    LOW("low");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private RepositoryAdvisoryAuthor author;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private RepositoryAdvisoryPublisher publisher;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<RepositoryAdvisoryIdentifiersInner> identifiers = new ArrayList<>();

  /**
   * The state of the advisory.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PUBLISHED("published"),
    
    CLOSED("closed"),
    
    WITHDRAWN("withdrawn"),
    
    DRAFT("draft"),
    
    TRIAGE("triage");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_WITHDRAWN_AT = "withdrawn_at";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN_AT)
  private OffsetDateTime withdrawnAt;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private RepositoryAdvisorySubmission submission;

  public static final String SERIALIZED_NAME_VULNERABILITIES = "vulnerabilities";
  @SerializedName(SERIALIZED_NAME_VULNERABILITIES)
  private List<RepositoryAdvisoryVulnerability> vulnerabilities;

  public static final String SERIALIZED_NAME_CVSS = "cvss";
  @SerializedName(SERIALIZED_NAME_CVSS)
  private RepositoryAdvisoryCvss cvss;

  public static final String SERIALIZED_NAME_CWES = "cwes";
  @SerializedName(SERIALIZED_NAME_CWES)
  private List<RepositoryAdvisoryCwesInner> cwes;

  public static final String SERIALIZED_NAME_CWE_IDS = "cwe_ids";
  @SerializedName(SERIALIZED_NAME_CWE_IDS)
  private List<String> cweIds;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private List<RepositoryAdvisoryCreditsInner> credits;

  public static final String SERIALIZED_NAME_CREDITS_DETAILED = "credits_detailed";
  @SerializedName(SERIALIZED_NAME_CREDITS_DETAILED)
  private List<RepositoryAdvisoryCredit> creditsDetailed;

  public RepositoryAdvisory() {
  }

  
  public RepositoryAdvisory(
     String ghsaId, 
     URI htmlUrl, 
     List<RepositoryAdvisoryIdentifiersInner> identifiers, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     OffsetDateTime publishedAt, 
     OffsetDateTime closedAt, 
     OffsetDateTime withdrawnAt, 
     List<RepositoryAdvisoryCwesInner> cwes, 
     List<RepositoryAdvisoryCredit> creditsDetailed
  ) {
    this();
    this.ghsaId = ghsaId;
    this.htmlUrl = htmlUrl;
    this.identifiers = identifiers;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.publishedAt = publishedAt;
    this.closedAt = closedAt;
    this.withdrawnAt = withdrawnAt;
    this.cwes = cwes;
    this.creditsDetailed = creditsDetailed;
  }

   /**
   * The GitHub Security Advisory ID.
   * @return ghsaId
  **/
  @javax.annotation.Nonnull

  public String getGhsaId() {
    return ghsaId;
  }




  public RepositoryAdvisory cveId(String cveId) {
    
    this.cveId = cveId;
    return this;
  }

   /**
   * The Common Vulnerabilities and Exposures (CVE) ID.
   * @return cveId
  **/
  @javax.annotation.Nullable

  public String getCveId() {
    return cveId;
  }


  public void setCveId(String cveId) {
    this.cveId = cveId;
  }


  public RepositoryAdvisory url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The API URL for the advisory.
   * @return url
  **/
  @javax.annotation.Nonnull

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


   /**
   * The URL for the advisory.
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }




  public RepositoryAdvisory summary(String summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * A short summary of the advisory.
   * @return summary
  **/
  @javax.annotation.Nonnull

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    this.summary = summary;
  }


  public RepositoryAdvisory description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A detailed description of what the advisory entails.
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public RepositoryAdvisory severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * The severity of the advisory.
   * @return severity
  **/
  @javax.annotation.Nullable

  public SeverityEnum getSeverity() {
    return severity;
  }


  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public RepositoryAdvisory author(RepositoryAdvisoryAuthor author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable

  public RepositoryAdvisoryAuthor getAuthor() {
    return author;
  }


  public void setAuthor(RepositoryAdvisoryAuthor author) {
    this.author = author;
  }


  public RepositoryAdvisory publisher(RepositoryAdvisoryPublisher publisher) {
    
    this.publisher = publisher;
    return this;
  }

   /**
   * Get publisher
   * @return publisher
  **/
  @javax.annotation.Nullable

  public RepositoryAdvisoryPublisher getPublisher() {
    return publisher;
  }


  public void setPublisher(RepositoryAdvisoryPublisher publisher) {
    this.publisher = publisher;
  }


   /**
   * Get identifiers
   * @return identifiers
  **/
  @javax.annotation.Nonnull

  public List<RepositoryAdvisoryIdentifiersInner> getIdentifiers() {
    return identifiers;
  }




  public RepositoryAdvisory state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state of the advisory.
   * @return state
  **/
  @javax.annotation.Nonnull

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


   /**
   * The date and time of when the advisory was created, in ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




   /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @return publishedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }




   /**
   * The date and time of when the advisory was closed, in ISO 8601 format.
   * @return closedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getClosedAt() {
    return closedAt;
  }




   /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @return withdrawnAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getWithdrawnAt() {
    return withdrawnAt;
  }




  public RepositoryAdvisory submission(RepositoryAdvisorySubmission submission) {
    
    this.submission = submission;
    return this;
  }

   /**
   * Get submission
   * @return submission
  **/
  @javax.annotation.Nullable

  public RepositoryAdvisorySubmission getSubmission() {
    return submission;
  }


  public void setSubmission(RepositoryAdvisorySubmission submission) {
    this.submission = submission;
  }


  public RepositoryAdvisory vulnerabilities(List<RepositoryAdvisoryVulnerability> vulnerabilities) {
    
    this.vulnerabilities = vulnerabilities;
    return this;
  }

  public RepositoryAdvisory addVulnerabilitiesItem(RepositoryAdvisoryVulnerability vulnerabilitiesItem) {
    if (this.vulnerabilities == null) {
      this.vulnerabilities = new ArrayList<>();
    }
    this.vulnerabilities.add(vulnerabilitiesItem);
    return this;
  }

   /**
   * Get vulnerabilities
   * @return vulnerabilities
  **/
  @javax.annotation.Nullable

  public List<RepositoryAdvisoryVulnerability> getVulnerabilities() {
    return vulnerabilities;
  }


  public void setVulnerabilities(List<RepositoryAdvisoryVulnerability> vulnerabilities) {
    this.vulnerabilities = vulnerabilities;
  }


  public RepositoryAdvisory cvss(RepositoryAdvisoryCvss cvss) {
    
    this.cvss = cvss;
    return this;
  }

   /**
   * Get cvss
   * @return cvss
  **/
  @javax.annotation.Nullable

  public RepositoryAdvisoryCvss getCvss() {
    return cvss;
  }


  public void setCvss(RepositoryAdvisoryCvss cvss) {
    this.cvss = cvss;
  }


   /**
   * Get cwes
   * @return cwes
  **/
  @javax.annotation.Nullable

  public List<RepositoryAdvisoryCwesInner> getCwes() {
    return cwes;
  }




  public RepositoryAdvisory cweIds(List<String> cweIds) {
    
    this.cweIds = cweIds;
    return this;
  }

  public RepositoryAdvisory addCweIdsItem(String cweIdsItem) {
    if (this.cweIds == null) {
      this.cweIds = new ArrayList<>();
    }
    this.cweIds.add(cweIdsItem);
    return this;
  }

   /**
   * A list of only the CWE IDs.
   * @return cweIds
  **/
  @javax.annotation.Nullable

  public List<String> getCweIds() {
    return cweIds;
  }


  public void setCweIds(List<String> cweIds) {
    this.cweIds = cweIds;
  }


  public RepositoryAdvisory credits(List<RepositoryAdvisoryCreditsInner> credits) {
    
    this.credits = credits;
    return this;
  }

  public RepositoryAdvisory addCreditsItem(RepositoryAdvisoryCreditsInner creditsItem) {
    if (this.credits == null) {
      this.credits = new ArrayList<>();
    }
    this.credits.add(creditsItem);
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nullable

  public List<RepositoryAdvisoryCreditsInner> getCredits() {
    return credits;
  }


  public void setCredits(List<RepositoryAdvisoryCreditsInner> credits) {
    this.credits = credits;
  }


   /**
   * Get creditsDetailed
   * @return creditsDetailed
  **/
  @javax.annotation.Nullable

  public List<RepositoryAdvisoryCredit> getCreditsDetailed() {
    return creditsDetailed;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryAdvisory repositoryAdvisory = (RepositoryAdvisory) o;
    return Objects.equals(this.ghsaId, repositoryAdvisory.ghsaId) &&
        Objects.equals(this.cveId, repositoryAdvisory.cveId) &&
        Objects.equals(this.url, repositoryAdvisory.url) &&
        Objects.equals(this.htmlUrl, repositoryAdvisory.htmlUrl) &&
        Objects.equals(this.summary, repositoryAdvisory.summary) &&
        Objects.equals(this.description, repositoryAdvisory.description) &&
        Objects.equals(this.severity, repositoryAdvisory.severity) &&
        Objects.equals(this.author, repositoryAdvisory.author) &&
        Objects.equals(this.publisher, repositoryAdvisory.publisher) &&
        Objects.equals(this.identifiers, repositoryAdvisory.identifiers) &&
        Objects.equals(this.state, repositoryAdvisory.state) &&
        Objects.equals(this.createdAt, repositoryAdvisory.createdAt) &&
        Objects.equals(this.updatedAt, repositoryAdvisory.updatedAt) &&
        Objects.equals(this.publishedAt, repositoryAdvisory.publishedAt) &&
        Objects.equals(this.closedAt, repositoryAdvisory.closedAt) &&
        Objects.equals(this.withdrawnAt, repositoryAdvisory.withdrawnAt) &&
        Objects.equals(this.submission, repositoryAdvisory.submission) &&
        Objects.equals(this.vulnerabilities, repositoryAdvisory.vulnerabilities) &&
        Objects.equals(this.cvss, repositoryAdvisory.cvss) &&
        Objects.equals(this.cwes, repositoryAdvisory.cwes) &&
        Objects.equals(this.cweIds, repositoryAdvisory.cweIds) &&
        Objects.equals(this.credits, repositoryAdvisory.credits) &&
        Objects.equals(this.creditsDetailed, repositoryAdvisory.creditsDetailed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ghsaId, cveId, url, htmlUrl, summary, description, severity, author, publisher, identifiers, state, createdAt, updatedAt, publishedAt, closedAt, withdrawnAt, submission, vulnerabilities, cvss, cwes, cweIds, credits, creditsDetailed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryAdvisory {\n");
    sb.append("    ghsaId: ").append(toIndentedString(ghsaId)).append("\n");
    sb.append("    cveId: ").append(toIndentedString(cveId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    withdrawnAt: ").append(toIndentedString(withdrawnAt)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    vulnerabilities: ").append(toIndentedString(vulnerabilities)).append("\n");
    sb.append("    cvss: ").append(toIndentedString(cvss)).append("\n");
    sb.append("    cwes: ").append(toIndentedString(cwes)).append("\n");
    sb.append("    cweIds: ").append(toIndentedString(cweIds)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    creditsDetailed: ").append(toIndentedString(creditsDetailed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ghsa_id");
    openapiFields.add("cve_id");
    openapiFields.add("url");
    openapiFields.add("html_url");
    openapiFields.add("summary");
    openapiFields.add("description");
    openapiFields.add("severity");
    openapiFields.add("author");
    openapiFields.add("publisher");
    openapiFields.add("identifiers");
    openapiFields.add("state");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("published_at");
    openapiFields.add("closed_at");
    openapiFields.add("withdrawn_at");
    openapiFields.add("submission");
    openapiFields.add("vulnerabilities");
    openapiFields.add("cvss");
    openapiFields.add("cwes");
    openapiFields.add("cwe_ids");
    openapiFields.add("credits");
    openapiFields.add("credits_detailed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ghsa_id");
    openapiRequiredFields.add("cve_id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("publisher");
    openapiRequiredFields.add("identifiers");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("published_at");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("withdrawn_at");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("vulnerabilities");
    openapiRequiredFields.add("cvss");
    openapiRequiredFields.add("cwes");
    openapiRequiredFields.add("cwe_ids");
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("credits_detailed");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RepositoryAdvisory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RepositoryAdvisory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryAdvisory is not found in the empty JSON string", RepositoryAdvisory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RepositoryAdvisory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryAdvisory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepositoryAdvisory.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ghsa_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ghsa_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ghsa_id").toString()));
      }
      if (!jsonObj.get("cve_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cve_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cve_id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `author`
      RepositoryAdvisoryAuthor.validateJsonObject(jsonObj.getAsJsonObject("author"));
      // validate the required field `publisher`
      RepositoryAdvisoryPublisher.validateJsonObject(jsonObj.getAsJsonObject("publisher"));
      // ensure the json data is an array
      if (!jsonObj.get("identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }

      JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
      // validate the required field `identifiers` (array)
      for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
        RepositoryAdvisoryIdentifiersInner.validateJsonObject(jsonArrayidentifiers.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `submission`
      RepositoryAdvisorySubmission.validateJsonObject(jsonObj.getAsJsonObject("submission"));
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilities` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilities").toString()));
      }

      JsonArray jsonArrayvulnerabilities = jsonObj.getAsJsonArray("vulnerabilities");
      // validate the required field `vulnerabilities` (array)
      for (int i = 0; i < jsonArrayvulnerabilities.size(); i++) {
        RepositoryAdvisoryVulnerability.validateJsonObject(jsonArrayvulnerabilities.get(i).getAsJsonObject());
      };
      // validate the required field `cvss`
      RepositoryAdvisoryCvss.validateJsonObject(jsonObj.getAsJsonObject("cvss"));
      // ensure the json data is an array
      if (!jsonObj.get("cwes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cwes` to be an array in the JSON string but got `%s`", jsonObj.get("cwes").toString()));
      }

      JsonArray jsonArraycwes = jsonObj.getAsJsonArray("cwes");
      // validate the required field `cwes` (array)
      for (int i = 0; i < jsonArraycwes.size(); i++) {
        RepositoryAdvisoryCwesInner.validateJsonObject(jsonArraycwes.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("cwe_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("cwe_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cwe_ids` to be an array in the JSON string but got `%s`", jsonObj.get("cwe_ids").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("credits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credits` to be an array in the JSON string but got `%s`", jsonObj.get("credits").toString()));
      }

      JsonArray jsonArraycredits = jsonObj.getAsJsonArray("credits");
      // validate the required field `credits` (array)
      for (int i = 0; i < jsonArraycredits.size(); i++) {
        RepositoryAdvisoryCreditsInner.validateJsonObject(jsonArraycredits.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("credits_detailed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credits_detailed` to be an array in the JSON string but got `%s`", jsonObj.get("credits_detailed").toString()));
      }

      JsonArray jsonArraycreditsDetailed = jsonObj.getAsJsonArray("credits_detailed");
      // validate the required field `credits_detailed` (array)
      for (int i = 0; i < jsonArraycreditsDetailed.size(); i++) {
        RepositoryAdvisoryCredit.validateJsonObject(jsonArraycreditsDetailed.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryAdvisory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryAdvisory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryAdvisory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryAdvisory.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryAdvisory>() {
           @Override
           public void write(JsonWriter out, RepositoryAdvisory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryAdvisory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RepositoryAdvisory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepositoryAdvisory
  * @throws IOException if the JSON string is invalid with respect to RepositoryAdvisory
  */
  public static RepositoryAdvisory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryAdvisory.class);
  }

 /**
  * Convert an instance of RepositoryAdvisory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

