/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.GpgKeyEmailsInner;
import org.openapitools.client.model.GpgKeySubkeysInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A unique encryption key
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class GpgKey {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_KEY_ID = "primary_key_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY_ID)
  private Integer primaryKeyId;

  public static final String SERIALIZED_NAME_KEY_ID = "key_id";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<GpgKeyEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBKEYS = "subkeys";
  @SerializedName(SERIALIZED_NAME_SUBKEYS)
  private List<GpgKeySubkeysInner> subkeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAN_SIGN = "can_sign";
  @SerializedName(SERIALIZED_NAME_CAN_SIGN)
  private Boolean canSign;

  public static final String SERIALIZED_NAME_CAN_ENCRYPT_COMMS = "can_encrypt_comms";
  @SerializedName(SERIALIZED_NAME_CAN_ENCRYPT_COMMS)
  private Boolean canEncryptComms;

  public static final String SERIALIZED_NAME_CAN_ENCRYPT_STORAGE = "can_encrypt_storage";
  @SerializedName(SERIALIZED_NAME_CAN_ENCRYPT_STORAGE)
  private Boolean canEncryptStorage;

  public static final String SERIALIZED_NAME_CAN_CERTIFY = "can_certify";
  @SerializedName(SERIALIZED_NAME_CAN_CERTIFY)
  private Boolean canCertify;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_REVOKED = "revoked";
  @SerializedName(SERIALIZED_NAME_REVOKED)
  private Boolean revoked;

  public static final String SERIALIZED_NAME_RAW_KEY = "raw_key";
  @SerializedName(SERIALIZED_NAME_RAW_KEY)
  private String rawKey;

  public GpgKey() {
  }

  public GpgKey id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public GpgKey name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GpgKey primaryKeyId(Integer primaryKeyId) {
    
    this.primaryKeyId = primaryKeyId;
    return this;
  }

   /**
   * Get primaryKeyId
   * @return primaryKeyId
  **/
  @javax.annotation.Nullable

  public Integer getPrimaryKeyId() {
    return primaryKeyId;
  }


  public void setPrimaryKeyId(Integer primaryKeyId) {
    this.primaryKeyId = primaryKeyId;
  }


  public GpgKey keyId(String keyId) {
    
    this.keyId = keyId;
    return this;
  }

   /**
   * Get keyId
   * @return keyId
  **/
  @javax.annotation.Nonnull

  public String getKeyId() {
    return keyId;
  }


  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public GpgKey publicKey(String publicKey) {
    
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @javax.annotation.Nonnull

  public String getPublicKey() {
    return publicKey;
  }


  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public GpgKey emails(List<GpgKeyEmailsInner> emails) {
    
    this.emails = emails;
    return this;
  }

  public GpgKey addEmailsItem(GpgKeyEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nonnull

  public List<GpgKeyEmailsInner> getEmails() {
    return emails;
  }


  public void setEmails(List<GpgKeyEmailsInner> emails) {
    this.emails = emails;
  }


  public GpgKey subkeys(List<GpgKeySubkeysInner> subkeys) {
    
    this.subkeys = subkeys;
    return this;
  }

  public GpgKey addSubkeysItem(GpgKeySubkeysInner subkeysItem) {
    if (this.subkeys == null) {
      this.subkeys = new ArrayList<>();
    }
    this.subkeys.add(subkeysItem);
    return this;
  }

   /**
   * Get subkeys
   * @return subkeys
  **/
  @javax.annotation.Nonnull

  public List<GpgKeySubkeysInner> getSubkeys() {
    return subkeys;
  }


  public void setSubkeys(List<GpgKeySubkeysInner> subkeys) {
    this.subkeys = subkeys;
  }


  public GpgKey canSign(Boolean canSign) {
    
    this.canSign = canSign;
    return this;
  }

   /**
   * Get canSign
   * @return canSign
  **/
  @javax.annotation.Nonnull

  public Boolean getCanSign() {
    return canSign;
  }


  public void setCanSign(Boolean canSign) {
    this.canSign = canSign;
  }


  public GpgKey canEncryptComms(Boolean canEncryptComms) {
    
    this.canEncryptComms = canEncryptComms;
    return this;
  }

   /**
   * Get canEncryptComms
   * @return canEncryptComms
  **/
  @javax.annotation.Nonnull

  public Boolean getCanEncryptComms() {
    return canEncryptComms;
  }


  public void setCanEncryptComms(Boolean canEncryptComms) {
    this.canEncryptComms = canEncryptComms;
  }


  public GpgKey canEncryptStorage(Boolean canEncryptStorage) {
    
    this.canEncryptStorage = canEncryptStorage;
    return this;
  }

   /**
   * Get canEncryptStorage
   * @return canEncryptStorage
  **/
  @javax.annotation.Nonnull

  public Boolean getCanEncryptStorage() {
    return canEncryptStorage;
  }


  public void setCanEncryptStorage(Boolean canEncryptStorage) {
    this.canEncryptStorage = canEncryptStorage;
  }


  public GpgKey canCertify(Boolean canCertify) {
    
    this.canCertify = canCertify;
    return this;
  }

   /**
   * Get canCertify
   * @return canCertify
  **/
  @javax.annotation.Nonnull

  public Boolean getCanCertify() {
    return canCertify;
  }


  public void setCanCertify(Boolean canCertify) {
    this.canCertify = canCertify;
  }


  public GpgKey createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GpgKey expiresAt(OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public GpgKey revoked(Boolean revoked) {
    
    this.revoked = revoked;
    return this;
  }

   /**
   * Get revoked
   * @return revoked
  **/
  @javax.annotation.Nonnull

  public Boolean getRevoked() {
    return revoked;
  }


  public void setRevoked(Boolean revoked) {
    this.revoked = revoked;
  }


  public GpgKey rawKey(String rawKey) {
    
    this.rawKey = rawKey;
    return this;
  }

   /**
   * Get rawKey
   * @return rawKey
  **/
  @javax.annotation.Nullable

  public String getRawKey() {
    return rawKey;
  }


  public void setRawKey(String rawKey) {
    this.rawKey = rawKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GpgKey gpgKey = (GpgKey) o;
    return Objects.equals(this.id, gpgKey.id) &&
        Objects.equals(this.name, gpgKey.name) &&
        Objects.equals(this.primaryKeyId, gpgKey.primaryKeyId) &&
        Objects.equals(this.keyId, gpgKey.keyId) &&
        Objects.equals(this.publicKey, gpgKey.publicKey) &&
        Objects.equals(this.emails, gpgKey.emails) &&
        Objects.equals(this.subkeys, gpgKey.subkeys) &&
        Objects.equals(this.canSign, gpgKey.canSign) &&
        Objects.equals(this.canEncryptComms, gpgKey.canEncryptComms) &&
        Objects.equals(this.canEncryptStorage, gpgKey.canEncryptStorage) &&
        Objects.equals(this.canCertify, gpgKey.canCertify) &&
        Objects.equals(this.createdAt, gpgKey.createdAt) &&
        Objects.equals(this.expiresAt, gpgKey.expiresAt) &&
        Objects.equals(this.revoked, gpgKey.revoked) &&
        Objects.equals(this.rawKey, gpgKey.rawKey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, primaryKeyId, keyId, publicKey, emails, subkeys, canSign, canEncryptComms, canEncryptStorage, canCertify, createdAt, expiresAt, revoked, rawKey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GpgKey {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryKeyId: ").append(toIndentedString(primaryKeyId)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    subkeys: ").append(toIndentedString(subkeys)).append("\n");
    sb.append("    canSign: ").append(toIndentedString(canSign)).append("\n");
    sb.append("    canEncryptComms: ").append(toIndentedString(canEncryptComms)).append("\n");
    sb.append("    canEncryptStorage: ").append(toIndentedString(canEncryptStorage)).append("\n");
    sb.append("    canCertify: ").append(toIndentedString(canCertify)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("    rawKey: ").append(toIndentedString(rawKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("primary_key_id");
    openapiFields.add("key_id");
    openapiFields.add("public_key");
    openapiFields.add("emails");
    openapiFields.add("subkeys");
    openapiFields.add("can_sign");
    openapiFields.add("can_encrypt_comms");
    openapiFields.add("can_encrypt_storage");
    openapiFields.add("can_certify");
    openapiFields.add("created_at");
    openapiFields.add("expires_at");
    openapiFields.add("revoked");
    openapiFields.add("raw_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("primary_key_id");
    openapiRequiredFields.add("key_id");
    openapiRequiredFields.add("public_key");
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("subkeys");
    openapiRequiredFields.add("can_sign");
    openapiRequiredFields.add("can_encrypt_comms");
    openapiRequiredFields.add("can_encrypt_storage");
    openapiRequiredFields.add("can_certify");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("expires_at");
    openapiRequiredFields.add("revoked");
    openapiRequiredFields.add("raw_key");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GpgKey
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GpgKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GpgKey is not found in the empty JSON string", GpgKey.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GpgKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GpgKey` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GpgKey.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_id").toString()));
      }
      if (!jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }

      JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
      // validate the required field `emails` (array)
      for (int i = 0; i < jsonArrayemails.size(); i++) {
        GpgKeyEmailsInner.validateJsonObject(jsonArrayemails.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("subkeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subkeys` to be an array in the JSON string but got `%s`", jsonObj.get("subkeys").toString()));
      }

      JsonArray jsonArraysubkeys = jsonObj.getAsJsonArray("subkeys");
      // validate the required field `subkeys` (array)
      for (int i = 0; i < jsonArraysubkeys.size(); i++) {
        GpgKeySubkeysInner.validateJsonObject(jsonArraysubkeys.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("raw_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GpgKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GpgKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GpgKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GpgKey.class));

       return (TypeAdapter<T>) new TypeAdapter<GpgKey>() {
           @Override
           public void write(JsonWriter out, GpgKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GpgKey read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GpgKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GpgKey
  * @throws IOException if the JSON string is invalid with respect to GpgKey
  */
  public static GpgKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GpgKey.class);
  }

 /**
  * Convert an instance of GpgKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

