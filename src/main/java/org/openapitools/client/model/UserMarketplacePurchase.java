/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.MarketplaceAccount;
import org.openapitools.client.model.MarketplaceListingPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User Marketplace Purchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class UserMarketplacePurchase {
  public static final String SERIALIZED_NAME_BILLING_CYCLE = "billing_cycle";
  @SerializedName(SERIALIZED_NAME_BILLING_CYCLE)
  private String billingCycle;

  public static final String SERIALIZED_NAME_NEXT_BILLING_DATE = "next_billing_date";
  @SerializedName(SERIALIZED_NAME_NEXT_BILLING_DATE)
  private OffsetDateTime nextBillingDate;

  public static final String SERIALIZED_NAME_UNIT_COUNT = "unit_count";
  @SerializedName(SERIALIZED_NAME_UNIT_COUNT)
  private Integer unitCount;

  public static final String SERIALIZED_NAME_ON_FREE_TRIAL = "on_free_trial";
  @SerializedName(SERIALIZED_NAME_ON_FREE_TRIAL)
  private Boolean onFreeTrial;

  public static final String SERIALIZED_NAME_FREE_TRIAL_ENDS_ON = "free_trial_ends_on";
  @SerializedName(SERIALIZED_NAME_FREE_TRIAL_ENDS_ON)
  private OffsetDateTime freeTrialEndsOn;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private MarketplaceAccount account;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private MarketplaceListingPlan plan;

  public UserMarketplacePurchase() {
  }

  public UserMarketplacePurchase billingCycle(String billingCycle) {
    
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * Get billingCycle
   * @return billingCycle
  **/
  @javax.annotation.Nonnull

  public String getBillingCycle() {
    return billingCycle;
  }


  public void setBillingCycle(String billingCycle) {
    this.billingCycle = billingCycle;
  }


  public UserMarketplacePurchase nextBillingDate(OffsetDateTime nextBillingDate) {
    
    this.nextBillingDate = nextBillingDate;
    return this;
  }

   /**
   * Get nextBillingDate
   * @return nextBillingDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getNextBillingDate() {
    return nextBillingDate;
  }


  public void setNextBillingDate(OffsetDateTime nextBillingDate) {
    this.nextBillingDate = nextBillingDate;
  }


  public UserMarketplacePurchase unitCount(Integer unitCount) {
    
    this.unitCount = unitCount;
    return this;
  }

   /**
   * Get unitCount
   * @return unitCount
  **/
  @javax.annotation.Nullable

  public Integer getUnitCount() {
    return unitCount;
  }


  public void setUnitCount(Integer unitCount) {
    this.unitCount = unitCount;
  }


  public UserMarketplacePurchase onFreeTrial(Boolean onFreeTrial) {
    
    this.onFreeTrial = onFreeTrial;
    return this;
  }

   /**
   * Get onFreeTrial
   * @return onFreeTrial
  **/
  @javax.annotation.Nonnull

  public Boolean getOnFreeTrial() {
    return onFreeTrial;
  }


  public void setOnFreeTrial(Boolean onFreeTrial) {
    this.onFreeTrial = onFreeTrial;
  }


  public UserMarketplacePurchase freeTrialEndsOn(OffsetDateTime freeTrialEndsOn) {
    
    this.freeTrialEndsOn = freeTrialEndsOn;
    return this;
  }

   /**
   * Get freeTrialEndsOn
   * @return freeTrialEndsOn
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getFreeTrialEndsOn() {
    return freeTrialEndsOn;
  }


  public void setFreeTrialEndsOn(OffsetDateTime freeTrialEndsOn) {
    this.freeTrialEndsOn = freeTrialEndsOn;
  }


  public UserMarketplacePurchase updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UserMarketplacePurchase account(MarketplaceAccount account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull

  public MarketplaceAccount getAccount() {
    return account;
  }


  public void setAccount(MarketplaceAccount account) {
    this.account = account;
  }


  public UserMarketplacePurchase plan(MarketplaceListingPlan plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nonnull

  public MarketplaceListingPlan getPlan() {
    return plan;
  }


  public void setPlan(MarketplaceListingPlan plan) {
    this.plan = plan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserMarketplacePurchase userMarketplacePurchase = (UserMarketplacePurchase) o;
    return Objects.equals(this.billingCycle, userMarketplacePurchase.billingCycle) &&
        Objects.equals(this.nextBillingDate, userMarketplacePurchase.nextBillingDate) &&
        Objects.equals(this.unitCount, userMarketplacePurchase.unitCount) &&
        Objects.equals(this.onFreeTrial, userMarketplacePurchase.onFreeTrial) &&
        Objects.equals(this.freeTrialEndsOn, userMarketplacePurchase.freeTrialEndsOn) &&
        Objects.equals(this.updatedAt, userMarketplacePurchase.updatedAt) &&
        Objects.equals(this.account, userMarketplacePurchase.account) &&
        Objects.equals(this.plan, userMarketplacePurchase.plan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingCycle, nextBillingDate, unitCount, onFreeTrial, freeTrialEndsOn, updatedAt, account, plan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserMarketplacePurchase {\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    nextBillingDate: ").append(toIndentedString(nextBillingDate)).append("\n");
    sb.append("    unitCount: ").append(toIndentedString(unitCount)).append("\n");
    sb.append("    onFreeTrial: ").append(toIndentedString(onFreeTrial)).append("\n");
    sb.append("    freeTrialEndsOn: ").append(toIndentedString(freeTrialEndsOn)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_cycle");
    openapiFields.add("next_billing_date");
    openapiFields.add("unit_count");
    openapiFields.add("on_free_trial");
    openapiFields.add("free_trial_ends_on");
    openapiFields.add("updated_at");
    openapiFields.add("account");
    openapiFields.add("plan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billing_cycle");
    openapiRequiredFields.add("next_billing_date");
    openapiRequiredFields.add("unit_count");
    openapiRequiredFields.add("on_free_trial");
    openapiRequiredFields.add("free_trial_ends_on");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("plan");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserMarketplacePurchase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserMarketplacePurchase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserMarketplacePurchase is not found in the empty JSON string", UserMarketplacePurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserMarketplacePurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserMarketplacePurchase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserMarketplacePurchase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("billing_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_cycle").toString()));
      }
      // validate the required field `account`
      MarketplaceAccount.validateJsonObject(jsonObj.getAsJsonObject("account"));
      // validate the required field `plan`
      MarketplaceListingPlan.validateJsonObject(jsonObj.getAsJsonObject("plan"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserMarketplacePurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserMarketplacePurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserMarketplacePurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserMarketplacePurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<UserMarketplacePurchase>() {
           @Override
           public void write(JsonWriter out, UserMarketplacePurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserMarketplacePurchase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserMarketplacePurchase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserMarketplacePurchase
  * @throws IOException if the JSON string is invalid with respect to UserMarketplacePurchase
  */
  public static UserMarketplacePurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserMarketplacePurchase.class);
  }

 /**
  * Convert an instance of UserMarketplacePurchase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

