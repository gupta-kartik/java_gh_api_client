/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.WebhookMetaDeletedHookConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookMetaDeletedHook {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private WebhookMetaDeletedHookConfig config;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
  public enum EventsEnum {
    STAR("*"),
    
    BRANCH_PROTECTION_RULE("branch_protection_rule"),
    
    CHECK_RUN("check_run"),
    
    CHECK_SUITE("check_suite"),
    
    CODE_SCANNING_ALERT("code_scanning_alert"),
    
    COMMIT_COMMENT("commit_comment"),
    
    CREATE("create"),
    
    DELETE("delete"),
    
    DEPLOYMENT("deployment"),
    
    DEPLOYMENT_STATUS("deployment_status"),
    
    DEPLOY_KEY("deploy_key"),
    
    DISCUSSION("discussion"),
    
    DISCUSSION_COMMENT("discussion_comment"),
    
    FORK("fork"),
    
    GOLLUM("gollum"),
    
    ISSUES("issues"),
    
    ISSUE_COMMENT("issue_comment"),
    
    LABEL("label"),
    
    MEMBER("member"),
    
    MEMBERSHIP("membership"),
    
    META("meta"),
    
    MILESTONE("milestone"),
    
    ORGANIZATION("organization"),
    
    ORG_BLOCK("org_block"),
    
    PACKAGE("package"),
    
    PAGE_BUILD("page_build"),
    
    PROJECT("project"),
    
    PROJECT_CARD("project_card"),
    
    PROJECT_COLUMN("project_column"),
    
    PUBLIC("public"),
    
    PULL_REQUEST("pull_request"),
    
    PULL_REQUEST_REVIEW("pull_request_review"),
    
    PULL_REQUEST_REVIEW_COMMENT("pull_request_review_comment"),
    
    PULL_REQUEST_REVIEW_THREAD("pull_request_review_thread"),
    
    PUSH("push"),
    
    REGISTRY_PACKAGE("registry_package"),
    
    RELEASE("release"),
    
    REPOSITORY("repository"),
    
    REPOSITORY_IMPORT("repository_import"),
    
    REPOSITORY_VULNERABILITY_ALERT("repository_vulnerability_alert"),
    
    SECRET_SCANNING_ALERT("secret_scanning_alert"),
    
    SECRET_SCANNING_ALERT_LOCATION("secret_scanning_alert_location"),
    
    SECURITY_AND_ANALYSIS("security_and_analysis"),
    
    STAR("star"),
    
    STATUS("status"),
    
    TEAM("team"),
    
    TEAM_ADD("team_add"),
    
    WATCH("watch"),
    
    WORKFLOW_JOB("workflow_job"),
    
    WORKFLOW_RUN("workflow_run"),
    
    REPOSITORY_DISPATCH("repository_dispatch"),
    
    PROJECTS_V2_ITEM("projects_v2_item");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String value) {
      for (EventsEnum b : EventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<EventsEnum> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public WebhookMetaDeletedHook() {
  }

  public WebhookMetaDeletedHook active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nonnull

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public WebhookMetaDeletedHook config(WebhookMetaDeletedHookConfig config) {
    
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nonnull

  public WebhookMetaDeletedHookConfig getConfig() {
    return config;
  }


  public void setConfig(WebhookMetaDeletedHookConfig config) {
    this.config = config;
  }


  public WebhookMetaDeletedHook createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookMetaDeletedHook events(List<EventsEnum> events) {
    
    this.events = events;
    return this;
  }

  public WebhookMetaDeletedHook addEventsItem(EventsEnum eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nonnull

  public List<EventsEnum> getEvents() {
    return events;
  }


  public void setEvents(List<EventsEnum> events) {
    this.events = events;
  }


  public WebhookMetaDeletedHook id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookMetaDeletedHook name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookMetaDeletedHook type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public WebhookMetaDeletedHook updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookMetaDeletedHook webhookMetaDeletedHook = (WebhookMetaDeletedHook) o;
    return Objects.equals(this.active, webhookMetaDeletedHook.active) &&
        Objects.equals(this.config, webhookMetaDeletedHook.config) &&
        Objects.equals(this.createdAt, webhookMetaDeletedHook.createdAt) &&
        Objects.equals(this.events, webhookMetaDeletedHook.events) &&
        Objects.equals(this.id, webhookMetaDeletedHook.id) &&
        Objects.equals(this.name, webhookMetaDeletedHook.name) &&
        Objects.equals(this.type, webhookMetaDeletedHook.type) &&
        Objects.equals(this.updatedAt, webhookMetaDeletedHook.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, config, createdAt, events, id, name, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookMetaDeletedHook {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("config");
    openapiFields.add("created_at");
    openapiFields.add("events");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("config");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookMetaDeletedHook
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookMetaDeletedHook.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookMetaDeletedHook is not found in the empty JSON string", WebhookMetaDeletedHook.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookMetaDeletedHook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookMetaDeletedHook` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookMetaDeletedHook.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `config`
      WebhookMetaDeletedHookConfig.validateJsonObject(jsonObj.getAsJsonObject("config"));
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("events") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookMetaDeletedHook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookMetaDeletedHook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookMetaDeletedHook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookMetaDeletedHook.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookMetaDeletedHook>() {
           @Override
           public void write(JsonWriter out, WebhookMetaDeletedHook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookMetaDeletedHook read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookMetaDeletedHook given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookMetaDeletedHook
  * @throws IOException if the JSON string is invalid with respect to WebhookMetaDeletedHook
  */
  public static WebhookMetaDeletedHook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookMetaDeletedHook.class);
  }

 /**
  * Convert an instance of WebhookMetaDeletedHook to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

