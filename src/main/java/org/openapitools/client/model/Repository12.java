/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.License;
import org.openapitools.client.model.RepositoryCreatedAt;
import org.openapitools.client.model.RepositoryPermissions;
import org.openapitools.client.model.RepositoryPushedAt;
import org.openapitools.client.model.User;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A git repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class Repository12 {
  public static final String SERIALIZED_NAME_ALLOW_AUTO_MERGE = "allow_auto_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_MERGE)
  private Boolean allowAutoMerge = false;

  public static final String SERIALIZED_NAME_ALLOW_FORKING = "allow_forking";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORKING)
  private Boolean allowForking;

  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMIT = "allow_merge_commit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMIT)
  private Boolean allowMergeCommit = true;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_MERGE = "allow_rebase_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_MERGE)
  private Boolean allowRebaseMerge = true;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge = true;

  public static final String SERIALIZED_NAME_ALLOW_UPDATE_BRANCH = "allow_update_branch";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE_BRANCH)
  private Boolean allowUpdateBranch;

  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = false;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_CLONE_URL = "clone_url";
  @SerializedName(SERIALIZED_NAME_CLONE_URL)
  private URI cloneUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private URI contributorsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private RepositoryCreatedAt createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge = false;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private URI deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private URI downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private URI eventsUrl;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private Integer forks;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private Integer forksCount;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private URI forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_GIT_URL = "git_url";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private URI gitUrl;

  public static final String SERIALIZED_NAME_HAS_DOWNLOADS = "has_downloads";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOADS)
  private Boolean hasDownloads = true;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues = true;

  public static final String SERIALIZED_NAME_HAS_PAGES = "has_pages";
  @SerializedName(SERIALIZED_NAME_HAS_PAGES)
  private Boolean hasPages;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects = true;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki = true;

  public static final String SERIALIZED_NAME_HAS_DISCUSSIONS = "has_discussions";
  @SerializedName(SERIALIZED_NAME_HAS_DISCUSSIONS)
  private Boolean hasDiscussions = false;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private URI hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private URI languagesUrl;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private License license;

  public static final String SERIALIZED_NAME_MASTER_BRANCH = "master_branch";
  @SerializedName(SERIALIZED_NAME_MASTER_BRANCH)
  private String masterBranch;

  /**
   * The default value for a merge commit message.
   */
  @JsonAdapter(MergeCommitMessageEnum.Adapter.class)
  public enum MergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    PR_TITLE("PR_TITLE"),
    
    BLANK("BLANK");

    private String value;

    MergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitMessageEnum fromValue(String value) {
      for (MergeCommitMessageEnum b : MergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_MESSAGE = "merge_commit_message";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_MESSAGE)
  private MergeCommitMessageEnum mergeCommitMessage;

  /**
   * The default value for a merge commit message title.
   */
  @JsonAdapter(MergeCommitTitleEnum.Adapter.class)
  public enum MergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    MERGE_MESSAGE("MERGE_MESSAGE");

    private String value;

    MergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitTitleEnum fromValue(String value) {
      for (MergeCommitTitleEnum b : MergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_TITLE = "merge_commit_title";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_TITLE)
  private MergeCommitTitleEnum mergeCommitTitle;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private URI mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_MIRROR_URL = "mirror_url";
  @SerializedName(SERIALIZED_NAME_MIRROR_URL)
  private URI mirrorUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OPEN_ISSUES = "open_issues";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES)
  private Integer openIssues;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private Integer openIssuesCount;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private User owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private RepositoryPermissions permissions;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushed_at";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private RepositoryPushedAt pushedAt;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_ROLE_NAME = "role_name";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  /**
   * The default value for a squash merge commit message:  - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(SquashMergeCommitMessageEnum.Adapter.class)
  public enum SquashMergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    COMMIT_MESSAGES("COMMIT_MESSAGES"),
    
    BLANK("BLANK");

    private String value;

    SquashMergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitMessageEnum fromValue(String value) {
      for (SquashMergeCommitMessageEnum b : SquashMergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitMessageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE = "squash_merge_commit_message";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE)
  private SquashMergeCommitMessageEnum squashMergeCommitMessage;

  /**
   * The default value for a squash merge commit title:  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   */
  @JsonAdapter(SquashMergeCommitTitleEnum.Adapter.class)
  public enum SquashMergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");

    private String value;

    SquashMergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitTitleEnum fromValue(String value) {
      for (SquashMergeCommitTitleEnum b : SquashMergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitTitleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE = "squash_merge_commit_title";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE)
  private SquashMergeCommitTitleEnum squashMergeCommitTitle;

  public static final String SERIALIZED_NAME_SSH_URL = "ssh_url";
  @SerializedName(SERIALIZED_NAME_SSH_URL)
  private String sshUrl;

  public static final String SERIALIZED_NAME_STARGAZERS = "stargazers";
  @SerializedName(SERIALIZED_NAME_STARGAZERS)
  private Integer stargazers;

  public static final String SERIALIZED_NAME_STARGAZERS_COUNT = "stargazers_count";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_COUNT)
  private Integer stargazersCount;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private URI stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private URI subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private URI subscriptionUrl;

  public static final String SERIALIZED_NAME_SVN_URL = "svn_url";
  @SerializedName(SERIALIZED_NAME_SVN_URL)
  private URI svnUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private URI tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private URI teamsUrl;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT = "use_squash_pr_title_as_default";
  @SerializedName(SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT)
  private Boolean useSquashPrTitleAsDefault = false;

  /**
   * Gets or Sets visibility
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("public"),
    
    PRIVATE("private"),
    
    INTERNAL("internal");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private Integer watchers;

  public static final String SERIALIZED_NAME_WATCHERS_COUNT = "watchers_count";
  @SerializedName(SERIALIZED_NAME_WATCHERS_COUNT)
  private Integer watchersCount;

  public static final String SERIALIZED_NAME_WEB_COMMIT_SIGNOFF_REQUIRED = "web_commit_signoff_required";
  @SerializedName(SERIALIZED_NAME_WEB_COMMIT_SIGNOFF_REQUIRED)
  private Boolean webCommitSignoffRequired;

  public Repository12() {
  }

  public Repository12 allowAutoMerge(Boolean allowAutoMerge) {
    
    this.allowAutoMerge = allowAutoMerge;
    return this;
  }

   /**
   * Whether to allow auto-merge for pull requests.
   * @return allowAutoMerge
  **/
  @javax.annotation.Nullable

  public Boolean getAllowAutoMerge() {
    return allowAutoMerge;
  }


  public void setAllowAutoMerge(Boolean allowAutoMerge) {
    this.allowAutoMerge = allowAutoMerge;
  }


  public Repository12 allowForking(Boolean allowForking) {
    
    this.allowForking = allowForking;
    return this;
  }

   /**
   * Whether to allow private forks
   * @return allowForking
  **/
  @javax.annotation.Nullable

  public Boolean getAllowForking() {
    return allowForking;
  }


  public void setAllowForking(Boolean allowForking) {
    this.allowForking = allowForking;
  }


  public Repository12 allowMergeCommit(Boolean allowMergeCommit) {
    
    this.allowMergeCommit = allowMergeCommit;
    return this;
  }

   /**
   * Whether to allow merge commits for pull requests.
   * @return allowMergeCommit
  **/
  @javax.annotation.Nullable

  public Boolean getAllowMergeCommit() {
    return allowMergeCommit;
  }


  public void setAllowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
  }


  public Repository12 allowRebaseMerge(Boolean allowRebaseMerge) {
    
    this.allowRebaseMerge = allowRebaseMerge;
    return this;
  }

   /**
   * Whether to allow rebase merges for pull requests.
   * @return allowRebaseMerge
  **/
  @javax.annotation.Nullable

  public Boolean getAllowRebaseMerge() {
    return allowRebaseMerge;
  }


  public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
  }


  public Repository12 allowSquashMerge(Boolean allowSquashMerge) {
    
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

   /**
   * Whether to allow squash merges for pull requests.
   * @return allowSquashMerge
  **/
  @javax.annotation.Nullable

  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }


  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public Repository12 allowUpdateBranch(Boolean allowUpdateBranch) {
    
    this.allowUpdateBranch = allowUpdateBranch;
    return this;
  }

   /**
   * Get allowUpdateBranch
   * @return allowUpdateBranch
  **/
  @javax.annotation.Nullable

  public Boolean getAllowUpdateBranch() {
    return allowUpdateBranch;
  }


  public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
  }


  public Repository12 archiveUrl(String archiveUrl) {
    
    this.archiveUrl = archiveUrl;
    return this;
  }

   /**
   * Get archiveUrl
   * @return archiveUrl
  **/
  @javax.annotation.Nonnull

  public String getArchiveUrl() {
    return archiveUrl;
  }


  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public Repository12 archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Whether the repository is archived.
   * @return archived
  **/
  @javax.annotation.Nonnull

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Repository12 assigneesUrl(String assigneesUrl) {
    
    this.assigneesUrl = assigneesUrl;
    return this;
  }

   /**
   * Get assigneesUrl
   * @return assigneesUrl
  **/
  @javax.annotation.Nonnull

  public String getAssigneesUrl() {
    return assigneesUrl;
  }


  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public Repository12 blobsUrl(String blobsUrl) {
    
    this.blobsUrl = blobsUrl;
    return this;
  }

   /**
   * Get blobsUrl
   * @return blobsUrl
  **/
  @javax.annotation.Nonnull

  public String getBlobsUrl() {
    return blobsUrl;
  }


  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public Repository12 branchesUrl(String branchesUrl) {
    
    this.branchesUrl = branchesUrl;
    return this;
  }

   /**
   * Get branchesUrl
   * @return branchesUrl
  **/
  @javax.annotation.Nonnull

  public String getBranchesUrl() {
    return branchesUrl;
  }


  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public Repository12 cloneUrl(URI cloneUrl) {
    
    this.cloneUrl = cloneUrl;
    return this;
  }

   /**
   * Get cloneUrl
   * @return cloneUrl
  **/
  @javax.annotation.Nonnull

  public URI getCloneUrl() {
    return cloneUrl;
  }


  public void setCloneUrl(URI cloneUrl) {
    this.cloneUrl = cloneUrl;
  }


  public Repository12 collaboratorsUrl(String collaboratorsUrl) {
    
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

   /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
  **/
  @javax.annotation.Nonnull

  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }


  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public Repository12 commentsUrl(String commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public String getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public Repository12 commitsUrl(String commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public String getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public Repository12 compareUrl(String compareUrl) {
    
    this.compareUrl = compareUrl;
    return this;
  }

   /**
   * Get compareUrl
   * @return compareUrl
  **/
  @javax.annotation.Nonnull

  public String getCompareUrl() {
    return compareUrl;
  }


  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public Repository12 contentsUrl(String contentsUrl) {
    
    this.contentsUrl = contentsUrl;
    return this;
  }

   /**
   * Get contentsUrl
   * @return contentsUrl
  **/
  @javax.annotation.Nonnull

  public String getContentsUrl() {
    return contentsUrl;
  }


  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public Repository12 contributorsUrl(URI contributorsUrl) {
    
    this.contributorsUrl = contributorsUrl;
    return this;
  }

   /**
   * Get contributorsUrl
   * @return contributorsUrl
  **/
  @javax.annotation.Nonnull

  public URI getContributorsUrl() {
    return contributorsUrl;
  }


  public void setContributorsUrl(URI contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public Repository12 createdAt(RepositoryCreatedAt createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public RepositoryCreatedAt getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(RepositoryCreatedAt createdAt) {
    this.createdAt = createdAt;
  }


  public Repository12 defaultBranch(String defaultBranch) {
    
    this.defaultBranch = defaultBranch;
    return this;
  }

   /**
   * The default branch of the repository.
   * @return defaultBranch
  **/
  @javax.annotation.Nonnull

  public String getDefaultBranch() {
    return defaultBranch;
  }


  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public Repository12 deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

   /**
   * Whether to delete head branches when pull requests are merged
   * @return deleteBranchOnMerge
  **/
  @javax.annotation.Nullable

  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }


  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public Repository12 deploymentsUrl(URI deploymentsUrl) {
    
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

   /**
   * Get deploymentsUrl
   * @return deploymentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getDeploymentsUrl() {
    return deploymentsUrl;
  }


  public void setDeploymentsUrl(URI deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public Repository12 description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Repository12 disabled(Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

   /**
   * Returns whether or not this repository is disabled.
   * @return disabled
  **/
  @javax.annotation.Nullable

  public Boolean getDisabled() {
    return disabled;
  }


  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Repository12 downloadsUrl(URI downloadsUrl) {
    
    this.downloadsUrl = downloadsUrl;
    return this;
  }

   /**
   * Get downloadsUrl
   * @return downloadsUrl
  **/
  @javax.annotation.Nonnull

  public URI getDownloadsUrl() {
    return downloadsUrl;
  }


  public void setDownloadsUrl(URI downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public Repository12 eventsUrl(URI eventsUrl) {
    
    this.eventsUrl = eventsUrl;
    return this;
  }

   /**
   * Get eventsUrl
   * @return eventsUrl
  **/
  @javax.annotation.Nonnull

  public URI getEventsUrl() {
    return eventsUrl;
  }


  public void setEventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public Repository12 fork(Boolean fork) {
    
    this.fork = fork;
    return this;
  }

   /**
   * Get fork
   * @return fork
  **/
  @javax.annotation.Nonnull

  public Boolean getFork() {
    return fork;
  }


  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public Repository12 forks(Integer forks) {
    
    this.forks = forks;
    return this;
  }

   /**
   * Get forks
   * @return forks
  **/
  @javax.annotation.Nonnull

  public Integer getForks() {
    return forks;
  }


  public void setForks(Integer forks) {
    this.forks = forks;
  }


  public Repository12 forksCount(Integer forksCount) {
    
    this.forksCount = forksCount;
    return this;
  }

   /**
   * Get forksCount
   * @return forksCount
  **/
  @javax.annotation.Nonnull

  public Integer getForksCount() {
    return forksCount;
  }


  public void setForksCount(Integer forksCount) {
    this.forksCount = forksCount;
  }


  public Repository12 forksUrl(URI forksUrl) {
    
    this.forksUrl = forksUrl;
    return this;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @javax.annotation.Nonnull

  public URI getForksUrl() {
    return forksUrl;
  }


  public void setForksUrl(URI forksUrl) {
    this.forksUrl = forksUrl;
  }


  public Repository12 fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public Repository12 gitCommitsUrl(String gitCommitsUrl) {
    
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

   /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }


  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public Repository12 gitRefsUrl(String gitRefsUrl) {
    
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

   /**
   * Get gitRefsUrl
   * @return gitRefsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitRefsUrl() {
    return gitRefsUrl;
  }


  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public Repository12 gitTagsUrl(String gitTagsUrl) {
    
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

   /**
   * Get gitTagsUrl
   * @return gitTagsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitTagsUrl() {
    return gitTagsUrl;
  }


  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public Repository12 gitUrl(URI gitUrl) {
    
    this.gitUrl = gitUrl;
    return this;
  }

   /**
   * Get gitUrl
   * @return gitUrl
  **/
  @javax.annotation.Nonnull

  public URI getGitUrl() {
    return gitUrl;
  }


  public void setGitUrl(URI gitUrl) {
    this.gitUrl = gitUrl;
  }


  public Repository12 hasDownloads(Boolean hasDownloads) {
    
    this.hasDownloads = hasDownloads;
    return this;
  }

   /**
   * Whether downloads are enabled.
   * @return hasDownloads
  **/
  @javax.annotation.Nonnull

  public Boolean getHasDownloads() {
    return hasDownloads;
  }


  public void setHasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
  }


  public Repository12 hasIssues(Boolean hasIssues) {
    
    this.hasIssues = hasIssues;
    return this;
  }

   /**
   * Whether issues are enabled.
   * @return hasIssues
  **/
  @javax.annotation.Nonnull

  public Boolean getHasIssues() {
    return hasIssues;
  }


  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public Repository12 hasPages(Boolean hasPages) {
    
    this.hasPages = hasPages;
    return this;
  }

   /**
   * Get hasPages
   * @return hasPages
  **/
  @javax.annotation.Nonnull

  public Boolean getHasPages() {
    return hasPages;
  }


  public void setHasPages(Boolean hasPages) {
    this.hasPages = hasPages;
  }


  public Repository12 hasProjects(Boolean hasProjects) {
    
    this.hasProjects = hasProjects;
    return this;
  }

   /**
   * Whether projects are enabled.
   * @return hasProjects
  **/
  @javax.annotation.Nonnull

  public Boolean getHasProjects() {
    return hasProjects;
  }


  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public Repository12 hasWiki(Boolean hasWiki) {
    
    this.hasWiki = hasWiki;
    return this;
  }

   /**
   * Whether the wiki is enabled.
   * @return hasWiki
  **/
  @javax.annotation.Nonnull

  public Boolean getHasWiki() {
    return hasWiki;
  }


  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public Repository12 hasDiscussions(Boolean hasDiscussions) {
    
    this.hasDiscussions = hasDiscussions;
    return this;
  }

   /**
   * Whether discussions are enabled.
   * @return hasDiscussions
  **/
  @javax.annotation.Nonnull

  public Boolean getHasDiscussions() {
    return hasDiscussions;
  }


  public void setHasDiscussions(Boolean hasDiscussions) {
    this.hasDiscussions = hasDiscussions;
  }


  public Repository12 homepage(String homepage) {
    
    this.homepage = homepage;
    return this;
  }

   /**
   * Get homepage
   * @return homepage
  **/
  @javax.annotation.Nullable

  public String getHomepage() {
    return homepage;
  }


  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public Repository12 hooksUrl(URI hooksUrl) {
    
    this.hooksUrl = hooksUrl;
    return this;
  }

   /**
   * Get hooksUrl
   * @return hooksUrl
  **/
  @javax.annotation.Nonnull

  public URI getHooksUrl() {
    return hooksUrl;
  }


  public void setHooksUrl(URI hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public Repository12 htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Repository12 id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the repository
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Repository12 isTemplate(Boolean isTemplate) {
    
    this.isTemplate = isTemplate;
    return this;
  }

   /**
   * Get isTemplate
   * @return isTemplate
  **/
  @javax.annotation.Nullable

  public Boolean getIsTemplate() {
    return isTemplate;
  }


  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public Repository12 issueCommentUrl(String issueCommentUrl) {
    
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

   /**
   * Get issueCommentUrl
   * @return issueCommentUrl
  **/
  @javax.annotation.Nonnull

  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }


  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public Repository12 issueEventsUrl(String issueEventsUrl) {
    
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

   /**
   * Get issueEventsUrl
   * @return issueEventsUrl
  **/
  @javax.annotation.Nonnull

  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }


  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public Repository12 issuesUrl(String issuesUrl) {
    
    this.issuesUrl = issuesUrl;
    return this;
  }

   /**
   * Get issuesUrl
   * @return issuesUrl
  **/
  @javax.annotation.Nonnull

  public String getIssuesUrl() {
    return issuesUrl;
  }


  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public Repository12 keysUrl(String keysUrl) {
    
    this.keysUrl = keysUrl;
    return this;
  }

   /**
   * Get keysUrl
   * @return keysUrl
  **/
  @javax.annotation.Nonnull

  public String getKeysUrl() {
    return keysUrl;
  }


  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public Repository12 labelsUrl(String labelsUrl) {
    
    this.labelsUrl = labelsUrl;
    return this;
  }

   /**
   * Get labelsUrl
   * @return labelsUrl
  **/
  @javax.annotation.Nonnull

  public String getLabelsUrl() {
    return labelsUrl;
  }


  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public Repository12 language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public Repository12 languagesUrl(URI languagesUrl) {
    
    this.languagesUrl = languagesUrl;
    return this;
  }

   /**
   * Get languagesUrl
   * @return languagesUrl
  **/
  @javax.annotation.Nonnull

  public URI getLanguagesUrl() {
    return languagesUrl;
  }


  public void setLanguagesUrl(URI languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public Repository12 license(License license) {
    
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nullable

  public License getLicense() {
    return license;
  }


  public void setLicense(License license) {
    this.license = license;
  }


  public Repository12 masterBranch(String masterBranch) {
    
    this.masterBranch = masterBranch;
    return this;
  }

   /**
   * Get masterBranch
   * @return masterBranch
  **/
  @javax.annotation.Nullable

  public String getMasterBranch() {
    return masterBranch;
  }


  public void setMasterBranch(String masterBranch) {
    this.masterBranch = masterBranch;
  }


  public Repository12 mergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    
    this.mergeCommitMessage = mergeCommitMessage;
    return this;
  }

   /**
   * The default value for a merge commit message.
   * @return mergeCommitMessage
  **/
  @javax.annotation.Nullable

  public MergeCommitMessageEnum getMergeCommitMessage() {
    return mergeCommitMessage;
  }


  public void setMergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
  }


  public Repository12 mergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    
    this.mergeCommitTitle = mergeCommitTitle;
    return this;
  }

   /**
   * The default value for a merge commit message title.
   * @return mergeCommitTitle
  **/
  @javax.annotation.Nullable

  public MergeCommitTitleEnum getMergeCommitTitle() {
    return mergeCommitTitle;
  }


  public void setMergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    this.mergeCommitTitle = mergeCommitTitle;
  }


  public Repository12 mergesUrl(URI mergesUrl) {
    
    this.mergesUrl = mergesUrl;
    return this;
  }

   /**
   * Get mergesUrl
   * @return mergesUrl
  **/
  @javax.annotation.Nonnull

  public URI getMergesUrl() {
    return mergesUrl;
  }


  public void setMergesUrl(URI mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public Repository12 milestonesUrl(String milestonesUrl) {
    
    this.milestonesUrl = milestonesUrl;
    return this;
  }

   /**
   * Get milestonesUrl
   * @return milestonesUrl
  **/
  @javax.annotation.Nonnull

  public String getMilestonesUrl() {
    return milestonesUrl;
  }


  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public Repository12 mirrorUrl(URI mirrorUrl) {
    
    this.mirrorUrl = mirrorUrl;
    return this;
  }

   /**
   * Get mirrorUrl
   * @return mirrorUrl
  **/
  @javax.annotation.Nullable

  public URI getMirrorUrl() {
    return mirrorUrl;
  }


  public void setMirrorUrl(URI mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
  }


  public Repository12 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the repository.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Repository12 nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public Repository12 notificationsUrl(String notificationsUrl) {
    
    this.notificationsUrl = notificationsUrl;
    return this;
  }

   /**
   * Get notificationsUrl
   * @return notificationsUrl
  **/
  @javax.annotation.Nonnull

  public String getNotificationsUrl() {
    return notificationsUrl;
  }


  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public Repository12 openIssues(Integer openIssues) {
    
    this.openIssues = openIssues;
    return this;
  }

   /**
   * Get openIssues
   * @return openIssues
  **/
  @javax.annotation.Nonnull

  public Integer getOpenIssues() {
    return openIssues;
  }


  public void setOpenIssues(Integer openIssues) {
    this.openIssues = openIssues;
  }


  public Repository12 openIssuesCount(Integer openIssuesCount) {
    
    this.openIssuesCount = openIssuesCount;
    return this;
  }

   /**
   * Get openIssuesCount
   * @return openIssuesCount
  **/
  @javax.annotation.Nonnull

  public Integer getOpenIssuesCount() {
    return openIssuesCount;
  }


  public void setOpenIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public Repository12 organization(String organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable

  public String getOrganization() {
    return organization;
  }


  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public Repository12 owner(User owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable

  public User getOwner() {
    return owner;
  }


  public void setOwner(User owner) {
    this.owner = owner;
  }


  public Repository12 permissions(RepositoryPermissions permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable

  public RepositoryPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(RepositoryPermissions permissions) {
    this.permissions = permissions;
  }


  public Repository12 _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Whether the repository is private or public.
   * @return _private
  **/
  @javax.annotation.Nonnull

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public Repository12 _public(Boolean _public) {
    
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @javax.annotation.Nullable

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public Repository12 pullsUrl(String pullsUrl) {
    
    this.pullsUrl = pullsUrl;
    return this;
  }

   /**
   * Get pullsUrl
   * @return pullsUrl
  **/
  @javax.annotation.Nonnull

  public String getPullsUrl() {
    return pullsUrl;
  }


  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public Repository12 pushedAt(RepositoryPushedAt pushedAt) {
    
    this.pushedAt = pushedAt;
    return this;
  }

   /**
   * Get pushedAt
   * @return pushedAt
  **/
  @javax.annotation.Nullable

  public RepositoryPushedAt getPushedAt() {
    return pushedAt;
  }


  public void setPushedAt(RepositoryPushedAt pushedAt) {
    this.pushedAt = pushedAt;
  }


  public Repository12 releasesUrl(String releasesUrl) {
    
    this.releasesUrl = releasesUrl;
    return this;
  }

   /**
   * Get releasesUrl
   * @return releasesUrl
  **/
  @javax.annotation.Nonnull

  public String getReleasesUrl() {
    return releasesUrl;
  }


  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public Repository12 roleName(String roleName) {
    
    this.roleName = roleName;
    return this;
  }

   /**
   * Get roleName
   * @return roleName
  **/
  @javax.annotation.Nullable

  public String getRoleName() {
    return roleName;
  }


  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public Repository12 size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public Repository12 squashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    
    this.squashMergeCommitMessage = squashMergeCommitMessage;
    return this;
  }

   /**
   * The default value for a squash merge commit message:  - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return squashMergeCommitMessage
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
    return squashMergeCommitMessage;
  }


  public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    this.squashMergeCommitMessage = squashMergeCommitMessage;
  }


  public Repository12 squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    
    this.squashMergeCommitTitle = squashMergeCommitTitle;
    return this;
  }

   /**
   * The default value for a squash merge commit title:  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   * @return squashMergeCommitTitle
  **/
  @javax.annotation.Nullable

  public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
    return squashMergeCommitTitle;
  }


  public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    this.squashMergeCommitTitle = squashMergeCommitTitle;
  }


  public Repository12 sshUrl(String sshUrl) {
    
    this.sshUrl = sshUrl;
    return this;
  }

   /**
   * Get sshUrl
   * @return sshUrl
  **/
  @javax.annotation.Nonnull

  public String getSshUrl() {
    return sshUrl;
  }


  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }


  public Repository12 stargazers(Integer stargazers) {
    
    this.stargazers = stargazers;
    return this;
  }

   /**
   * Get stargazers
   * @return stargazers
  **/
  @javax.annotation.Nullable

  public Integer getStargazers() {
    return stargazers;
  }


  public void setStargazers(Integer stargazers) {
    this.stargazers = stargazers;
  }


  public Repository12 stargazersCount(Integer stargazersCount) {
    
    this.stargazersCount = stargazersCount;
    return this;
  }

   /**
   * Get stargazersCount
   * @return stargazersCount
  **/
  @javax.annotation.Nonnull

  public Integer getStargazersCount() {
    return stargazersCount;
  }


  public void setStargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
  }


  public Repository12 stargazersUrl(URI stargazersUrl) {
    
    this.stargazersUrl = stargazersUrl;
    return this;
  }

   /**
   * Get stargazersUrl
   * @return stargazersUrl
  **/
  @javax.annotation.Nonnull

  public URI getStargazersUrl() {
    return stargazersUrl;
  }


  public void setStargazersUrl(URI stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public Repository12 statusesUrl(String statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nonnull

  public String getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public Repository12 subscribersUrl(URI subscribersUrl) {
    
    this.subscribersUrl = subscribersUrl;
    return this;
  }

   /**
   * Get subscribersUrl
   * @return subscribersUrl
  **/
  @javax.annotation.Nonnull

  public URI getSubscribersUrl() {
    return subscribersUrl;
  }


  public void setSubscribersUrl(URI subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public Repository12 subscriptionUrl(URI subscriptionUrl) {
    
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

   /**
   * Get subscriptionUrl
   * @return subscriptionUrl
  **/
  @javax.annotation.Nonnull

  public URI getSubscriptionUrl() {
    return subscriptionUrl;
  }


  public void setSubscriptionUrl(URI subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public Repository12 svnUrl(URI svnUrl) {
    
    this.svnUrl = svnUrl;
    return this;
  }

   /**
   * Get svnUrl
   * @return svnUrl
  **/
  @javax.annotation.Nonnull

  public URI getSvnUrl() {
    return svnUrl;
  }


  public void setSvnUrl(URI svnUrl) {
    this.svnUrl = svnUrl;
  }


  public Repository12 tagsUrl(URI tagsUrl) {
    
    this.tagsUrl = tagsUrl;
    return this;
  }

   /**
   * Get tagsUrl
   * @return tagsUrl
  **/
  @javax.annotation.Nonnull

  public URI getTagsUrl() {
    return tagsUrl;
  }


  public void setTagsUrl(URI tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public Repository12 teamsUrl(URI teamsUrl) {
    
    this.teamsUrl = teamsUrl;
    return this;
  }

   /**
   * Get teamsUrl
   * @return teamsUrl
  **/
  @javax.annotation.Nonnull

  public URI getTeamsUrl() {
    return teamsUrl;
  }


  public void setTeamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public Repository12 topics(List<String> topics) {
    
    this.topics = topics;
    return this;
  }

  public Repository12 addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @javax.annotation.Nonnull

  public List<String> getTopics() {
    return topics;
  }


  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public Repository12 treesUrl(String treesUrl) {
    
    this.treesUrl = treesUrl;
    return this;
  }

   /**
   * Get treesUrl
   * @return treesUrl
  **/
  @javax.annotation.Nonnull

  public String getTreesUrl() {
    return treesUrl;
  }


  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public Repository12 updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Repository12 url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public Repository12 useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    return this;
  }

   /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use &#x60;squash_merge_commit_title&#x60; instead.
   * @return useSquashPrTitleAsDefault
  **/
  @javax.annotation.Nullable

  public Boolean getUseSquashPrTitleAsDefault() {
    return useSquashPrTitleAsDefault;
  }


  public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
  }


  public Repository12 visibility(VisibilityEnum visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @javax.annotation.Nonnull

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public Repository12 watchers(Integer watchers) {
    
    this.watchers = watchers;
    return this;
  }

   /**
   * Get watchers
   * @return watchers
  **/
  @javax.annotation.Nonnull

  public Integer getWatchers() {
    return watchers;
  }


  public void setWatchers(Integer watchers) {
    this.watchers = watchers;
  }


  public Repository12 watchersCount(Integer watchersCount) {
    
    this.watchersCount = watchersCount;
    return this;
  }

   /**
   * Get watchersCount
   * @return watchersCount
  **/
  @javax.annotation.Nonnull

  public Integer getWatchersCount() {
    return watchersCount;
  }


  public void setWatchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
  }


  public Repository12 webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
    
    this.webCommitSignoffRequired = webCommitSignoffRequired;
    return this;
  }

   /**
   * Whether to require contributors to sign off on web-based commits
   * @return webCommitSignoffRequired
  **/
  @javax.annotation.Nullable

  public Boolean getWebCommitSignoffRequired() {
    return webCommitSignoffRequired;
  }


  public void setWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
    this.webCommitSignoffRequired = webCommitSignoffRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository12 repository12 = (Repository12) o;
    return Objects.equals(this.allowAutoMerge, repository12.allowAutoMerge) &&
        Objects.equals(this.allowForking, repository12.allowForking) &&
        Objects.equals(this.allowMergeCommit, repository12.allowMergeCommit) &&
        Objects.equals(this.allowRebaseMerge, repository12.allowRebaseMerge) &&
        Objects.equals(this.allowSquashMerge, repository12.allowSquashMerge) &&
        Objects.equals(this.allowUpdateBranch, repository12.allowUpdateBranch) &&
        Objects.equals(this.archiveUrl, repository12.archiveUrl) &&
        Objects.equals(this.archived, repository12.archived) &&
        Objects.equals(this.assigneesUrl, repository12.assigneesUrl) &&
        Objects.equals(this.blobsUrl, repository12.blobsUrl) &&
        Objects.equals(this.branchesUrl, repository12.branchesUrl) &&
        Objects.equals(this.cloneUrl, repository12.cloneUrl) &&
        Objects.equals(this.collaboratorsUrl, repository12.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, repository12.commentsUrl) &&
        Objects.equals(this.commitsUrl, repository12.commitsUrl) &&
        Objects.equals(this.compareUrl, repository12.compareUrl) &&
        Objects.equals(this.contentsUrl, repository12.contentsUrl) &&
        Objects.equals(this.contributorsUrl, repository12.contributorsUrl) &&
        Objects.equals(this.createdAt, repository12.createdAt) &&
        Objects.equals(this.defaultBranch, repository12.defaultBranch) &&
        Objects.equals(this.deleteBranchOnMerge, repository12.deleteBranchOnMerge) &&
        Objects.equals(this.deploymentsUrl, repository12.deploymentsUrl) &&
        Objects.equals(this.description, repository12.description) &&
        Objects.equals(this.disabled, repository12.disabled) &&
        Objects.equals(this.downloadsUrl, repository12.downloadsUrl) &&
        Objects.equals(this.eventsUrl, repository12.eventsUrl) &&
        Objects.equals(this.fork, repository12.fork) &&
        Objects.equals(this.forks, repository12.forks) &&
        Objects.equals(this.forksCount, repository12.forksCount) &&
        Objects.equals(this.forksUrl, repository12.forksUrl) &&
        Objects.equals(this.fullName, repository12.fullName) &&
        Objects.equals(this.gitCommitsUrl, repository12.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, repository12.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, repository12.gitTagsUrl) &&
        Objects.equals(this.gitUrl, repository12.gitUrl) &&
        Objects.equals(this.hasDownloads, repository12.hasDownloads) &&
        Objects.equals(this.hasIssues, repository12.hasIssues) &&
        Objects.equals(this.hasPages, repository12.hasPages) &&
        Objects.equals(this.hasProjects, repository12.hasProjects) &&
        Objects.equals(this.hasWiki, repository12.hasWiki) &&
        Objects.equals(this.hasDiscussions, repository12.hasDiscussions) &&
        Objects.equals(this.homepage, repository12.homepage) &&
        Objects.equals(this.hooksUrl, repository12.hooksUrl) &&
        Objects.equals(this.htmlUrl, repository12.htmlUrl) &&
        Objects.equals(this.id, repository12.id) &&
        Objects.equals(this.isTemplate, repository12.isTemplate) &&
        Objects.equals(this.issueCommentUrl, repository12.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, repository12.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, repository12.issuesUrl) &&
        Objects.equals(this.keysUrl, repository12.keysUrl) &&
        Objects.equals(this.labelsUrl, repository12.labelsUrl) &&
        Objects.equals(this.language, repository12.language) &&
        Objects.equals(this.languagesUrl, repository12.languagesUrl) &&
        Objects.equals(this.license, repository12.license) &&
        Objects.equals(this.masterBranch, repository12.masterBranch) &&
        Objects.equals(this.mergeCommitMessage, repository12.mergeCommitMessage) &&
        Objects.equals(this.mergeCommitTitle, repository12.mergeCommitTitle) &&
        Objects.equals(this.mergesUrl, repository12.mergesUrl) &&
        Objects.equals(this.milestonesUrl, repository12.milestonesUrl) &&
        Objects.equals(this.mirrorUrl, repository12.mirrorUrl) &&
        Objects.equals(this.name, repository12.name) &&
        Objects.equals(this.nodeId, repository12.nodeId) &&
        Objects.equals(this.notificationsUrl, repository12.notificationsUrl) &&
        Objects.equals(this.openIssues, repository12.openIssues) &&
        Objects.equals(this.openIssuesCount, repository12.openIssuesCount) &&
        Objects.equals(this.organization, repository12.organization) &&
        Objects.equals(this.owner, repository12.owner) &&
        Objects.equals(this.permissions, repository12.permissions) &&
        Objects.equals(this._private, repository12._private) &&
        Objects.equals(this._public, repository12._public) &&
        Objects.equals(this.pullsUrl, repository12.pullsUrl) &&
        Objects.equals(this.pushedAt, repository12.pushedAt) &&
        Objects.equals(this.releasesUrl, repository12.releasesUrl) &&
        Objects.equals(this.roleName, repository12.roleName) &&
        Objects.equals(this.size, repository12.size) &&
        Objects.equals(this.squashMergeCommitMessage, repository12.squashMergeCommitMessage) &&
        Objects.equals(this.squashMergeCommitTitle, repository12.squashMergeCommitTitle) &&
        Objects.equals(this.sshUrl, repository12.sshUrl) &&
        Objects.equals(this.stargazers, repository12.stargazers) &&
        Objects.equals(this.stargazersCount, repository12.stargazersCount) &&
        Objects.equals(this.stargazersUrl, repository12.stargazersUrl) &&
        Objects.equals(this.statusesUrl, repository12.statusesUrl) &&
        Objects.equals(this.subscribersUrl, repository12.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, repository12.subscriptionUrl) &&
        Objects.equals(this.svnUrl, repository12.svnUrl) &&
        Objects.equals(this.tagsUrl, repository12.tagsUrl) &&
        Objects.equals(this.teamsUrl, repository12.teamsUrl) &&
        Objects.equals(this.topics, repository12.topics) &&
        Objects.equals(this.treesUrl, repository12.treesUrl) &&
        Objects.equals(this.updatedAt, repository12.updatedAt) &&
        Objects.equals(this.url, repository12.url) &&
        Objects.equals(this.useSquashPrTitleAsDefault, repository12.useSquashPrTitleAsDefault) &&
        Objects.equals(this.visibility, repository12.visibility) &&
        Objects.equals(this.watchers, repository12.watchers) &&
        Objects.equals(this.watchersCount, repository12.watchersCount) &&
        Objects.equals(this.webCommitSignoffRequired, repository12.webCommitSignoffRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAutoMerge, allowForking, allowMergeCommit, allowRebaseMerge, allowSquashMerge, allowUpdateBranch, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deleteBranchOnMerge, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, hasDiscussions, homepage, hooksUrl, htmlUrl, id, isTemplate, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, masterBranch, mergeCommitMessage, mergeCommitTitle, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, organization, owner, permissions, _private, _public, pullsUrl, pushedAt, releasesUrl, roleName, size, squashMergeCommitMessage, squashMergeCommitTitle, sshUrl, stargazers, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, useSquashPrTitleAsDefault, visibility, watchers, watchersCount, webCommitSignoffRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository12 {\n");
    sb.append("    allowAutoMerge: ").append(toIndentedString(allowAutoMerge)).append("\n");
    sb.append("    allowForking: ").append(toIndentedString(allowForking)).append("\n");
    sb.append("    allowMergeCommit: ").append(toIndentedString(allowMergeCommit)).append("\n");
    sb.append("    allowRebaseMerge: ").append(toIndentedString(allowRebaseMerge)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    allowUpdateBranch: ").append(toIndentedString(allowUpdateBranch)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    cloneUrl: ").append(toIndentedString(cloneUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hasDownloads: ").append(toIndentedString(hasDownloads)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasPages: ").append(toIndentedString(hasPages)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    hasDiscussions: ").append(toIndentedString(hasDiscussions)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    masterBranch: ").append(toIndentedString(masterBranch)).append("\n");
    sb.append("    mergeCommitMessage: ").append(toIndentedString(mergeCommitMessage)).append("\n");
    sb.append("    mergeCommitTitle: ").append(toIndentedString(mergeCommitTitle)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    mirrorUrl: ").append(toIndentedString(mirrorUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    openIssues: ").append(toIndentedString(openIssues)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    squashMergeCommitMessage: ").append(toIndentedString(squashMergeCommitMessage)).append("\n");
    sb.append("    squashMergeCommitTitle: ").append(toIndentedString(squashMergeCommitTitle)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    stargazers: ").append(toIndentedString(stargazers)).append("\n");
    sb.append("    stargazersCount: ").append(toIndentedString(stargazersCount)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    svnUrl: ").append(toIndentedString(svnUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useSquashPrTitleAsDefault: ").append(toIndentedString(useSquashPrTitleAsDefault)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("    watchersCount: ").append(toIndentedString(watchersCount)).append("\n");
    sb.append("    webCommitSignoffRequired: ").append(toIndentedString(webCommitSignoffRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_auto_merge");
    openapiFields.add("allow_forking");
    openapiFields.add("allow_merge_commit");
    openapiFields.add("allow_rebase_merge");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("allow_update_branch");
    openapiFields.add("archive_url");
    openapiFields.add("archived");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("clone_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("created_at");
    openapiFields.add("default_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks");
    openapiFields.add("forks_count");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("git_url");
    openapiFields.add("has_downloads");
    openapiFields.add("has_issues");
    openapiFields.add("has_pages");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("has_discussions");
    openapiFields.add("homepage");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_template");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("language");
    openapiFields.add("languages_url");
    openapiFields.add("license");
    openapiFields.add("master_branch");
    openapiFields.add("merge_commit_message");
    openapiFields.add("merge_commit_title");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("mirror_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("open_issues");
    openapiFields.add("open_issues_count");
    openapiFields.add("organization");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("private");
    openapiFields.add("public");
    openapiFields.add("pulls_url");
    openapiFields.add("pushed_at");
    openapiFields.add("releases_url");
    openapiFields.add("role_name");
    openapiFields.add("size");
    openapiFields.add("squash_merge_commit_message");
    openapiFields.add("squash_merge_commit_title");
    openapiFields.add("ssh_url");
    openapiFields.add("stargazers");
    openapiFields.add("stargazers_count");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("svn_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("topics");
    openapiFields.add("trees_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("use_squash_pr_title_as_default");
    openapiFields.add("visibility");
    openapiFields.add("watchers");
    openapiFields.add("watchers_count");
    openapiFields.add("web_commit_signoff_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archive_url");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("assignees_url");
    openapiRequiredFields.add("blobs_url");
    openapiRequiredFields.add("branches_url");
    openapiRequiredFields.add("clone_url");
    openapiRequiredFields.add("collaborators_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("compare_url");
    openapiRequiredFields.add("contents_url");
    openapiRequiredFields.add("contributors_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("default_branch");
    openapiRequiredFields.add("deployments_url");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("downloads_url");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("fork");
    openapiRequiredFields.add("forks");
    openapiRequiredFields.add("forks_count");
    openapiRequiredFields.add("forks_url");
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("git_commits_url");
    openapiRequiredFields.add("git_refs_url");
    openapiRequiredFields.add("git_tags_url");
    openapiRequiredFields.add("git_url");
    openapiRequiredFields.add("has_downloads");
    openapiRequiredFields.add("has_issues");
    openapiRequiredFields.add("has_pages");
    openapiRequiredFields.add("has_projects");
    openapiRequiredFields.add("has_wiki");
    openapiRequiredFields.add("has_discussions");
    openapiRequiredFields.add("homepage");
    openapiRequiredFields.add("hooks_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issue_comment_url");
    openapiRequiredFields.add("issue_events_url");
    openapiRequiredFields.add("issues_url");
    openapiRequiredFields.add("keys_url");
    openapiRequiredFields.add("labels_url");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("languages_url");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("merges_url");
    openapiRequiredFields.add("milestones_url");
    openapiRequiredFields.add("mirror_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("notifications_url");
    openapiRequiredFields.add("open_issues");
    openapiRequiredFields.add("open_issues_count");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("private");
    openapiRequiredFields.add("pulls_url");
    openapiRequiredFields.add("pushed_at");
    openapiRequiredFields.add("releases_url");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("ssh_url");
    openapiRequiredFields.add("stargazers_count");
    openapiRequiredFields.add("stargazers_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("subscribers_url");
    openapiRequiredFields.add("subscription_url");
    openapiRequiredFields.add("svn_url");
    openapiRequiredFields.add("tags_url");
    openapiRequiredFields.add("teams_url");
    openapiRequiredFields.add("topics");
    openapiRequiredFields.add("trees_url");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("visibility");
    openapiRequiredFields.add("watchers");
    openapiRequiredFields.add("watchers_count");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Repository12
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Repository12.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository12 is not found in the empty JSON string", Repository12.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Repository12.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository12` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Repository12.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if (!jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if (!jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if (!jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if (!jsonObj.get("clone_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_url").toString()));
      }
      if (!jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if (!jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if (!jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      // validate the required field `created_at`
      RepositoryCreatedAt.validateJsonObject(jsonObj.getAsJsonObject("created_at"));
      if (!jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if (!jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (!jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if (!jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if (!jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if (!jsonObj.get("git_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_url").toString()));
      }
      if (!jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if (!jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if (!jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if (!jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if (!jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if (!jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      // validate the required field `license`
      License.validateJsonObject(jsonObj.getAsJsonObject("license"));
      if ((jsonObj.get("master_branch") != null && !jsonObj.get("master_branch").isJsonNull()) && !jsonObj.get("master_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_branch").toString()));
      }
      if ((jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) && !jsonObj.get("merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_message").toString()));
      }
      if ((jsonObj.get("merge_commit_title") != null && !jsonObj.get("merge_commit_title").isJsonNull()) && !jsonObj.get("merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_title").toString()));
      }
      if (!jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if (!jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if (!jsonObj.get("mirror_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirror_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirror_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      // validate the required field `owner`
      User.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        RepositoryPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
      if (!jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      // validate the required field `pushed_at`
      RepositoryPushedAt.validateJsonObject(jsonObj.getAsJsonObject("pushed_at"));
      if (!jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if ((jsonObj.get("role_name") != null && !jsonObj.get("role_name").isJsonNull()) && !jsonObj.get("role_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_name").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_message") != null && !jsonObj.get("squash_merge_commit_message").isJsonNull()) && !jsonObj.get("squash_merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_message").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_title") != null && !jsonObj.get("squash_merge_commit_title").isJsonNull()) && !jsonObj.get("squash_merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_title").toString()));
      }
      if (!jsonObj.get("ssh_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url").toString()));
      }
      if (!jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if (!jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if (!jsonObj.get("svn_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svn_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svn_url").toString()));
      }
      if (!jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if (!jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("topics") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if (!jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository12.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository12' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository12> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository12.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository12>() {
           @Override
           public void write(JsonWriter out, Repository12 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository12 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Repository12 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Repository12
  * @throws IOException if the JSON string is invalid with respect to Repository12
  */
  public static Repository12 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository12.class);
  }

 /**
  * Convert an instance of Repository12 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

