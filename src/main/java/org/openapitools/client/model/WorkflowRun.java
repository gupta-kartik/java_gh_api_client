/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DeploymentWorkflowRunReferencedWorkflowsInner;
import org.openapitools.client.model.RepositoryLite;
import org.openapitools.client.model.SimpleCommit;
import org.openapitools.client.model.User;
import org.openapitools.client.model.WorkflowRunPullRequestsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WorkflowRun {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private User actor;

  public static final String SERIALIZED_NAME_ARTIFACTS_URL = "artifacts_url";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_URL)
  private URI artifactsUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancel_url";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private URI cancelUrl;

  public static final String SERIALIZED_NAME_CHECK_SUITE_ID = "check_suite_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_ID)
  private Integer checkSuiteId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_NODE_ID = "check_suite_node_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_NODE_ID)
  private String checkSuiteNodeId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_URL = "check_suite_url";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_URL)
  private URI checkSuiteUrl;

  /**
   * Gets or Sets conclusion
   */
  @JsonAdapter(ConclusionEnum.Adapter.class)
  public enum ConclusionEnum {
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    NEUTRAL("neutral"),
    
    CANCELLED("cancelled"),
    
    TIMED_OUT("timed_out"),
    
    ACTION_REQUIRED("action_required"),
    
    STALE("stale"),
    
    NULL("null"),
    
    SKIPPED("skipped");

    private String value;

    ConclusionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConclusionEnum fromValue(String value) {
      for (ConclusionEnum b : ConclusionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConclusionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConclusionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConclusionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConclusionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONCLUSION = "conclusion";
  @SerializedName(SERIALIZED_NAME_CONCLUSION)
  private ConclusionEnum conclusion;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_HEAD_BRANCH = "head_branch";
  @SerializedName(SERIALIZED_NAME_HEAD_BRANCH)
  private String headBranch;

  public static final String SERIALIZED_NAME_HEAD_COMMIT = "head_commit";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT)
  private SimpleCommit headCommit;

  public static final String SERIALIZED_NAME_HEAD_REPOSITORY = "head_repository";
  @SerializedName(SERIALIZED_NAME_HEAD_REPOSITORY)
  private RepositoryLite headRepository;

  public static final String SERIALIZED_NAME_HEAD_SHA = "head_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_SHA)
  private String headSha;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JOBS_URL = "jobs_url";
  @SerializedName(SERIALIZED_NAME_JOBS_URL)
  private URI jobsUrl;

  public static final String SERIALIZED_NAME_LOGS_URL = "logs_url";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private URI logsUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL = "previous_attempt_url";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL)
  private URI previousAttemptUrl;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private List<WorkflowRunPullRequestsInner> pullRequests = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCED_WORKFLOWS = "referenced_workflows";
  @SerializedName(SERIALIZED_NAME_REFERENCED_WORKFLOWS)
  private List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private RepositoryLite repository;

  public static final String SERIALIZED_NAME_RERUN_URL = "rerun_url";
  @SerializedName(SERIALIZED_NAME_RERUN_URL)
  private URI rerunUrl;

  public static final String SERIALIZED_NAME_RUN_ATTEMPT = "run_attempt";
  @SerializedName(SERIALIZED_NAME_RUN_ATTEMPT)
  private Integer runAttempt;

  public static final String SERIALIZED_NAME_RUN_NUMBER = "run_number";
  @SerializedName(SERIALIZED_NAME_RUN_NUMBER)
  private Integer runNumber;

  public static final String SERIALIZED_NAME_RUN_STARTED_AT = "run_started_at";
  @SerializedName(SERIALIZED_NAME_RUN_STARTED_AT)
  private OffsetDateTime runStartedAt;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    REQUESTED("requested"),
    
    IN_PROGRESS("in_progress"),
    
    COMPLETED("completed"),
    
    QUEUED("queued"),
    
    PENDING("pending"),
    
    WAITING("waiting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRIGGERING_ACTOR = "triggering_actor";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_ACTOR)
  private User triggeringActor;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflow_id";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private Integer workflowId;

  public static final String SERIALIZED_NAME_WORKFLOW_URL = "workflow_url";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_URL)
  private URI workflowUrl;

  public WorkflowRun() {
  }

  public WorkflowRun actor(User actor) {
    
    this.actor = actor;
    return this;
  }

   /**
   * Get actor
   * @return actor
  **/
  @javax.annotation.Nullable

  public User getActor() {
    return actor;
  }


  public void setActor(User actor) {
    this.actor = actor;
  }


  public WorkflowRun artifactsUrl(URI artifactsUrl) {
    
    this.artifactsUrl = artifactsUrl;
    return this;
  }

   /**
   * Get artifactsUrl
   * @return artifactsUrl
  **/
  @javax.annotation.Nonnull

  public URI getArtifactsUrl() {
    return artifactsUrl;
  }


  public void setArtifactsUrl(URI artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
  }


  public WorkflowRun cancelUrl(URI cancelUrl) {
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * Get cancelUrl
   * @return cancelUrl
  **/
  @javax.annotation.Nonnull

  public URI getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(URI cancelUrl) {
    this.cancelUrl = cancelUrl;
  }


  public WorkflowRun checkSuiteId(Integer checkSuiteId) {
    
    this.checkSuiteId = checkSuiteId;
    return this;
  }

   /**
   * Get checkSuiteId
   * @return checkSuiteId
  **/
  @javax.annotation.Nonnull

  public Integer getCheckSuiteId() {
    return checkSuiteId;
  }


  public void setCheckSuiteId(Integer checkSuiteId) {
    this.checkSuiteId = checkSuiteId;
  }


  public WorkflowRun checkSuiteNodeId(String checkSuiteNodeId) {
    
    this.checkSuiteNodeId = checkSuiteNodeId;
    return this;
  }

   /**
   * Get checkSuiteNodeId
   * @return checkSuiteNodeId
  **/
  @javax.annotation.Nonnull

  public String getCheckSuiteNodeId() {
    return checkSuiteNodeId;
  }


  public void setCheckSuiteNodeId(String checkSuiteNodeId) {
    this.checkSuiteNodeId = checkSuiteNodeId;
  }


  public WorkflowRun checkSuiteUrl(URI checkSuiteUrl) {
    
    this.checkSuiteUrl = checkSuiteUrl;
    return this;
  }

   /**
   * Get checkSuiteUrl
   * @return checkSuiteUrl
  **/
  @javax.annotation.Nonnull

  public URI getCheckSuiteUrl() {
    return checkSuiteUrl;
  }


  public void setCheckSuiteUrl(URI checkSuiteUrl) {
    this.checkSuiteUrl = checkSuiteUrl;
  }


  public WorkflowRun conclusion(ConclusionEnum conclusion) {
    
    this.conclusion = conclusion;
    return this;
  }

   /**
   * Get conclusion
   * @return conclusion
  **/
  @javax.annotation.Nullable

  public ConclusionEnum getConclusion() {
    return conclusion;
  }


  public void setConclusion(ConclusionEnum conclusion) {
    this.conclusion = conclusion;
  }


  public WorkflowRun createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WorkflowRun event(String event) {
    
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nonnull

  public String getEvent() {
    return event;
  }


  public void setEvent(String event) {
    this.event = event;
  }


  public WorkflowRun headBranch(String headBranch) {
    
    this.headBranch = headBranch;
    return this;
  }

   /**
   * Get headBranch
   * @return headBranch
  **/
  @javax.annotation.Nullable

  public String getHeadBranch() {
    return headBranch;
  }


  public void setHeadBranch(String headBranch) {
    this.headBranch = headBranch;
  }


  public WorkflowRun headCommit(SimpleCommit headCommit) {
    
    this.headCommit = headCommit;
    return this;
  }

   /**
   * Get headCommit
   * @return headCommit
  **/
  @javax.annotation.Nonnull

  public SimpleCommit getHeadCommit() {
    return headCommit;
  }


  public void setHeadCommit(SimpleCommit headCommit) {
    this.headCommit = headCommit;
  }


  public WorkflowRun headRepository(RepositoryLite headRepository) {
    
    this.headRepository = headRepository;
    return this;
  }

   /**
   * Get headRepository
   * @return headRepository
  **/
  @javax.annotation.Nonnull

  public RepositoryLite getHeadRepository() {
    return headRepository;
  }


  public void setHeadRepository(RepositoryLite headRepository) {
    this.headRepository = headRepository;
  }


  public WorkflowRun headSha(String headSha) {
    
    this.headSha = headSha;
    return this;
  }

   /**
   * Get headSha
   * @return headSha
  **/
  @javax.annotation.Nonnull

  public String getHeadSha() {
    return headSha;
  }


  public void setHeadSha(String headSha) {
    this.headSha = headSha;
  }


  public WorkflowRun htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WorkflowRun id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WorkflowRun jobsUrl(URI jobsUrl) {
    
    this.jobsUrl = jobsUrl;
    return this;
  }

   /**
   * Get jobsUrl
   * @return jobsUrl
  **/
  @javax.annotation.Nonnull

  public URI getJobsUrl() {
    return jobsUrl;
  }


  public void setJobsUrl(URI jobsUrl) {
    this.jobsUrl = jobsUrl;
  }


  public WorkflowRun logsUrl(URI logsUrl) {
    
    this.logsUrl = logsUrl;
    return this;
  }

   /**
   * Get logsUrl
   * @return logsUrl
  **/
  @javax.annotation.Nonnull

  public URI getLogsUrl() {
    return logsUrl;
  }


  public void setLogsUrl(URI logsUrl) {
    this.logsUrl = logsUrl;
  }


  public WorkflowRun name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WorkflowRun nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WorkflowRun path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nonnull

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public WorkflowRun previousAttemptUrl(URI previousAttemptUrl) {
    
    this.previousAttemptUrl = previousAttemptUrl;
    return this;
  }

   /**
   * Get previousAttemptUrl
   * @return previousAttemptUrl
  **/
  @javax.annotation.Nullable

  public URI getPreviousAttemptUrl() {
    return previousAttemptUrl;
  }


  public void setPreviousAttemptUrl(URI previousAttemptUrl) {
    this.previousAttemptUrl = previousAttemptUrl;
  }


  public WorkflowRun pullRequests(List<WorkflowRunPullRequestsInner> pullRequests) {
    
    this.pullRequests = pullRequests;
    return this;
  }

  public WorkflowRun addPullRequestsItem(WorkflowRunPullRequestsInner pullRequestsItem) {
    if (this.pullRequests == null) {
      this.pullRequests = new ArrayList<>();
    }
    this.pullRequests.add(pullRequestsItem);
    return this;
  }

   /**
   * Get pullRequests
   * @return pullRequests
  **/
  @javax.annotation.Nonnull

  public List<WorkflowRunPullRequestsInner> getPullRequests() {
    return pullRequests;
  }


  public void setPullRequests(List<WorkflowRunPullRequestsInner> pullRequests) {
    this.pullRequests = pullRequests;
  }


  public WorkflowRun referencedWorkflows(List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows) {
    
    this.referencedWorkflows = referencedWorkflows;
    return this;
  }

  public WorkflowRun addReferencedWorkflowsItem(DeploymentWorkflowRunReferencedWorkflowsInner referencedWorkflowsItem) {
    if (this.referencedWorkflows == null) {
      this.referencedWorkflows = new ArrayList<>();
    }
    this.referencedWorkflows.add(referencedWorkflowsItem);
    return this;
  }

   /**
   * Get referencedWorkflows
   * @return referencedWorkflows
  **/
  @javax.annotation.Nullable

  public List<DeploymentWorkflowRunReferencedWorkflowsInner> getReferencedWorkflows() {
    return referencedWorkflows;
  }


  public void setReferencedWorkflows(List<DeploymentWorkflowRunReferencedWorkflowsInner> referencedWorkflows) {
    this.referencedWorkflows = referencedWorkflows;
  }


  public WorkflowRun repository(RepositoryLite repository) {
    
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @javax.annotation.Nonnull

  public RepositoryLite getRepository() {
    return repository;
  }


  public void setRepository(RepositoryLite repository) {
    this.repository = repository;
  }


  public WorkflowRun rerunUrl(URI rerunUrl) {
    
    this.rerunUrl = rerunUrl;
    return this;
  }

   /**
   * Get rerunUrl
   * @return rerunUrl
  **/
  @javax.annotation.Nonnull

  public URI getRerunUrl() {
    return rerunUrl;
  }


  public void setRerunUrl(URI rerunUrl) {
    this.rerunUrl = rerunUrl;
  }


  public WorkflowRun runAttempt(Integer runAttempt) {
    
    this.runAttempt = runAttempt;
    return this;
  }

   /**
   * Get runAttempt
   * @return runAttempt
  **/
  @javax.annotation.Nonnull

  public Integer getRunAttempt() {
    return runAttempt;
  }


  public void setRunAttempt(Integer runAttempt) {
    this.runAttempt = runAttempt;
  }


  public WorkflowRun runNumber(Integer runNumber) {
    
    this.runNumber = runNumber;
    return this;
  }

   /**
   * Get runNumber
   * @return runNumber
  **/
  @javax.annotation.Nonnull

  public Integer getRunNumber() {
    return runNumber;
  }


  public void setRunNumber(Integer runNumber) {
    this.runNumber = runNumber;
  }


  public WorkflowRun runStartedAt(OffsetDateTime runStartedAt) {
    
    this.runStartedAt = runStartedAt;
    return this;
  }

   /**
   * Get runStartedAt
   * @return runStartedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getRunStartedAt() {
    return runStartedAt;
  }


  public void setRunStartedAt(OffsetDateTime runStartedAt) {
    this.runStartedAt = runStartedAt;
  }


  public WorkflowRun status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WorkflowRun triggeringActor(User triggeringActor) {
    
    this.triggeringActor = triggeringActor;
    return this;
  }

   /**
   * Get triggeringActor
   * @return triggeringActor
  **/
  @javax.annotation.Nullable

  public User getTriggeringActor() {
    return triggeringActor;
  }


  public void setTriggeringActor(User triggeringActor) {
    this.triggeringActor = triggeringActor;
  }


  public WorkflowRun updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WorkflowRun url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public WorkflowRun workflowId(Integer workflowId) {
    
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Get workflowId
   * @return workflowId
  **/
  @javax.annotation.Nonnull

  public Integer getWorkflowId() {
    return workflowId;
  }


  public void setWorkflowId(Integer workflowId) {
    this.workflowId = workflowId;
  }


  public WorkflowRun workflowUrl(URI workflowUrl) {
    
    this.workflowUrl = workflowUrl;
    return this;
  }

   /**
   * Get workflowUrl
   * @return workflowUrl
  **/
  @javax.annotation.Nonnull

  public URI getWorkflowUrl() {
    return workflowUrl;
  }


  public void setWorkflowUrl(URI workflowUrl) {
    this.workflowUrl = workflowUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowRun workflowRun = (WorkflowRun) o;
    return Objects.equals(this.actor, workflowRun.actor) &&
        Objects.equals(this.artifactsUrl, workflowRun.artifactsUrl) &&
        Objects.equals(this.cancelUrl, workflowRun.cancelUrl) &&
        Objects.equals(this.checkSuiteId, workflowRun.checkSuiteId) &&
        Objects.equals(this.checkSuiteNodeId, workflowRun.checkSuiteNodeId) &&
        Objects.equals(this.checkSuiteUrl, workflowRun.checkSuiteUrl) &&
        Objects.equals(this.conclusion, workflowRun.conclusion) &&
        Objects.equals(this.createdAt, workflowRun.createdAt) &&
        Objects.equals(this.event, workflowRun.event) &&
        Objects.equals(this.headBranch, workflowRun.headBranch) &&
        Objects.equals(this.headCommit, workflowRun.headCommit) &&
        Objects.equals(this.headRepository, workflowRun.headRepository) &&
        Objects.equals(this.headSha, workflowRun.headSha) &&
        Objects.equals(this.htmlUrl, workflowRun.htmlUrl) &&
        Objects.equals(this.id, workflowRun.id) &&
        Objects.equals(this.jobsUrl, workflowRun.jobsUrl) &&
        Objects.equals(this.logsUrl, workflowRun.logsUrl) &&
        Objects.equals(this.name, workflowRun.name) &&
        Objects.equals(this.nodeId, workflowRun.nodeId) &&
        Objects.equals(this.path, workflowRun.path) &&
        Objects.equals(this.previousAttemptUrl, workflowRun.previousAttemptUrl) &&
        Objects.equals(this.pullRequests, workflowRun.pullRequests) &&
        Objects.equals(this.referencedWorkflows, workflowRun.referencedWorkflows) &&
        Objects.equals(this.repository, workflowRun.repository) &&
        Objects.equals(this.rerunUrl, workflowRun.rerunUrl) &&
        Objects.equals(this.runAttempt, workflowRun.runAttempt) &&
        Objects.equals(this.runNumber, workflowRun.runNumber) &&
        Objects.equals(this.runStartedAt, workflowRun.runStartedAt) &&
        Objects.equals(this.status, workflowRun.status) &&
        Objects.equals(this.triggeringActor, workflowRun.triggeringActor) &&
        Objects.equals(this.updatedAt, workflowRun.updatedAt) &&
        Objects.equals(this.url, workflowRun.url) &&
        Objects.equals(this.workflowId, workflowRun.workflowId) &&
        Objects.equals(this.workflowUrl, workflowRun.workflowUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path, previousAttemptUrl, pullRequests, referencedWorkflows, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowRun {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    artifactsUrl: ").append(toIndentedString(artifactsUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    checkSuiteId: ").append(toIndentedString(checkSuiteId)).append("\n");
    sb.append("    checkSuiteNodeId: ").append(toIndentedString(checkSuiteNodeId)).append("\n");
    sb.append("    checkSuiteUrl: ").append(toIndentedString(checkSuiteUrl)).append("\n");
    sb.append("    conclusion: ").append(toIndentedString(conclusion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    headBranch: ").append(toIndentedString(headBranch)).append("\n");
    sb.append("    headCommit: ").append(toIndentedString(headCommit)).append("\n");
    sb.append("    headRepository: ").append(toIndentedString(headRepository)).append("\n");
    sb.append("    headSha: ").append(toIndentedString(headSha)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobsUrl: ").append(toIndentedString(jobsUrl)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    previousAttemptUrl: ").append(toIndentedString(previousAttemptUrl)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    referencedWorkflows: ").append(toIndentedString(referencedWorkflows)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    rerunUrl: ").append(toIndentedString(rerunUrl)).append("\n");
    sb.append("    runAttempt: ").append(toIndentedString(runAttempt)).append("\n");
    sb.append("    runNumber: ").append(toIndentedString(runNumber)).append("\n");
    sb.append("    runStartedAt: ").append(toIndentedString(runStartedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    triggeringActor: ").append(toIndentedString(triggeringActor)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    workflowUrl: ").append(toIndentedString(workflowUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("artifacts_url");
    openapiFields.add("cancel_url");
    openapiFields.add("check_suite_id");
    openapiFields.add("check_suite_node_id");
    openapiFields.add("check_suite_url");
    openapiFields.add("conclusion");
    openapiFields.add("created_at");
    openapiFields.add("event");
    openapiFields.add("head_branch");
    openapiFields.add("head_commit");
    openapiFields.add("head_repository");
    openapiFields.add("head_sha");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("jobs_url");
    openapiFields.add("logs_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("path");
    openapiFields.add("previous_attempt_url");
    openapiFields.add("pull_requests");
    openapiFields.add("referenced_workflows");
    openapiFields.add("repository");
    openapiFields.add("rerun_url");
    openapiFields.add("run_attempt");
    openapiFields.add("run_number");
    openapiFields.add("run_started_at");
    openapiFields.add("status");
    openapiFields.add("triggering_actor");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("workflow_id");
    openapiFields.add("workflow_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actor");
    openapiRequiredFields.add("artifacts_url");
    openapiRequiredFields.add("cancel_url");
    openapiRequiredFields.add("check_suite_id");
    openapiRequiredFields.add("check_suite_node_id");
    openapiRequiredFields.add("check_suite_url");
    openapiRequiredFields.add("conclusion");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("head_branch");
    openapiRequiredFields.add("head_commit");
    openapiRequiredFields.add("head_repository");
    openapiRequiredFields.add("head_sha");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("jobs_url");
    openapiRequiredFields.add("logs_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("previous_attempt_url");
    openapiRequiredFields.add("pull_requests");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("rerun_url");
    openapiRequiredFields.add("run_attempt");
    openapiRequiredFields.add("run_number");
    openapiRequiredFields.add("run_started_at");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("triggering_actor");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("workflow_id");
    openapiRequiredFields.add("workflow_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowRun
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowRun is not found in the empty JSON string", WorkflowRun.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WorkflowRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowRun` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowRun.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `actor`
      User.validateJsonObject(jsonObj.getAsJsonObject("actor"));
      if (!jsonObj.get("artifacts_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifacts_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifacts_url").toString()));
      }
      if (!jsonObj.get("cancel_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_url").toString()));
      }
      if (!jsonObj.get("check_suite_node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_node_id").toString()));
      }
      if (!jsonObj.get("check_suite_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_url").toString()));
      }
      if (!jsonObj.get("conclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusion").toString()));
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if (!jsonObj.get("head_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_branch").toString()));
      }
      // validate the required field `head_commit`
      SimpleCommit.validateJsonObject(jsonObj.getAsJsonObject("head_commit"));
      // validate the required field `head_repository`
      RepositoryLite.validateJsonObject(jsonObj.getAsJsonObject("head_repository"));
      if (!jsonObj.get("head_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_sha").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("jobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobs_url").toString()));
      }
      if (!jsonObj.get("logs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("previous_attempt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_attempt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_attempt_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("pull_requests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_requests` to be an array in the JSON string but got `%s`", jsonObj.get("pull_requests").toString()));
      }

      JsonArray jsonArraypullRequests = jsonObj.getAsJsonArray("pull_requests");
      // validate the required field `pull_requests` (array)
      for (int i = 0; i < jsonArraypullRequests.size(); i++) {
        WorkflowRunPullRequestsInner.validateJsonObject(jsonArraypullRequests.get(i).getAsJsonObject());
      };
      if (jsonObj.get("referenced_workflows") != null && !jsonObj.get("referenced_workflows").isJsonNull()) {
        JsonArray jsonArrayreferencedWorkflows = jsonObj.getAsJsonArray("referenced_workflows");
        if (jsonArrayreferencedWorkflows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenced_workflows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenced_workflows` to be an array in the JSON string but got `%s`", jsonObj.get("referenced_workflows").toString()));
          }

          // validate the optional field `referenced_workflows` (array)
          for (int i = 0; i < jsonArrayreferencedWorkflows.size(); i++) {
            DeploymentWorkflowRunReferencedWorkflowsInner.validateJsonObject(jsonArrayreferencedWorkflows.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `repository`
      RepositoryLite.validateJsonObject(jsonObj.getAsJsonObject("repository"));
      if (!jsonObj.get("rerun_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerun_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rerun_url").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `triggering_actor`
      User.validateJsonObject(jsonObj.getAsJsonObject("triggering_actor"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("workflow_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowRun.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowRun>() {
           @Override
           public void write(JsonWriter out, WorkflowRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowRun read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowRun given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowRun
  * @throws IOException if the JSON string is invalid with respect to WorkflowRun
  */
  public static WorkflowRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowRun.class);
  }

 /**
  * Convert an instance of WorkflowRun to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

