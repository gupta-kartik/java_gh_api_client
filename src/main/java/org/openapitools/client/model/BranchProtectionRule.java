/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The branch protection rule. Includes a &#x60;name&#x60; and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of &#x60;off&#x60;, &#x60;non_admins&#x60;, or &#x60;everyone&#x60;. Actor and build lists are arrays of strings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class BranchProtectionRule {
  public static final String SERIALIZED_NAME_ADMIN_ENFORCED = "admin_enforced";
  @SerializedName(SERIALIZED_NAME_ADMIN_ENFORCED)
  private Boolean adminEnforced;

  /**
   * Gets or Sets allowDeletionsEnforcementLevel
   */
  @JsonAdapter(AllowDeletionsEnforcementLevelEnum.Adapter.class)
  public enum AllowDeletionsEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    AllowDeletionsEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowDeletionsEnforcementLevelEnum fromValue(String value) {
      for (AllowDeletionsEnforcementLevelEnum b : AllowDeletionsEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowDeletionsEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowDeletionsEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowDeletionsEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowDeletionsEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOW_DELETIONS_ENFORCEMENT_LEVEL = "allow_deletions_enforcement_level";
  @SerializedName(SERIALIZED_NAME_ALLOW_DELETIONS_ENFORCEMENT_LEVEL)
  private AllowDeletionsEnforcementLevelEnum allowDeletionsEnforcementLevel;

  /**
   * Gets or Sets allowForcePushesEnforcementLevel
   */
  @JsonAdapter(AllowForcePushesEnforcementLevelEnum.Adapter.class)
  public enum AllowForcePushesEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    AllowForcePushesEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowForcePushesEnforcementLevelEnum fromValue(String value) {
      for (AllowForcePushesEnforcementLevelEnum b : AllowForcePushesEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowForcePushesEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowForcePushesEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowForcePushesEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowForcePushesEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL = "allow_force_pushes_enforcement_level";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORCE_PUSHES_ENFORCEMENT_LEVEL)
  private AllowForcePushesEnforcementLevelEnum allowForcePushesEnforcementLevel;

  public static final String SERIALIZED_NAME_AUTHORIZED_ACTOR_NAMES = "authorized_actor_names";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_ACTOR_NAMES)
  private List<String> authorizedActorNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORIZED_ACTORS_ONLY = "authorized_actors_only";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_ACTORS_ONLY)
  private Boolean authorizedActorsOnly;

  public static final String SERIALIZED_NAME_AUTHORIZED_DISMISSAL_ACTORS_ONLY = "authorized_dismissal_actors_only";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_DISMISSAL_ACTORS_ONLY)
  private Boolean authorizedDismissalActorsOnly;

  public static final String SERIALIZED_NAME_CREATE_PROTECTED = "create_protected";
  @SerializedName(SERIALIZED_NAME_CREATE_PROTECTED)
  private Boolean createProtected;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISMISS_STALE_REVIEWS_ON_PUSH = "dismiss_stale_reviews_on_push";
  @SerializedName(SERIALIZED_NAME_DISMISS_STALE_REVIEWS_ON_PUSH)
  private Boolean dismissStaleReviewsOnPush;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IGNORE_APPROVALS_FROM_CONTRIBUTORS = "ignore_approvals_from_contributors";
  @SerializedName(SERIALIZED_NAME_IGNORE_APPROVALS_FROM_CONTRIBUTORS)
  private Boolean ignoreApprovalsFromContributors;

  /**
   * Gets or Sets linearHistoryRequirementEnforcementLevel
   */
  @JsonAdapter(LinearHistoryRequirementEnforcementLevelEnum.Adapter.class)
  public enum LinearHistoryRequirementEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    LinearHistoryRequirementEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinearHistoryRequirementEnforcementLevelEnum fromValue(String value) {
      for (LinearHistoryRequirementEnforcementLevelEnum b : LinearHistoryRequirementEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinearHistoryRequirementEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinearHistoryRequirementEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinearHistoryRequirementEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinearHistoryRequirementEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL = "linear_history_requirement_enforcement_level";
  @SerializedName(SERIALIZED_NAME_LINEAR_HISTORY_REQUIREMENT_ENFORCEMENT_LEVEL)
  private LinearHistoryRequirementEnforcementLevelEnum linearHistoryRequirementEnforcementLevel;

  /**
   * Gets or Sets mergeQueueEnforcementLevel
   */
  @JsonAdapter(MergeQueueEnforcementLevelEnum.Adapter.class)
  public enum MergeQueueEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    MergeQueueEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeQueueEnforcementLevelEnum fromValue(String value) {
      for (MergeQueueEnforcementLevelEnum b : MergeQueueEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeQueueEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeQueueEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeQueueEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeQueueEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_QUEUE_ENFORCEMENT_LEVEL = "merge_queue_enforcement_level";
  @SerializedName(SERIALIZED_NAME_MERGE_QUEUE_ENFORCEMENT_LEVEL)
  private MergeQueueEnforcementLevelEnum mergeQueueEnforcementLevel;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets pullRequestReviewsEnforcementLevel
   */
  @JsonAdapter(PullRequestReviewsEnforcementLevelEnum.Adapter.class)
  public enum PullRequestReviewsEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    PullRequestReviewsEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PullRequestReviewsEnforcementLevelEnum fromValue(String value) {
      for (PullRequestReviewsEnforcementLevelEnum b : PullRequestReviewsEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PullRequestReviewsEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PullRequestReviewsEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PullRequestReviewsEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PullRequestReviewsEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL = "pull_request_reviews_enforcement_level";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_REVIEWS_ENFORCEMENT_LEVEL)
  private PullRequestReviewsEnforcementLevelEnum pullRequestReviewsEnforcementLevel;

  public static final String SERIALIZED_NAME_REPOSITORY_ID = "repository_id";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ID)
  private Integer repositoryId;

  public static final String SERIALIZED_NAME_REQUIRE_CODE_OWNER_REVIEW = "require_code_owner_review";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CODE_OWNER_REVIEW)
  private Boolean requireCodeOwnerReview;

  public static final String SERIALIZED_NAME_REQUIRED_APPROVING_REVIEW_COUNT = "required_approving_review_count";
  @SerializedName(SERIALIZED_NAME_REQUIRED_APPROVING_REVIEW_COUNT)
  private Integer requiredApprovingReviewCount;

  /**
   * Gets or Sets requiredConversationResolutionLevel
   */
  @JsonAdapter(RequiredConversationResolutionLevelEnum.Adapter.class)
  public enum RequiredConversationResolutionLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    RequiredConversationResolutionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredConversationResolutionLevelEnum fromValue(String value) {
      for (RequiredConversationResolutionLevelEnum b : RequiredConversationResolutionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredConversationResolutionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredConversationResolutionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredConversationResolutionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredConversationResolutionLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_CONVERSATION_RESOLUTION_LEVEL = "required_conversation_resolution_level";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CONVERSATION_RESOLUTION_LEVEL)
  private RequiredConversationResolutionLevelEnum requiredConversationResolutionLevel;

  /**
   * Gets or Sets requiredDeploymentsEnforcementLevel
   */
  @JsonAdapter(RequiredDeploymentsEnforcementLevelEnum.Adapter.class)
  public enum RequiredDeploymentsEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    RequiredDeploymentsEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredDeploymentsEnforcementLevelEnum fromValue(String value) {
      for (RequiredDeploymentsEnforcementLevelEnum b : RequiredDeploymentsEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredDeploymentsEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredDeploymentsEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredDeploymentsEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredDeploymentsEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL = "required_deployments_enforcement_level";
  @SerializedName(SERIALIZED_NAME_REQUIRED_DEPLOYMENTS_ENFORCEMENT_LEVEL)
  private RequiredDeploymentsEnforcementLevelEnum requiredDeploymentsEnforcementLevel;

  public static final String SERIALIZED_NAME_REQUIRED_STATUS_CHECKS = "required_status_checks";
  @SerializedName(SERIALIZED_NAME_REQUIRED_STATUS_CHECKS)
  private List<String> requiredStatusChecks = new ArrayList<>();

  /**
   * Gets or Sets requiredStatusChecksEnforcementLevel
   */
  @JsonAdapter(RequiredStatusChecksEnforcementLevelEnum.Adapter.class)
  public enum RequiredStatusChecksEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    RequiredStatusChecksEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredStatusChecksEnforcementLevelEnum fromValue(String value) {
      for (RequiredStatusChecksEnforcementLevelEnum b : RequiredStatusChecksEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredStatusChecksEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredStatusChecksEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredStatusChecksEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredStatusChecksEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL = "required_status_checks_enforcement_level";
  @SerializedName(SERIALIZED_NAME_REQUIRED_STATUS_CHECKS_ENFORCEMENT_LEVEL)
  private RequiredStatusChecksEnforcementLevelEnum requiredStatusChecksEnforcementLevel;

  /**
   * Gets or Sets signatureRequirementEnforcementLevel
   */
  @JsonAdapter(SignatureRequirementEnforcementLevelEnum.Adapter.class)
  public enum SignatureRequirementEnforcementLevelEnum {
    OFF("off"),
    
    NON_ADMINS("non_admins"),
    
    EVERYONE("everyone");

    private String value;

    SignatureRequirementEnforcementLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureRequirementEnforcementLevelEnum fromValue(String value) {
      for (SignatureRequirementEnforcementLevelEnum b : SignatureRequirementEnforcementLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureRequirementEnforcementLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureRequirementEnforcementLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureRequirementEnforcementLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureRequirementEnforcementLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL = "signature_requirement_enforcement_level";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_REQUIREMENT_ENFORCEMENT_LEVEL)
  private SignatureRequirementEnforcementLevelEnum signatureRequirementEnforcementLevel;

  public static final String SERIALIZED_NAME_STRICT_REQUIRED_STATUS_CHECKS_POLICY = "strict_required_status_checks_policy";
  @SerializedName(SERIALIZED_NAME_STRICT_REQUIRED_STATUS_CHECKS_POLICY)
  private Boolean strictRequiredStatusChecksPolicy;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public BranchProtectionRule() {
  }

  public BranchProtectionRule adminEnforced(Boolean adminEnforced) {
    
    this.adminEnforced = adminEnforced;
    return this;
  }

   /**
   * Get adminEnforced
   * @return adminEnforced
  **/
  @javax.annotation.Nonnull

  public Boolean getAdminEnforced() {
    return adminEnforced;
  }


  public void setAdminEnforced(Boolean adminEnforced) {
    this.adminEnforced = adminEnforced;
  }


  public BranchProtectionRule allowDeletionsEnforcementLevel(AllowDeletionsEnforcementLevelEnum allowDeletionsEnforcementLevel) {
    
    this.allowDeletionsEnforcementLevel = allowDeletionsEnforcementLevel;
    return this;
  }

   /**
   * Get allowDeletionsEnforcementLevel
   * @return allowDeletionsEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public AllowDeletionsEnforcementLevelEnum getAllowDeletionsEnforcementLevel() {
    return allowDeletionsEnforcementLevel;
  }


  public void setAllowDeletionsEnforcementLevel(AllowDeletionsEnforcementLevelEnum allowDeletionsEnforcementLevel) {
    this.allowDeletionsEnforcementLevel = allowDeletionsEnforcementLevel;
  }


  public BranchProtectionRule allowForcePushesEnforcementLevel(AllowForcePushesEnforcementLevelEnum allowForcePushesEnforcementLevel) {
    
    this.allowForcePushesEnforcementLevel = allowForcePushesEnforcementLevel;
    return this;
  }

   /**
   * Get allowForcePushesEnforcementLevel
   * @return allowForcePushesEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public AllowForcePushesEnforcementLevelEnum getAllowForcePushesEnforcementLevel() {
    return allowForcePushesEnforcementLevel;
  }


  public void setAllowForcePushesEnforcementLevel(AllowForcePushesEnforcementLevelEnum allowForcePushesEnforcementLevel) {
    this.allowForcePushesEnforcementLevel = allowForcePushesEnforcementLevel;
  }


  public BranchProtectionRule authorizedActorNames(List<String> authorizedActorNames) {
    
    this.authorizedActorNames = authorizedActorNames;
    return this;
  }

  public BranchProtectionRule addAuthorizedActorNamesItem(String authorizedActorNamesItem) {
    if (this.authorizedActorNames == null) {
      this.authorizedActorNames = new ArrayList<>();
    }
    this.authorizedActorNames.add(authorizedActorNamesItem);
    return this;
  }

   /**
   * Get authorizedActorNames
   * @return authorizedActorNames
  **/
  @javax.annotation.Nonnull

  public List<String> getAuthorizedActorNames() {
    return authorizedActorNames;
  }


  public void setAuthorizedActorNames(List<String> authorizedActorNames) {
    this.authorizedActorNames = authorizedActorNames;
  }


  public BranchProtectionRule authorizedActorsOnly(Boolean authorizedActorsOnly) {
    
    this.authorizedActorsOnly = authorizedActorsOnly;
    return this;
  }

   /**
   * Get authorizedActorsOnly
   * @return authorizedActorsOnly
  **/
  @javax.annotation.Nonnull

  public Boolean getAuthorizedActorsOnly() {
    return authorizedActorsOnly;
  }


  public void setAuthorizedActorsOnly(Boolean authorizedActorsOnly) {
    this.authorizedActorsOnly = authorizedActorsOnly;
  }


  public BranchProtectionRule authorizedDismissalActorsOnly(Boolean authorizedDismissalActorsOnly) {
    
    this.authorizedDismissalActorsOnly = authorizedDismissalActorsOnly;
    return this;
  }

   /**
   * Get authorizedDismissalActorsOnly
   * @return authorizedDismissalActorsOnly
  **/
  @javax.annotation.Nonnull

  public Boolean getAuthorizedDismissalActorsOnly() {
    return authorizedDismissalActorsOnly;
  }


  public void setAuthorizedDismissalActorsOnly(Boolean authorizedDismissalActorsOnly) {
    this.authorizedDismissalActorsOnly = authorizedDismissalActorsOnly;
  }


  public BranchProtectionRule createProtected(Boolean createProtected) {
    
    this.createProtected = createProtected;
    return this;
  }

   /**
   * Get createProtected
   * @return createProtected
  **/
  @javax.annotation.Nullable

  public Boolean getCreateProtected() {
    return createProtected;
  }


  public void setCreateProtected(Boolean createProtected) {
    this.createProtected = createProtected;
  }


  public BranchProtectionRule createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BranchProtectionRule dismissStaleReviewsOnPush(Boolean dismissStaleReviewsOnPush) {
    
    this.dismissStaleReviewsOnPush = dismissStaleReviewsOnPush;
    return this;
  }

   /**
   * Get dismissStaleReviewsOnPush
   * @return dismissStaleReviewsOnPush
  **/
  @javax.annotation.Nonnull

  public Boolean getDismissStaleReviewsOnPush() {
    return dismissStaleReviewsOnPush;
  }


  public void setDismissStaleReviewsOnPush(Boolean dismissStaleReviewsOnPush) {
    this.dismissStaleReviewsOnPush = dismissStaleReviewsOnPush;
  }


  public BranchProtectionRule id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public BranchProtectionRule ignoreApprovalsFromContributors(Boolean ignoreApprovalsFromContributors) {
    
    this.ignoreApprovalsFromContributors = ignoreApprovalsFromContributors;
    return this;
  }

   /**
   * Get ignoreApprovalsFromContributors
   * @return ignoreApprovalsFromContributors
  **/
  @javax.annotation.Nonnull

  public Boolean getIgnoreApprovalsFromContributors() {
    return ignoreApprovalsFromContributors;
  }


  public void setIgnoreApprovalsFromContributors(Boolean ignoreApprovalsFromContributors) {
    this.ignoreApprovalsFromContributors = ignoreApprovalsFromContributors;
  }


  public BranchProtectionRule linearHistoryRequirementEnforcementLevel(LinearHistoryRequirementEnforcementLevelEnum linearHistoryRequirementEnforcementLevel) {
    
    this.linearHistoryRequirementEnforcementLevel = linearHistoryRequirementEnforcementLevel;
    return this;
  }

   /**
   * Get linearHistoryRequirementEnforcementLevel
   * @return linearHistoryRequirementEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public LinearHistoryRequirementEnforcementLevelEnum getLinearHistoryRequirementEnforcementLevel() {
    return linearHistoryRequirementEnforcementLevel;
  }


  public void setLinearHistoryRequirementEnforcementLevel(LinearHistoryRequirementEnforcementLevelEnum linearHistoryRequirementEnforcementLevel) {
    this.linearHistoryRequirementEnforcementLevel = linearHistoryRequirementEnforcementLevel;
  }


  public BranchProtectionRule mergeQueueEnforcementLevel(MergeQueueEnforcementLevelEnum mergeQueueEnforcementLevel) {
    
    this.mergeQueueEnforcementLevel = mergeQueueEnforcementLevel;
    return this;
  }

   /**
   * Get mergeQueueEnforcementLevel
   * @return mergeQueueEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public MergeQueueEnforcementLevelEnum getMergeQueueEnforcementLevel() {
    return mergeQueueEnforcementLevel;
  }


  public void setMergeQueueEnforcementLevel(MergeQueueEnforcementLevelEnum mergeQueueEnforcementLevel) {
    this.mergeQueueEnforcementLevel = mergeQueueEnforcementLevel;
  }


  public BranchProtectionRule name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BranchProtectionRule pullRequestReviewsEnforcementLevel(PullRequestReviewsEnforcementLevelEnum pullRequestReviewsEnforcementLevel) {
    
    this.pullRequestReviewsEnforcementLevel = pullRequestReviewsEnforcementLevel;
    return this;
  }

   /**
   * Get pullRequestReviewsEnforcementLevel
   * @return pullRequestReviewsEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public PullRequestReviewsEnforcementLevelEnum getPullRequestReviewsEnforcementLevel() {
    return pullRequestReviewsEnforcementLevel;
  }


  public void setPullRequestReviewsEnforcementLevel(PullRequestReviewsEnforcementLevelEnum pullRequestReviewsEnforcementLevel) {
    this.pullRequestReviewsEnforcementLevel = pullRequestReviewsEnforcementLevel;
  }


  public BranchProtectionRule repositoryId(Integer repositoryId) {
    
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * Get repositoryId
   * @return repositoryId
  **/
  @javax.annotation.Nonnull

  public Integer getRepositoryId() {
    return repositoryId;
  }


  public void setRepositoryId(Integer repositoryId) {
    this.repositoryId = repositoryId;
  }


  public BranchProtectionRule requireCodeOwnerReview(Boolean requireCodeOwnerReview) {
    
    this.requireCodeOwnerReview = requireCodeOwnerReview;
    return this;
  }

   /**
   * Get requireCodeOwnerReview
   * @return requireCodeOwnerReview
  **/
  @javax.annotation.Nonnull

  public Boolean getRequireCodeOwnerReview() {
    return requireCodeOwnerReview;
  }


  public void setRequireCodeOwnerReview(Boolean requireCodeOwnerReview) {
    this.requireCodeOwnerReview = requireCodeOwnerReview;
  }


  public BranchProtectionRule requiredApprovingReviewCount(Integer requiredApprovingReviewCount) {
    
    this.requiredApprovingReviewCount = requiredApprovingReviewCount;
    return this;
  }

   /**
   * Get requiredApprovingReviewCount
   * @return requiredApprovingReviewCount
  **/
  @javax.annotation.Nonnull

  public Integer getRequiredApprovingReviewCount() {
    return requiredApprovingReviewCount;
  }


  public void setRequiredApprovingReviewCount(Integer requiredApprovingReviewCount) {
    this.requiredApprovingReviewCount = requiredApprovingReviewCount;
  }


  public BranchProtectionRule requiredConversationResolutionLevel(RequiredConversationResolutionLevelEnum requiredConversationResolutionLevel) {
    
    this.requiredConversationResolutionLevel = requiredConversationResolutionLevel;
    return this;
  }

   /**
   * Get requiredConversationResolutionLevel
   * @return requiredConversationResolutionLevel
  **/
  @javax.annotation.Nonnull

  public RequiredConversationResolutionLevelEnum getRequiredConversationResolutionLevel() {
    return requiredConversationResolutionLevel;
  }


  public void setRequiredConversationResolutionLevel(RequiredConversationResolutionLevelEnum requiredConversationResolutionLevel) {
    this.requiredConversationResolutionLevel = requiredConversationResolutionLevel;
  }


  public BranchProtectionRule requiredDeploymentsEnforcementLevel(RequiredDeploymentsEnforcementLevelEnum requiredDeploymentsEnforcementLevel) {
    
    this.requiredDeploymentsEnforcementLevel = requiredDeploymentsEnforcementLevel;
    return this;
  }

   /**
   * Get requiredDeploymentsEnforcementLevel
   * @return requiredDeploymentsEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public RequiredDeploymentsEnforcementLevelEnum getRequiredDeploymentsEnforcementLevel() {
    return requiredDeploymentsEnforcementLevel;
  }


  public void setRequiredDeploymentsEnforcementLevel(RequiredDeploymentsEnforcementLevelEnum requiredDeploymentsEnforcementLevel) {
    this.requiredDeploymentsEnforcementLevel = requiredDeploymentsEnforcementLevel;
  }


  public BranchProtectionRule requiredStatusChecks(List<String> requiredStatusChecks) {
    
    this.requiredStatusChecks = requiredStatusChecks;
    return this;
  }

  public BranchProtectionRule addRequiredStatusChecksItem(String requiredStatusChecksItem) {
    if (this.requiredStatusChecks == null) {
      this.requiredStatusChecks = new ArrayList<>();
    }
    this.requiredStatusChecks.add(requiredStatusChecksItem);
    return this;
  }

   /**
   * Get requiredStatusChecks
   * @return requiredStatusChecks
  **/
  @javax.annotation.Nonnull

  public List<String> getRequiredStatusChecks() {
    return requiredStatusChecks;
  }


  public void setRequiredStatusChecks(List<String> requiredStatusChecks) {
    this.requiredStatusChecks = requiredStatusChecks;
  }


  public BranchProtectionRule requiredStatusChecksEnforcementLevel(RequiredStatusChecksEnforcementLevelEnum requiredStatusChecksEnforcementLevel) {
    
    this.requiredStatusChecksEnforcementLevel = requiredStatusChecksEnforcementLevel;
    return this;
  }

   /**
   * Get requiredStatusChecksEnforcementLevel
   * @return requiredStatusChecksEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public RequiredStatusChecksEnforcementLevelEnum getRequiredStatusChecksEnforcementLevel() {
    return requiredStatusChecksEnforcementLevel;
  }


  public void setRequiredStatusChecksEnforcementLevel(RequiredStatusChecksEnforcementLevelEnum requiredStatusChecksEnforcementLevel) {
    this.requiredStatusChecksEnforcementLevel = requiredStatusChecksEnforcementLevel;
  }


  public BranchProtectionRule signatureRequirementEnforcementLevel(SignatureRequirementEnforcementLevelEnum signatureRequirementEnforcementLevel) {
    
    this.signatureRequirementEnforcementLevel = signatureRequirementEnforcementLevel;
    return this;
  }

   /**
   * Get signatureRequirementEnforcementLevel
   * @return signatureRequirementEnforcementLevel
  **/
  @javax.annotation.Nonnull

  public SignatureRequirementEnforcementLevelEnum getSignatureRequirementEnforcementLevel() {
    return signatureRequirementEnforcementLevel;
  }


  public void setSignatureRequirementEnforcementLevel(SignatureRequirementEnforcementLevelEnum signatureRequirementEnforcementLevel) {
    this.signatureRequirementEnforcementLevel = signatureRequirementEnforcementLevel;
  }


  public BranchProtectionRule strictRequiredStatusChecksPolicy(Boolean strictRequiredStatusChecksPolicy) {
    
    this.strictRequiredStatusChecksPolicy = strictRequiredStatusChecksPolicy;
    return this;
  }

   /**
   * Get strictRequiredStatusChecksPolicy
   * @return strictRequiredStatusChecksPolicy
  **/
  @javax.annotation.Nonnull

  public Boolean getStrictRequiredStatusChecksPolicy() {
    return strictRequiredStatusChecksPolicy;
  }


  public void setStrictRequiredStatusChecksPolicy(Boolean strictRequiredStatusChecksPolicy) {
    this.strictRequiredStatusChecksPolicy = strictRequiredStatusChecksPolicy;
  }


  public BranchProtectionRule updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchProtectionRule branchProtectionRule = (BranchProtectionRule) o;
    return Objects.equals(this.adminEnforced, branchProtectionRule.adminEnforced) &&
        Objects.equals(this.allowDeletionsEnforcementLevel, branchProtectionRule.allowDeletionsEnforcementLevel) &&
        Objects.equals(this.allowForcePushesEnforcementLevel, branchProtectionRule.allowForcePushesEnforcementLevel) &&
        Objects.equals(this.authorizedActorNames, branchProtectionRule.authorizedActorNames) &&
        Objects.equals(this.authorizedActorsOnly, branchProtectionRule.authorizedActorsOnly) &&
        Objects.equals(this.authorizedDismissalActorsOnly, branchProtectionRule.authorizedDismissalActorsOnly) &&
        Objects.equals(this.createProtected, branchProtectionRule.createProtected) &&
        Objects.equals(this.createdAt, branchProtectionRule.createdAt) &&
        Objects.equals(this.dismissStaleReviewsOnPush, branchProtectionRule.dismissStaleReviewsOnPush) &&
        Objects.equals(this.id, branchProtectionRule.id) &&
        Objects.equals(this.ignoreApprovalsFromContributors, branchProtectionRule.ignoreApprovalsFromContributors) &&
        Objects.equals(this.linearHistoryRequirementEnforcementLevel, branchProtectionRule.linearHistoryRequirementEnforcementLevel) &&
        Objects.equals(this.mergeQueueEnforcementLevel, branchProtectionRule.mergeQueueEnforcementLevel) &&
        Objects.equals(this.name, branchProtectionRule.name) &&
        Objects.equals(this.pullRequestReviewsEnforcementLevel, branchProtectionRule.pullRequestReviewsEnforcementLevel) &&
        Objects.equals(this.repositoryId, branchProtectionRule.repositoryId) &&
        Objects.equals(this.requireCodeOwnerReview, branchProtectionRule.requireCodeOwnerReview) &&
        Objects.equals(this.requiredApprovingReviewCount, branchProtectionRule.requiredApprovingReviewCount) &&
        Objects.equals(this.requiredConversationResolutionLevel, branchProtectionRule.requiredConversationResolutionLevel) &&
        Objects.equals(this.requiredDeploymentsEnforcementLevel, branchProtectionRule.requiredDeploymentsEnforcementLevel) &&
        Objects.equals(this.requiredStatusChecks, branchProtectionRule.requiredStatusChecks) &&
        Objects.equals(this.requiredStatusChecksEnforcementLevel, branchProtectionRule.requiredStatusChecksEnforcementLevel) &&
        Objects.equals(this.signatureRequirementEnforcementLevel, branchProtectionRule.signatureRequirementEnforcementLevel) &&
        Objects.equals(this.strictRequiredStatusChecksPolicy, branchProtectionRule.strictRequiredStatusChecksPolicy) &&
        Objects.equals(this.updatedAt, branchProtectionRule.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminEnforced, allowDeletionsEnforcementLevel, allowForcePushesEnforcementLevel, authorizedActorNames, authorizedActorsOnly, authorizedDismissalActorsOnly, createProtected, createdAt, dismissStaleReviewsOnPush, id, ignoreApprovalsFromContributors, linearHistoryRequirementEnforcementLevel, mergeQueueEnforcementLevel, name, pullRequestReviewsEnforcementLevel, repositoryId, requireCodeOwnerReview, requiredApprovingReviewCount, requiredConversationResolutionLevel, requiredDeploymentsEnforcementLevel, requiredStatusChecks, requiredStatusChecksEnforcementLevel, signatureRequirementEnforcementLevel, strictRequiredStatusChecksPolicy, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchProtectionRule {\n");
    sb.append("    adminEnforced: ").append(toIndentedString(adminEnforced)).append("\n");
    sb.append("    allowDeletionsEnforcementLevel: ").append(toIndentedString(allowDeletionsEnforcementLevel)).append("\n");
    sb.append("    allowForcePushesEnforcementLevel: ").append(toIndentedString(allowForcePushesEnforcementLevel)).append("\n");
    sb.append("    authorizedActorNames: ").append(toIndentedString(authorizedActorNames)).append("\n");
    sb.append("    authorizedActorsOnly: ").append(toIndentedString(authorizedActorsOnly)).append("\n");
    sb.append("    authorizedDismissalActorsOnly: ").append(toIndentedString(authorizedDismissalActorsOnly)).append("\n");
    sb.append("    createProtected: ").append(toIndentedString(createProtected)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dismissStaleReviewsOnPush: ").append(toIndentedString(dismissStaleReviewsOnPush)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreApprovalsFromContributors: ").append(toIndentedString(ignoreApprovalsFromContributors)).append("\n");
    sb.append("    linearHistoryRequirementEnforcementLevel: ").append(toIndentedString(linearHistoryRequirementEnforcementLevel)).append("\n");
    sb.append("    mergeQueueEnforcementLevel: ").append(toIndentedString(mergeQueueEnforcementLevel)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pullRequestReviewsEnforcementLevel: ").append(toIndentedString(pullRequestReviewsEnforcementLevel)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    requireCodeOwnerReview: ").append(toIndentedString(requireCodeOwnerReview)).append("\n");
    sb.append("    requiredApprovingReviewCount: ").append(toIndentedString(requiredApprovingReviewCount)).append("\n");
    sb.append("    requiredConversationResolutionLevel: ").append(toIndentedString(requiredConversationResolutionLevel)).append("\n");
    sb.append("    requiredDeploymentsEnforcementLevel: ").append(toIndentedString(requiredDeploymentsEnforcementLevel)).append("\n");
    sb.append("    requiredStatusChecks: ").append(toIndentedString(requiredStatusChecks)).append("\n");
    sb.append("    requiredStatusChecksEnforcementLevel: ").append(toIndentedString(requiredStatusChecksEnforcementLevel)).append("\n");
    sb.append("    signatureRequirementEnforcementLevel: ").append(toIndentedString(signatureRequirementEnforcementLevel)).append("\n");
    sb.append("    strictRequiredStatusChecksPolicy: ").append(toIndentedString(strictRequiredStatusChecksPolicy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin_enforced");
    openapiFields.add("allow_deletions_enforcement_level");
    openapiFields.add("allow_force_pushes_enforcement_level");
    openapiFields.add("authorized_actor_names");
    openapiFields.add("authorized_actors_only");
    openapiFields.add("authorized_dismissal_actors_only");
    openapiFields.add("create_protected");
    openapiFields.add("created_at");
    openapiFields.add("dismiss_stale_reviews_on_push");
    openapiFields.add("id");
    openapiFields.add("ignore_approvals_from_contributors");
    openapiFields.add("linear_history_requirement_enforcement_level");
    openapiFields.add("merge_queue_enforcement_level");
    openapiFields.add("name");
    openapiFields.add("pull_request_reviews_enforcement_level");
    openapiFields.add("repository_id");
    openapiFields.add("require_code_owner_review");
    openapiFields.add("required_approving_review_count");
    openapiFields.add("required_conversation_resolution_level");
    openapiFields.add("required_deployments_enforcement_level");
    openapiFields.add("required_status_checks");
    openapiFields.add("required_status_checks_enforcement_level");
    openapiFields.add("signature_requirement_enforcement_level");
    openapiFields.add("strict_required_status_checks_policy");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("admin_enforced");
    openapiRequiredFields.add("allow_deletions_enforcement_level");
    openapiRequiredFields.add("allow_force_pushes_enforcement_level");
    openapiRequiredFields.add("authorized_actor_names");
    openapiRequiredFields.add("authorized_actors_only");
    openapiRequiredFields.add("authorized_dismissal_actors_only");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("dismiss_stale_reviews_on_push");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ignore_approvals_from_contributors");
    openapiRequiredFields.add("linear_history_requirement_enforcement_level");
    openapiRequiredFields.add("merge_queue_enforcement_level");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pull_request_reviews_enforcement_level");
    openapiRequiredFields.add("repository_id");
    openapiRequiredFields.add("require_code_owner_review");
    openapiRequiredFields.add("required_approving_review_count");
    openapiRequiredFields.add("required_conversation_resolution_level");
    openapiRequiredFields.add("required_deployments_enforcement_level");
    openapiRequiredFields.add("required_status_checks");
    openapiRequiredFields.add("required_status_checks_enforcement_level");
    openapiRequiredFields.add("signature_requirement_enforcement_level");
    openapiRequiredFields.add("strict_required_status_checks_policy");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BranchProtectionRule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BranchProtectionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BranchProtectionRule is not found in the empty JSON string", BranchProtectionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BranchProtectionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BranchProtectionRule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BranchProtectionRule.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("allow_deletions_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allow_deletions_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allow_deletions_enforcement_level").toString()));
      }
      if (!jsonObj.get("allow_force_pushes_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allow_force_pushes_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allow_force_pushes_enforcement_level").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("authorized_actor_names") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("authorized_actor_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorized_actor_names` to be an array in the JSON string but got `%s`", jsonObj.get("authorized_actor_names").toString()));
      }
      if (!jsonObj.get("linear_history_requirement_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linear_history_requirement_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linear_history_requirement_enforcement_level").toString()));
      }
      if (!jsonObj.get("merge_queue_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_queue_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_queue_enforcement_level").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("pull_request_reviews_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_request_reviews_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull_request_reviews_enforcement_level").toString()));
      }
      if (!jsonObj.get("required_conversation_resolution_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_conversation_resolution_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_conversation_resolution_level").toString()));
      }
      if (!jsonObj.get("required_deployments_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_deployments_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_deployments_enforcement_level").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("required_status_checks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("required_status_checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_status_checks` to be an array in the JSON string but got `%s`", jsonObj.get("required_status_checks").toString()));
      }
      if (!jsonObj.get("required_status_checks_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_status_checks_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_status_checks_enforcement_level").toString()));
      }
      if (!jsonObj.get("signature_requirement_enforcement_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature_requirement_enforcement_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature_requirement_enforcement_level").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BranchProtectionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BranchProtectionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BranchProtectionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BranchProtectionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<BranchProtectionRule>() {
           @Override
           public void write(JsonWriter out, BranchProtectionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BranchProtectionRule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BranchProtectionRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BranchProtectionRule
  * @throws IOException if the JSON string is invalid with respect to BranchProtectionRule
  */
  public static BranchProtectionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BranchProtectionRule.class);
  }

 /**
  * Convert an instance of BranchProtectionRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

