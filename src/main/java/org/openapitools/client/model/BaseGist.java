/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BaseGistFilesValue;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.SimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base Gist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class BaseGist {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private URI forksUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private URI commitsUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_GIT_PULL_URL = "git_pull_url";
  @SerializedName(SERIALIZED_NAME_GIT_PULL_URL)
  private URI gitPullUrl;

  public static final String SERIALIZED_NAME_GIT_PUSH_URL = "git_push_url";
  @SerializedName(SERIALIZED_NAME_GIT_PUSH_URL)
  private URI gitPushUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Map<String, BaseGistFilesValue> files = new HashMap<>();

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Integer comments;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NullableSimpleUser user;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private SimpleUser owner;

  public static final String SERIALIZED_NAME_TRUNCATED = "truncated";
  @SerializedName(SERIALIZED_NAME_TRUNCATED)
  private Boolean truncated;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private List<Object> forks;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<Object> history;

  public BaseGist() {
  }

  public BaseGist url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public BaseGist forksUrl(URI forksUrl) {
    
    this.forksUrl = forksUrl;
    return this;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @javax.annotation.Nonnull

  public URI getForksUrl() {
    return forksUrl;
  }


  public void setForksUrl(URI forksUrl) {
    this.forksUrl = forksUrl;
  }


  public BaseGist commitsUrl(URI commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public BaseGist id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public BaseGist nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public BaseGist gitPullUrl(URI gitPullUrl) {
    
    this.gitPullUrl = gitPullUrl;
    return this;
  }

   /**
   * Get gitPullUrl
   * @return gitPullUrl
  **/
  @javax.annotation.Nonnull

  public URI getGitPullUrl() {
    return gitPullUrl;
  }


  public void setGitPullUrl(URI gitPullUrl) {
    this.gitPullUrl = gitPullUrl;
  }


  public BaseGist gitPushUrl(URI gitPushUrl) {
    
    this.gitPushUrl = gitPushUrl;
    return this;
  }

   /**
   * Get gitPushUrl
   * @return gitPushUrl
  **/
  @javax.annotation.Nonnull

  public URI getGitPushUrl() {
    return gitPushUrl;
  }


  public void setGitPushUrl(URI gitPushUrl) {
    this.gitPushUrl = gitPushUrl;
  }


  public BaseGist htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public BaseGist files(Map<String, BaseGistFilesValue> files) {
    
    this.files = files;
    return this;
  }

  public BaseGist putFilesItem(String key, BaseGistFilesValue filesItem) {
    if (this.files == null) {
      this.files = new HashMap<>();
    }
    this.files.put(key, filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nonnull

  public Map<String, BaseGistFilesValue> getFiles() {
    return files;
  }


  public void setFiles(Map<String, BaseGistFilesValue> files) {
    this.files = files;
  }


  public BaseGist _public(Boolean _public) {
    
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @javax.annotation.Nonnull

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public BaseGist createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BaseGist updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public BaseGist description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public BaseGist comments(Integer comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nonnull

  public Integer getComments() {
    return comments;
  }


  public void setComments(Integer comments) {
    this.comments = comments;
  }


  public BaseGist user(NullableSimpleUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getUser() {
    return user;
  }


  public void setUser(NullableSimpleUser user) {
    this.user = user;
  }


  public BaseGist commentsUrl(URI commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public BaseGist owner(SimpleUser owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable

  public SimpleUser getOwner() {
    return owner;
  }


  public void setOwner(SimpleUser owner) {
    this.owner = owner;
  }


  public BaseGist truncated(Boolean truncated) {
    
    this.truncated = truncated;
    return this;
  }

   /**
   * Get truncated
   * @return truncated
  **/
  @javax.annotation.Nullable

  public Boolean getTruncated() {
    return truncated;
  }


  public void setTruncated(Boolean truncated) {
    this.truncated = truncated;
  }


  public BaseGist forks(List<Object> forks) {
    
    this.forks = forks;
    return this;
  }

  public BaseGist addForksItem(Object forksItem) {
    if (this.forks == null) {
      this.forks = new ArrayList<>();
    }
    this.forks.add(forksItem);
    return this;
  }

   /**
   * Get forks
   * @return forks
  **/
  @javax.annotation.Nullable

  public List<Object> getForks() {
    return forks;
  }


  public void setForks(List<Object> forks) {
    this.forks = forks;
  }


  public BaseGist history(List<Object> history) {
    
    this.history = history;
    return this;
  }

  public BaseGist addHistoryItem(Object historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable

  public List<Object> getHistory() {
    return history;
  }


  public void setHistory(List<Object> history) {
    this.history = history;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseGist baseGist = (BaseGist) o;
    return Objects.equals(this.url, baseGist.url) &&
        Objects.equals(this.forksUrl, baseGist.forksUrl) &&
        Objects.equals(this.commitsUrl, baseGist.commitsUrl) &&
        Objects.equals(this.id, baseGist.id) &&
        Objects.equals(this.nodeId, baseGist.nodeId) &&
        Objects.equals(this.gitPullUrl, baseGist.gitPullUrl) &&
        Objects.equals(this.gitPushUrl, baseGist.gitPushUrl) &&
        Objects.equals(this.htmlUrl, baseGist.htmlUrl) &&
        Objects.equals(this.files, baseGist.files) &&
        Objects.equals(this._public, baseGist._public) &&
        Objects.equals(this.createdAt, baseGist.createdAt) &&
        Objects.equals(this.updatedAt, baseGist.updatedAt) &&
        Objects.equals(this.description, baseGist.description) &&
        Objects.equals(this.comments, baseGist.comments) &&
        Objects.equals(this.user, baseGist.user) &&
        Objects.equals(this.commentsUrl, baseGist.commentsUrl) &&
        Objects.equals(this.owner, baseGist.owner) &&
        Objects.equals(this.truncated, baseGist.truncated) &&
        Objects.equals(this.forks, baseGist.forks) &&
        Objects.equals(this.history, baseGist.history);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, forksUrl, commitsUrl, id, nodeId, gitPullUrl, gitPushUrl, htmlUrl, files, _public, createdAt, updatedAt, description, comments, user, commentsUrl, owner, truncated, forks, history);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseGist {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    gitPullUrl: ").append(toIndentedString(gitPullUrl)).append("\n");
    sb.append("    gitPushUrl: ").append(toIndentedString(gitPushUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("forks_url");
    openapiFields.add("commits_url");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("git_pull_url");
    openapiFields.add("git_push_url");
    openapiFields.add("html_url");
    openapiFields.add("files");
    openapiFields.add("public");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("description");
    openapiFields.add("comments");
    openapiFields.add("user");
    openapiFields.add("comments_url");
    openapiFields.add("owner");
    openapiFields.add("truncated");
    openapiFields.add("forks");
    openapiFields.add("history");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("forks_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("git_pull_url");
    openapiRequiredFields.add("git_push_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("public");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("comments_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BaseGist
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BaseGist.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseGist is not found in the empty JSON string", BaseGist.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BaseGist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseGist` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BaseGist.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("git_pull_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_pull_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_pull_url").toString()));
      }
      if (!jsonObj.get("git_push_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_push_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_push_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `user`
      NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forks") != null && !jsonObj.get("forks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks` to be an array in the JSON string but got `%s`", jsonObj.get("forks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseGist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseGist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseGist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseGist.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseGist>() {
           @Override
           public void write(JsonWriter out, BaseGist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseGist read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BaseGist given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BaseGist
  * @throws IOException if the JSON string is invalid with respect to BaseGist
  */
  public static BaseGist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseGist.class);
  }

 /**
  * Convert an instance of BaseGist to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

