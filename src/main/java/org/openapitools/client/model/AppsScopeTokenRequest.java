/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AppPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppsScopeTokenRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class AppsScopeTokenRequest {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGET_ID = "target_id";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private Integer targetId;

  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  private List<String> repositories;

  public static final String SERIALIZED_NAME_REPOSITORY_IDS = "repository_ids";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_IDS)
  private List<Integer> repositoryIds;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private AppPermissions permissions;

  public AppsScopeTokenRequest() {
  }

  public AppsScopeTokenRequest accessToken(String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * The access token used to authenticate to the GitHub API.
   * @return accessToken
  **/
  @javax.annotation.Nonnull

  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public AppsScopeTokenRequest target(String target) {
    
    this.target = target;
    return this;
  }

   /**
   * The name of the user or organization to scope the user-to-server access token to. **Required** unless &#x60;target_id&#x60; is specified.
   * @return target
  **/
  @javax.annotation.Nullable

  public String getTarget() {
    return target;
  }


  public void setTarget(String target) {
    this.target = target;
  }


  public AppsScopeTokenRequest targetId(Integer targetId) {
    
    this.targetId = targetId;
    return this;
  }

   /**
   * The ID of the user or organization to scope the user-to-server access token to. **Required** unless &#x60;target&#x60; is specified.
   * @return targetId
  **/
  @javax.annotation.Nullable

  public Integer getTargetId() {
    return targetId;
  }


  public void setTargetId(Integer targetId) {
    this.targetId = targetId;
  }


  public AppsScopeTokenRequest repositories(List<String> repositories) {
    
    this.repositories = repositories;
    return this;
  }

  public AppsScopeTokenRequest addRepositoriesItem(String repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

   /**
   * The list of repository names to scope the user-to-server access token to. &#x60;repositories&#x60; may not be specified if &#x60;repository_ids&#x60; is specified.
   * @return repositories
  **/
  @javax.annotation.Nullable

  public List<String> getRepositories() {
    return repositories;
  }


  public void setRepositories(List<String> repositories) {
    this.repositories = repositories;
  }


  public AppsScopeTokenRequest repositoryIds(List<Integer> repositoryIds) {
    
    this.repositoryIds = repositoryIds;
    return this;
  }

  public AppsScopeTokenRequest addRepositoryIdsItem(Integer repositoryIdsItem) {
    if (this.repositoryIds == null) {
      this.repositoryIds = new ArrayList<>();
    }
    this.repositoryIds.add(repositoryIdsItem);
    return this;
  }

   /**
   * The list of repository IDs to scope the user-to-server access token to. &#x60;repository_ids&#x60; may not be specified if &#x60;repositories&#x60; is specified.
   * @return repositoryIds
  **/
  @javax.annotation.Nullable

  public List<Integer> getRepositoryIds() {
    return repositoryIds;
  }


  public void setRepositoryIds(List<Integer> repositoryIds) {
    this.repositoryIds = repositoryIds;
  }


  public AppsScopeTokenRequest permissions(AppPermissions permissions) {
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable

  public AppPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(AppPermissions permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppsScopeTokenRequest appsScopeTokenRequest = (AppsScopeTokenRequest) o;
    return Objects.equals(this.accessToken, appsScopeTokenRequest.accessToken) &&
        Objects.equals(this.target, appsScopeTokenRequest.target) &&
        Objects.equals(this.targetId, appsScopeTokenRequest.targetId) &&
        Objects.equals(this.repositories, appsScopeTokenRequest.repositories) &&
        Objects.equals(this.repositoryIds, appsScopeTokenRequest.repositoryIds) &&
        Objects.equals(this.permissions, appsScopeTokenRequest.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, target, targetId, repositories, repositoryIds, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppsScopeTokenRequest {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    repositoryIds: ").append(toIndentedString(repositoryIds)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token");
    openapiFields.add("target");
    openapiFields.add("target_id");
    openapiFields.add("repositories");
    openapiFields.add("repository_ids");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_token");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppsScopeTokenRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppsScopeTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppsScopeTokenRequest is not found in the empty JSON string", AppsScopeTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppsScopeTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppsScopeTokenRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppsScopeTokenRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("repositories") != null && !jsonObj.get("repositories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("repository_ids") != null && !jsonObj.get("repository_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_ids` to be an array in the JSON string but got `%s`", jsonObj.get("repository_ids").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        AppPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppsScopeTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppsScopeTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppsScopeTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppsScopeTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AppsScopeTokenRequest>() {
           @Override
           public void write(JsonWriter out, AppsScopeTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppsScopeTokenRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppsScopeTokenRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppsScopeTokenRequest
  * @throws IOException if the JSON string is invalid with respect to AppsScopeTokenRequest
  */
  public static AppsScopeTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppsScopeTokenRequest.class);
  }

 /**
  * Convert an instance of AppsScopeTokenRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

