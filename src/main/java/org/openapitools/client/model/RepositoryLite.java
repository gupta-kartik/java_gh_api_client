/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepositoryLite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class RepositoryLite {
  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private URI contributorsUrl;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private URI deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private URI downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private URI eventsUrl;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private URI forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private URI hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private URI languagesUrl;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private URI mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private User owner;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private URI stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private URI subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private URI subscriptionUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private URI tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private URI teamsUrl;

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public RepositoryLite() {
  }

  public RepositoryLite archiveUrl(String archiveUrl) {
    
    this.archiveUrl = archiveUrl;
    return this;
  }

   /**
   * Get archiveUrl
   * @return archiveUrl
  **/
  @javax.annotation.Nonnull

  public String getArchiveUrl() {
    return archiveUrl;
  }


  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public RepositoryLite assigneesUrl(String assigneesUrl) {
    
    this.assigneesUrl = assigneesUrl;
    return this;
  }

   /**
   * Get assigneesUrl
   * @return assigneesUrl
  **/
  @javax.annotation.Nonnull

  public String getAssigneesUrl() {
    return assigneesUrl;
  }


  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public RepositoryLite blobsUrl(String blobsUrl) {
    
    this.blobsUrl = blobsUrl;
    return this;
  }

   /**
   * Get blobsUrl
   * @return blobsUrl
  **/
  @javax.annotation.Nonnull

  public String getBlobsUrl() {
    return blobsUrl;
  }


  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public RepositoryLite branchesUrl(String branchesUrl) {
    
    this.branchesUrl = branchesUrl;
    return this;
  }

   /**
   * Get branchesUrl
   * @return branchesUrl
  **/
  @javax.annotation.Nonnull

  public String getBranchesUrl() {
    return branchesUrl;
  }


  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public RepositoryLite collaboratorsUrl(String collaboratorsUrl) {
    
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

   /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
  **/
  @javax.annotation.Nonnull

  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }


  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public RepositoryLite commentsUrl(String commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nonnull

  public String getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public RepositoryLite commitsUrl(String commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nonnull

  public String getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public RepositoryLite compareUrl(String compareUrl) {
    
    this.compareUrl = compareUrl;
    return this;
  }

   /**
   * Get compareUrl
   * @return compareUrl
  **/
  @javax.annotation.Nonnull

  public String getCompareUrl() {
    return compareUrl;
  }


  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public RepositoryLite contentsUrl(String contentsUrl) {
    
    this.contentsUrl = contentsUrl;
    return this;
  }

   /**
   * Get contentsUrl
   * @return contentsUrl
  **/
  @javax.annotation.Nonnull

  public String getContentsUrl() {
    return contentsUrl;
  }


  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public RepositoryLite contributorsUrl(URI contributorsUrl) {
    
    this.contributorsUrl = contributorsUrl;
    return this;
  }

   /**
   * Get contributorsUrl
   * @return contributorsUrl
  **/
  @javax.annotation.Nonnull

  public URI getContributorsUrl() {
    return contributorsUrl;
  }


  public void setContributorsUrl(URI contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public RepositoryLite deploymentsUrl(URI deploymentsUrl) {
    
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

   /**
   * Get deploymentsUrl
   * @return deploymentsUrl
  **/
  @javax.annotation.Nonnull

  public URI getDeploymentsUrl() {
    return deploymentsUrl;
  }


  public void setDeploymentsUrl(URI deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public RepositoryLite description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public RepositoryLite downloadsUrl(URI downloadsUrl) {
    
    this.downloadsUrl = downloadsUrl;
    return this;
  }

   /**
   * Get downloadsUrl
   * @return downloadsUrl
  **/
  @javax.annotation.Nonnull

  public URI getDownloadsUrl() {
    return downloadsUrl;
  }


  public void setDownloadsUrl(URI downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public RepositoryLite eventsUrl(URI eventsUrl) {
    
    this.eventsUrl = eventsUrl;
    return this;
  }

   /**
   * Get eventsUrl
   * @return eventsUrl
  **/
  @javax.annotation.Nonnull

  public URI getEventsUrl() {
    return eventsUrl;
  }


  public void setEventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public RepositoryLite fork(Boolean fork) {
    
    this.fork = fork;
    return this;
  }

   /**
   * Get fork
   * @return fork
  **/
  @javax.annotation.Nonnull

  public Boolean getFork() {
    return fork;
  }


  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public RepositoryLite forksUrl(URI forksUrl) {
    
    this.forksUrl = forksUrl;
    return this;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @javax.annotation.Nonnull

  public URI getForksUrl() {
    return forksUrl;
  }


  public void setForksUrl(URI forksUrl) {
    this.forksUrl = forksUrl;
  }


  public RepositoryLite fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public RepositoryLite gitCommitsUrl(String gitCommitsUrl) {
    
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

   /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }


  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public RepositoryLite gitRefsUrl(String gitRefsUrl) {
    
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

   /**
   * Get gitRefsUrl
   * @return gitRefsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitRefsUrl() {
    return gitRefsUrl;
  }


  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public RepositoryLite gitTagsUrl(String gitTagsUrl) {
    
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

   /**
   * Get gitTagsUrl
   * @return gitTagsUrl
  **/
  @javax.annotation.Nonnull

  public String getGitTagsUrl() {
    return gitTagsUrl;
  }


  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public RepositoryLite hooksUrl(URI hooksUrl) {
    
    this.hooksUrl = hooksUrl;
    return this;
  }

   /**
   * Get hooksUrl
   * @return hooksUrl
  **/
  @javax.annotation.Nonnull

  public URI getHooksUrl() {
    return hooksUrl;
  }


  public void setHooksUrl(URI hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public RepositoryLite htmlUrl(URI htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nonnull

  public URI getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public RepositoryLite id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the repository
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public RepositoryLite issueCommentUrl(String issueCommentUrl) {
    
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

   /**
   * Get issueCommentUrl
   * @return issueCommentUrl
  **/
  @javax.annotation.Nonnull

  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }


  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public RepositoryLite issueEventsUrl(String issueEventsUrl) {
    
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

   /**
   * Get issueEventsUrl
   * @return issueEventsUrl
  **/
  @javax.annotation.Nonnull

  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }


  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public RepositoryLite issuesUrl(String issuesUrl) {
    
    this.issuesUrl = issuesUrl;
    return this;
  }

   /**
   * Get issuesUrl
   * @return issuesUrl
  **/
  @javax.annotation.Nonnull

  public String getIssuesUrl() {
    return issuesUrl;
  }


  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public RepositoryLite keysUrl(String keysUrl) {
    
    this.keysUrl = keysUrl;
    return this;
  }

   /**
   * Get keysUrl
   * @return keysUrl
  **/
  @javax.annotation.Nonnull

  public String getKeysUrl() {
    return keysUrl;
  }


  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public RepositoryLite labelsUrl(String labelsUrl) {
    
    this.labelsUrl = labelsUrl;
    return this;
  }

   /**
   * Get labelsUrl
   * @return labelsUrl
  **/
  @javax.annotation.Nonnull

  public String getLabelsUrl() {
    return labelsUrl;
  }


  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public RepositoryLite languagesUrl(URI languagesUrl) {
    
    this.languagesUrl = languagesUrl;
    return this;
  }

   /**
   * Get languagesUrl
   * @return languagesUrl
  **/
  @javax.annotation.Nonnull

  public URI getLanguagesUrl() {
    return languagesUrl;
  }


  public void setLanguagesUrl(URI languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public RepositoryLite mergesUrl(URI mergesUrl) {
    
    this.mergesUrl = mergesUrl;
    return this;
  }

   /**
   * Get mergesUrl
   * @return mergesUrl
  **/
  @javax.annotation.Nonnull

  public URI getMergesUrl() {
    return mergesUrl;
  }


  public void setMergesUrl(URI mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public RepositoryLite milestonesUrl(String milestonesUrl) {
    
    this.milestonesUrl = milestonesUrl;
    return this;
  }

   /**
   * Get milestonesUrl
   * @return milestonesUrl
  **/
  @javax.annotation.Nonnull

  public String getMilestonesUrl() {
    return milestonesUrl;
  }


  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public RepositoryLite name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the repository.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RepositoryLite nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public RepositoryLite notificationsUrl(String notificationsUrl) {
    
    this.notificationsUrl = notificationsUrl;
    return this;
  }

   /**
   * Get notificationsUrl
   * @return notificationsUrl
  **/
  @javax.annotation.Nonnull

  public String getNotificationsUrl() {
    return notificationsUrl;
  }


  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public RepositoryLite owner(User owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable

  public User getOwner() {
    return owner;
  }


  public void setOwner(User owner) {
    this.owner = owner;
  }


  public RepositoryLite _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Whether the repository is private or public.
   * @return _private
  **/
  @javax.annotation.Nonnull

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public RepositoryLite pullsUrl(String pullsUrl) {
    
    this.pullsUrl = pullsUrl;
    return this;
  }

   /**
   * Get pullsUrl
   * @return pullsUrl
  **/
  @javax.annotation.Nonnull

  public String getPullsUrl() {
    return pullsUrl;
  }


  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public RepositoryLite releasesUrl(String releasesUrl) {
    
    this.releasesUrl = releasesUrl;
    return this;
  }

   /**
   * Get releasesUrl
   * @return releasesUrl
  **/
  @javax.annotation.Nonnull

  public String getReleasesUrl() {
    return releasesUrl;
  }


  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public RepositoryLite stargazersUrl(URI stargazersUrl) {
    
    this.stargazersUrl = stargazersUrl;
    return this;
  }

   /**
   * Get stargazersUrl
   * @return stargazersUrl
  **/
  @javax.annotation.Nonnull

  public URI getStargazersUrl() {
    return stargazersUrl;
  }


  public void setStargazersUrl(URI stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public RepositoryLite statusesUrl(String statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nonnull

  public String getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public RepositoryLite subscribersUrl(URI subscribersUrl) {
    
    this.subscribersUrl = subscribersUrl;
    return this;
  }

   /**
   * Get subscribersUrl
   * @return subscribersUrl
  **/
  @javax.annotation.Nonnull

  public URI getSubscribersUrl() {
    return subscribersUrl;
  }


  public void setSubscribersUrl(URI subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public RepositoryLite subscriptionUrl(URI subscriptionUrl) {
    
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

   /**
   * Get subscriptionUrl
   * @return subscriptionUrl
  **/
  @javax.annotation.Nonnull

  public URI getSubscriptionUrl() {
    return subscriptionUrl;
  }


  public void setSubscriptionUrl(URI subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public RepositoryLite tagsUrl(URI tagsUrl) {
    
    this.tagsUrl = tagsUrl;
    return this;
  }

   /**
   * Get tagsUrl
   * @return tagsUrl
  **/
  @javax.annotation.Nonnull

  public URI getTagsUrl() {
    return tagsUrl;
  }


  public void setTagsUrl(URI tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public RepositoryLite teamsUrl(URI teamsUrl) {
    
    this.teamsUrl = teamsUrl;
    return this;
  }

   /**
   * Get teamsUrl
   * @return teamsUrl
  **/
  @javax.annotation.Nonnull

  public URI getTeamsUrl() {
    return teamsUrl;
  }


  public void setTeamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public RepositoryLite treesUrl(String treesUrl) {
    
    this.treesUrl = treesUrl;
    return this;
  }

   /**
   * Get treesUrl
   * @return treesUrl
  **/
  @javax.annotation.Nonnull

  public String getTreesUrl() {
    return treesUrl;
  }


  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public RepositoryLite url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryLite repositoryLite = (RepositoryLite) o;
    return Objects.equals(this.archiveUrl, repositoryLite.archiveUrl) &&
        Objects.equals(this.assigneesUrl, repositoryLite.assigneesUrl) &&
        Objects.equals(this.blobsUrl, repositoryLite.blobsUrl) &&
        Objects.equals(this.branchesUrl, repositoryLite.branchesUrl) &&
        Objects.equals(this.collaboratorsUrl, repositoryLite.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, repositoryLite.commentsUrl) &&
        Objects.equals(this.commitsUrl, repositoryLite.commitsUrl) &&
        Objects.equals(this.compareUrl, repositoryLite.compareUrl) &&
        Objects.equals(this.contentsUrl, repositoryLite.contentsUrl) &&
        Objects.equals(this.contributorsUrl, repositoryLite.contributorsUrl) &&
        Objects.equals(this.deploymentsUrl, repositoryLite.deploymentsUrl) &&
        Objects.equals(this.description, repositoryLite.description) &&
        Objects.equals(this.downloadsUrl, repositoryLite.downloadsUrl) &&
        Objects.equals(this.eventsUrl, repositoryLite.eventsUrl) &&
        Objects.equals(this.fork, repositoryLite.fork) &&
        Objects.equals(this.forksUrl, repositoryLite.forksUrl) &&
        Objects.equals(this.fullName, repositoryLite.fullName) &&
        Objects.equals(this.gitCommitsUrl, repositoryLite.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, repositoryLite.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, repositoryLite.gitTagsUrl) &&
        Objects.equals(this.hooksUrl, repositoryLite.hooksUrl) &&
        Objects.equals(this.htmlUrl, repositoryLite.htmlUrl) &&
        Objects.equals(this.id, repositoryLite.id) &&
        Objects.equals(this.issueCommentUrl, repositoryLite.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, repositoryLite.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, repositoryLite.issuesUrl) &&
        Objects.equals(this.keysUrl, repositoryLite.keysUrl) &&
        Objects.equals(this.labelsUrl, repositoryLite.labelsUrl) &&
        Objects.equals(this.languagesUrl, repositoryLite.languagesUrl) &&
        Objects.equals(this.mergesUrl, repositoryLite.mergesUrl) &&
        Objects.equals(this.milestonesUrl, repositoryLite.milestonesUrl) &&
        Objects.equals(this.name, repositoryLite.name) &&
        Objects.equals(this.nodeId, repositoryLite.nodeId) &&
        Objects.equals(this.notificationsUrl, repositoryLite.notificationsUrl) &&
        Objects.equals(this.owner, repositoryLite.owner) &&
        Objects.equals(this._private, repositoryLite._private) &&
        Objects.equals(this.pullsUrl, repositoryLite.pullsUrl) &&
        Objects.equals(this.releasesUrl, repositoryLite.releasesUrl) &&
        Objects.equals(this.stargazersUrl, repositoryLite.stargazersUrl) &&
        Objects.equals(this.statusesUrl, repositoryLite.statusesUrl) &&
        Objects.equals(this.subscribersUrl, repositoryLite.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, repositoryLite.subscriptionUrl) &&
        Objects.equals(this.tagsUrl, repositoryLite.tagsUrl) &&
        Objects.equals(this.teamsUrl, repositoryLite.teamsUrl) &&
        Objects.equals(this.treesUrl, repositoryLite.treesUrl) &&
        Objects.equals(this.url, repositoryLite.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveUrl, assigneesUrl, blobsUrl, branchesUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, deploymentsUrl, description, downloadsUrl, eventsUrl, fork, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, languagesUrl, mergesUrl, milestonesUrl, name, nodeId, notificationsUrl, owner, _private, pullsUrl, releasesUrl, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, tagsUrl, teamsUrl, treesUrl, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryLite {\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archive_url");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("languages_url");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("owner");
    openapiFields.add("private");
    openapiFields.add("pulls_url");
    openapiFields.add("releases_url");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("trees_url");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archive_url");
    openapiRequiredFields.add("assignees_url");
    openapiRequiredFields.add("blobs_url");
    openapiRequiredFields.add("branches_url");
    openapiRequiredFields.add("collaborators_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("compare_url");
    openapiRequiredFields.add("contents_url");
    openapiRequiredFields.add("contributors_url");
    openapiRequiredFields.add("deployments_url");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("downloads_url");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("fork");
    openapiRequiredFields.add("forks_url");
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("git_commits_url");
    openapiRequiredFields.add("git_refs_url");
    openapiRequiredFields.add("git_tags_url");
    openapiRequiredFields.add("hooks_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issue_comment_url");
    openapiRequiredFields.add("issue_events_url");
    openapiRequiredFields.add("issues_url");
    openapiRequiredFields.add("keys_url");
    openapiRequiredFields.add("labels_url");
    openapiRequiredFields.add("languages_url");
    openapiRequiredFields.add("merges_url");
    openapiRequiredFields.add("milestones_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("notifications_url");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("private");
    openapiRequiredFields.add("pulls_url");
    openapiRequiredFields.add("releases_url");
    openapiRequiredFields.add("stargazers_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("subscribers_url");
    openapiRequiredFields.add("subscription_url");
    openapiRequiredFields.add("tags_url");
    openapiRequiredFields.add("teams_url");
    openapiRequiredFields.add("trees_url");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RepositoryLite
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RepositoryLite.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryLite is not found in the empty JSON string", RepositoryLite.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RepositoryLite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryLite` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepositoryLite.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if (!jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if (!jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if (!jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if (!jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if (!jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if (!jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      if (!jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (!jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if (!jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if (!jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if (!jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if (!jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if (!jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if (!jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if (!jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if (!jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      if (!jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if (!jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      // validate the required field `owner`
      User.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      if (!jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      if (!jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if (!jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if (!jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if (!jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if (!jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      if (!jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryLite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryLite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryLite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryLite.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryLite>() {
           @Override
           public void write(JsonWriter out, RepositoryLite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryLite read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RepositoryLite given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepositoryLite
  * @throws IOException if the JSON string is invalid with respect to RepositoryLite
  */
  public static RepositoryLite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryLite.class);
  }

 /**
  * Convert an instance of RepositoryLite to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

