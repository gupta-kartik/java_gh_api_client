/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DependencyGraphDiffInnerVulnerabilitiesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DependencyGraphDiffInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class DependencyGraphDiffInner {
  /**
   * Gets or Sets changeType
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    ADDED("added"),
    
    REMOVED("removed");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeTypeEnum fromValue(String value) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "change_type";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeTypeEnum changeType;

  public static final String SERIALIZED_NAME_MANIFEST = "manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private String manifest;

  public static final String SERIALIZED_NAME_ECOSYSTEM = "ecosystem";
  @SerializedName(SERIALIZED_NAME_ECOSYSTEM)
  private String ecosystem;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_PACKAGE_URL = "package_url";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URL)
  private String packageUrl;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_SOURCE_REPOSITORY_URL = "source_repository_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_REPOSITORY_URL)
  private String sourceRepositoryUrl;

  public static final String SERIALIZED_NAME_VULNERABILITIES = "vulnerabilities";
  @SerializedName(SERIALIZED_NAME_VULNERABILITIES)
  private List<DependencyGraphDiffInnerVulnerabilitiesInner> vulnerabilities = new ArrayList<>();

  /**
   * Where the dependency is utilized. &#x60;development&#x60; means that the dependency is only utilized in the development environment. &#x60;runtime&#x60; means that the dependency is utilized at runtime and in the development environment.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    UNKNOWN("unknown"),
    
    RUNTIME("runtime"),
    
    DEVELOPMENT("development");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public DependencyGraphDiffInner() {
  }

  public DependencyGraphDiffInner changeType(ChangeTypeEnum changeType) {
    
    this.changeType = changeType;
    return this;
  }

   /**
   * Get changeType
   * @return changeType
  **/
  @javax.annotation.Nonnull

  public ChangeTypeEnum getChangeType() {
    return changeType;
  }


  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }


  public DependencyGraphDiffInner manifest(String manifest) {
    
    this.manifest = manifest;
    return this;
  }

   /**
   * Get manifest
   * @return manifest
  **/
  @javax.annotation.Nonnull

  public String getManifest() {
    return manifest;
  }


  public void setManifest(String manifest) {
    this.manifest = manifest;
  }


  public DependencyGraphDiffInner ecosystem(String ecosystem) {
    
    this.ecosystem = ecosystem;
    return this;
  }

   /**
   * Get ecosystem
   * @return ecosystem
  **/
  @javax.annotation.Nonnull

  public String getEcosystem() {
    return ecosystem;
  }


  public void setEcosystem(String ecosystem) {
    this.ecosystem = ecosystem;
  }


  public DependencyGraphDiffInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DependencyGraphDiffInner version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public DependencyGraphDiffInner packageUrl(String packageUrl) {
    
    this.packageUrl = packageUrl;
    return this;
  }

   /**
   * Get packageUrl
   * @return packageUrl
  **/
  @javax.annotation.Nullable

  public String getPackageUrl() {
    return packageUrl;
  }


  public void setPackageUrl(String packageUrl) {
    this.packageUrl = packageUrl;
  }


  public DependencyGraphDiffInner license(String license) {
    
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nullable

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    this.license = license;
  }


  public DependencyGraphDiffInner sourceRepositoryUrl(String sourceRepositoryUrl) {
    
    this.sourceRepositoryUrl = sourceRepositoryUrl;
    return this;
  }

   /**
   * Get sourceRepositoryUrl
   * @return sourceRepositoryUrl
  **/
  @javax.annotation.Nullable

  public String getSourceRepositoryUrl() {
    return sourceRepositoryUrl;
  }


  public void setSourceRepositoryUrl(String sourceRepositoryUrl) {
    this.sourceRepositoryUrl = sourceRepositoryUrl;
  }


  public DependencyGraphDiffInner vulnerabilities(List<DependencyGraphDiffInnerVulnerabilitiesInner> vulnerabilities) {
    
    this.vulnerabilities = vulnerabilities;
    return this;
  }

  public DependencyGraphDiffInner addVulnerabilitiesItem(DependencyGraphDiffInnerVulnerabilitiesInner vulnerabilitiesItem) {
    if (this.vulnerabilities == null) {
      this.vulnerabilities = new ArrayList<>();
    }
    this.vulnerabilities.add(vulnerabilitiesItem);
    return this;
  }

   /**
   * Get vulnerabilities
   * @return vulnerabilities
  **/
  @javax.annotation.Nonnull

  public List<DependencyGraphDiffInnerVulnerabilitiesInner> getVulnerabilities() {
    return vulnerabilities;
  }


  public void setVulnerabilities(List<DependencyGraphDiffInnerVulnerabilitiesInner> vulnerabilities) {
    this.vulnerabilities = vulnerabilities;
  }


  public DependencyGraphDiffInner scope(ScopeEnum scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Where the dependency is utilized. &#x60;development&#x60; means that the dependency is only utilized in the development environment. &#x60;runtime&#x60; means that the dependency is utilized at runtime and in the development environment.
   * @return scope
  **/
  @javax.annotation.Nonnull

  public ScopeEnum getScope() {
    return scope;
  }


  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependencyGraphDiffInner dependencyGraphDiffInner = (DependencyGraphDiffInner) o;
    return Objects.equals(this.changeType, dependencyGraphDiffInner.changeType) &&
        Objects.equals(this.manifest, dependencyGraphDiffInner.manifest) &&
        Objects.equals(this.ecosystem, dependencyGraphDiffInner.ecosystem) &&
        Objects.equals(this.name, dependencyGraphDiffInner.name) &&
        Objects.equals(this.version, dependencyGraphDiffInner.version) &&
        Objects.equals(this.packageUrl, dependencyGraphDiffInner.packageUrl) &&
        Objects.equals(this.license, dependencyGraphDiffInner.license) &&
        Objects.equals(this.sourceRepositoryUrl, dependencyGraphDiffInner.sourceRepositoryUrl) &&
        Objects.equals(this.vulnerabilities, dependencyGraphDiffInner.vulnerabilities) &&
        Objects.equals(this.scope, dependencyGraphDiffInner.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeType, manifest, ecosystem, name, version, packageUrl, license, sourceRepositoryUrl, vulnerabilities, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependencyGraphDiffInner {\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    ecosystem: ").append(toIndentedString(ecosystem)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    packageUrl: ").append(toIndentedString(packageUrl)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    sourceRepositoryUrl: ").append(toIndentedString(sourceRepositoryUrl)).append("\n");
    sb.append("    vulnerabilities: ").append(toIndentedString(vulnerabilities)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("change_type");
    openapiFields.add("manifest");
    openapiFields.add("ecosystem");
    openapiFields.add("name");
    openapiFields.add("version");
    openapiFields.add("package_url");
    openapiFields.add("license");
    openapiFields.add("source_repository_url");
    openapiFields.add("vulnerabilities");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("change_type");
    openapiRequiredFields.add("manifest");
    openapiRequiredFields.add("ecosystem");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("package_url");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("source_repository_url");
    openapiRequiredFields.add("vulnerabilities");
    openapiRequiredFields.add("scope");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DependencyGraphDiffInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DependencyGraphDiffInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DependencyGraphDiffInner is not found in the empty JSON string", DependencyGraphDiffInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DependencyGraphDiffInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DependencyGraphDiffInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DependencyGraphDiffInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("change_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_type").toString()));
      }
      if (!jsonObj.get("manifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifest").toString()));
      }
      if (!jsonObj.get("ecosystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ecosystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ecosystem").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("package_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_url").toString()));
      }
      if (!jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if (!jsonObj.get("source_repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_repository_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilities` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilities").toString()));
      }

      JsonArray jsonArrayvulnerabilities = jsonObj.getAsJsonArray("vulnerabilities");
      // validate the required field `vulnerabilities` (array)
      for (int i = 0; i < jsonArrayvulnerabilities.size(); i++) {
        DependencyGraphDiffInnerVulnerabilitiesInner.validateJsonObject(jsonArrayvulnerabilities.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DependencyGraphDiffInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DependencyGraphDiffInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DependencyGraphDiffInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DependencyGraphDiffInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DependencyGraphDiffInner>() {
           @Override
           public void write(JsonWriter out, DependencyGraphDiffInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DependencyGraphDiffInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DependencyGraphDiffInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DependencyGraphDiffInner
  * @throws IOException if the JSON string is invalid with respect to DependencyGraphDiffInner
  */
  public static DependencyGraphDiffInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DependencyGraphDiffInner.class);
  }

 /**
  * Convert an instance of DependencyGraphDiffInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

