/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the codespace&#39;s git repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CodespaceGitStatus {
  public static final String SERIALIZED_NAME_AHEAD = "ahead";
  @SerializedName(SERIALIZED_NAME_AHEAD)
  private Integer ahead;

  public static final String SERIALIZED_NAME_BEHIND = "behind";
  @SerializedName(SERIALIZED_NAME_BEHIND)
  private Integer behind;

  public static final String SERIALIZED_NAME_HAS_UNPUSHED_CHANGES = "has_unpushed_changes";
  @SerializedName(SERIALIZED_NAME_HAS_UNPUSHED_CHANGES)
  private Boolean hasUnpushedChanges;

  public static final String SERIALIZED_NAME_HAS_UNCOMMITTED_CHANGES = "has_uncommitted_changes";
  @SerializedName(SERIALIZED_NAME_HAS_UNCOMMITTED_CHANGES)
  private Boolean hasUncommittedChanges;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public CodespaceGitStatus() {
  }

  public CodespaceGitStatus ahead(Integer ahead) {
    
    this.ahead = ahead;
    return this;
  }

   /**
   * The number of commits the local repository is ahead of the remote.
   * @return ahead
  **/
  @javax.annotation.Nullable

  public Integer getAhead() {
    return ahead;
  }


  public void setAhead(Integer ahead) {
    this.ahead = ahead;
  }


  public CodespaceGitStatus behind(Integer behind) {
    
    this.behind = behind;
    return this;
  }

   /**
   * The number of commits the local repository is behind the remote.
   * @return behind
  **/
  @javax.annotation.Nullable

  public Integer getBehind() {
    return behind;
  }


  public void setBehind(Integer behind) {
    this.behind = behind;
  }


  public CodespaceGitStatus hasUnpushedChanges(Boolean hasUnpushedChanges) {
    
    this.hasUnpushedChanges = hasUnpushedChanges;
    return this;
  }

   /**
   * Whether the local repository has unpushed changes.
   * @return hasUnpushedChanges
  **/
  @javax.annotation.Nullable

  public Boolean getHasUnpushedChanges() {
    return hasUnpushedChanges;
  }


  public void setHasUnpushedChanges(Boolean hasUnpushedChanges) {
    this.hasUnpushedChanges = hasUnpushedChanges;
  }


  public CodespaceGitStatus hasUncommittedChanges(Boolean hasUncommittedChanges) {
    
    this.hasUncommittedChanges = hasUncommittedChanges;
    return this;
  }

   /**
   * Whether the local repository has uncommitted changes.
   * @return hasUncommittedChanges
  **/
  @javax.annotation.Nullable

  public Boolean getHasUncommittedChanges() {
    return hasUncommittedChanges;
  }


  public void setHasUncommittedChanges(Boolean hasUncommittedChanges) {
    this.hasUncommittedChanges = hasUncommittedChanges;
  }


  public CodespaceGitStatus ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * The current branch (or SHA if in detached HEAD state) of the local repository.
   * @return ref
  **/
  @javax.annotation.Nullable

  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodespaceGitStatus codespaceGitStatus = (CodespaceGitStatus) o;
    return Objects.equals(this.ahead, codespaceGitStatus.ahead) &&
        Objects.equals(this.behind, codespaceGitStatus.behind) &&
        Objects.equals(this.hasUnpushedChanges, codespaceGitStatus.hasUnpushedChanges) &&
        Objects.equals(this.hasUncommittedChanges, codespaceGitStatus.hasUncommittedChanges) &&
        Objects.equals(this.ref, codespaceGitStatus.ref);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ahead, behind, hasUnpushedChanges, hasUncommittedChanges, ref);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodespaceGitStatus {\n");
    sb.append("    ahead: ").append(toIndentedString(ahead)).append("\n");
    sb.append("    behind: ").append(toIndentedString(behind)).append("\n");
    sb.append("    hasUnpushedChanges: ").append(toIndentedString(hasUnpushedChanges)).append("\n");
    sb.append("    hasUncommittedChanges: ").append(toIndentedString(hasUncommittedChanges)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ahead");
    openapiFields.add("behind");
    openapiFields.add("has_unpushed_changes");
    openapiFields.add("has_uncommitted_changes");
    openapiFields.add("ref");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CodespaceGitStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CodespaceGitStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodespaceGitStatus is not found in the empty JSON string", CodespaceGitStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CodespaceGitStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodespaceGitStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodespaceGitStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodespaceGitStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodespaceGitStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodespaceGitStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<CodespaceGitStatus>() {
           @Override
           public void write(JsonWriter out, CodespaceGitStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodespaceGitStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CodespaceGitStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CodespaceGitStatus
  * @throws IOException if the JSON string is invalid with respect to CodespaceGitStatus
  */
  public static CodespaceGitStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodespaceGitStatus.class);
  }

 /**
  * Convert an instance of CodespaceGitStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

