/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ActionsBillingUsageMinutesUsedBreakdown;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActionsBillingUsage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class ActionsBillingUsage {
  public static final String SERIALIZED_NAME_TOTAL_MINUTES_USED = "total_minutes_used";
  @SerializedName(SERIALIZED_NAME_TOTAL_MINUTES_USED)
  private Integer totalMinutesUsed;

  public static final String SERIALIZED_NAME_TOTAL_PAID_MINUTES_USED = "total_paid_minutes_used";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAID_MINUTES_USED)
  private Integer totalPaidMinutesUsed;

  public static final String SERIALIZED_NAME_INCLUDED_MINUTES = "included_minutes";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MINUTES)
  private Integer includedMinutes;

  public static final String SERIALIZED_NAME_MINUTES_USED_BREAKDOWN = "minutes_used_breakdown";
  @SerializedName(SERIALIZED_NAME_MINUTES_USED_BREAKDOWN)
  private ActionsBillingUsageMinutesUsedBreakdown minutesUsedBreakdown;

  public ActionsBillingUsage() {
  }

  public ActionsBillingUsage totalMinutesUsed(Integer totalMinutesUsed) {
    
    this.totalMinutesUsed = totalMinutesUsed;
    return this;
  }

   /**
   * The sum of the free and paid GitHub Actions minutes used.
   * @return totalMinutesUsed
  **/
  @javax.annotation.Nonnull

  public Integer getTotalMinutesUsed() {
    return totalMinutesUsed;
  }


  public void setTotalMinutesUsed(Integer totalMinutesUsed) {
    this.totalMinutesUsed = totalMinutesUsed;
  }


  public ActionsBillingUsage totalPaidMinutesUsed(Integer totalPaidMinutesUsed) {
    
    this.totalPaidMinutesUsed = totalPaidMinutesUsed;
    return this;
  }

   /**
   * The total paid GitHub Actions minutes used.
   * @return totalPaidMinutesUsed
  **/
  @javax.annotation.Nonnull

  public Integer getTotalPaidMinutesUsed() {
    return totalPaidMinutesUsed;
  }


  public void setTotalPaidMinutesUsed(Integer totalPaidMinutesUsed) {
    this.totalPaidMinutesUsed = totalPaidMinutesUsed;
  }


  public ActionsBillingUsage includedMinutes(Integer includedMinutes) {
    
    this.includedMinutes = includedMinutes;
    return this;
  }

   /**
   * The amount of free GitHub Actions minutes available.
   * @return includedMinutes
  **/
  @javax.annotation.Nonnull

  public Integer getIncludedMinutes() {
    return includedMinutes;
  }


  public void setIncludedMinutes(Integer includedMinutes) {
    this.includedMinutes = includedMinutes;
  }


  public ActionsBillingUsage minutesUsedBreakdown(ActionsBillingUsageMinutesUsedBreakdown minutesUsedBreakdown) {
    
    this.minutesUsedBreakdown = minutesUsedBreakdown;
    return this;
  }

   /**
   * Get minutesUsedBreakdown
   * @return minutesUsedBreakdown
  **/
  @javax.annotation.Nonnull

  public ActionsBillingUsageMinutesUsedBreakdown getMinutesUsedBreakdown() {
    return minutesUsedBreakdown;
  }


  public void setMinutesUsedBreakdown(ActionsBillingUsageMinutesUsedBreakdown minutesUsedBreakdown) {
    this.minutesUsedBreakdown = minutesUsedBreakdown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionsBillingUsage actionsBillingUsage = (ActionsBillingUsage) o;
    return Objects.equals(this.totalMinutesUsed, actionsBillingUsage.totalMinutesUsed) &&
        Objects.equals(this.totalPaidMinutesUsed, actionsBillingUsage.totalPaidMinutesUsed) &&
        Objects.equals(this.includedMinutes, actionsBillingUsage.includedMinutes) &&
        Objects.equals(this.minutesUsedBreakdown, actionsBillingUsage.minutesUsedBreakdown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalMinutesUsed, totalPaidMinutesUsed, includedMinutes, minutesUsedBreakdown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionsBillingUsage {\n");
    sb.append("    totalMinutesUsed: ").append(toIndentedString(totalMinutesUsed)).append("\n");
    sb.append("    totalPaidMinutesUsed: ").append(toIndentedString(totalPaidMinutesUsed)).append("\n");
    sb.append("    includedMinutes: ").append(toIndentedString(includedMinutes)).append("\n");
    sb.append("    minutesUsedBreakdown: ").append(toIndentedString(minutesUsedBreakdown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_minutes_used");
    openapiFields.add("total_paid_minutes_used");
    openapiFields.add("included_minutes");
    openapiFields.add("minutes_used_breakdown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total_minutes_used");
    openapiRequiredFields.add("total_paid_minutes_used");
    openapiRequiredFields.add("included_minutes");
    openapiRequiredFields.add("minutes_used_breakdown");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActionsBillingUsage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActionsBillingUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionsBillingUsage is not found in the empty JSON string", ActionsBillingUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActionsBillingUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionsBillingUsage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionsBillingUsage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `minutes_used_breakdown`
      ActionsBillingUsageMinutesUsedBreakdown.validateJsonObject(jsonObj.getAsJsonObject("minutes_used_breakdown"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionsBillingUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionsBillingUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionsBillingUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionsBillingUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionsBillingUsage>() {
           @Override
           public void write(JsonWriter out, ActionsBillingUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionsBillingUsage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActionsBillingUsage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActionsBillingUsage
  * @throws IOException if the JSON string is invalid with respect to ActionsBillingUsage
  */
  public static ActionsBillingUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionsBillingUsage.class);
  }

 /**
  * Convert an instance of ActionsBillingUsage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

