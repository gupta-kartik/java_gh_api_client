/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DeploymentWorkflowRunHeadRepositoryOwner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookForkForkeeAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class WebhookForkForkeeAllOf {
  public static final String SERIALIZED_NAME_ALLOW_FORKING = "allow_forking";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORKING)
  private Boolean allowForking;

  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_CLONE_URL = "clone_url";
  @SerializedName(SERIALIZED_NAME_CLONE_URL)
  private String cloneUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private String contributorsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private String deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private String downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private String eventsUrl;

  /**
   * Gets or Sets fork
   */
  @JsonAdapter(ForkEnum.Adapter.class)
  public enum ForkEnum {
    TRUE("true");

    private Boolean value;

    ForkEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForkEnum fromValue(Boolean value) {
      for (ForkEnum b : ForkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForkEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return ForkEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private ForkEnum fork;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private Integer forks;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private Integer forksCount;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private String forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_GIT_URL = "git_url";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private String gitUrl;

  public static final String SERIALIZED_NAME_HAS_DOWNLOADS = "has_downloads";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOADS)
  private Boolean hasDownloads;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues;

  public static final String SERIALIZED_NAME_HAS_PAGES = "has_pages";
  @SerializedName(SERIALIZED_NAME_HAS_PAGES)
  private Boolean hasPages;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private String hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private Object language = null;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private String languagesUrl;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private Object license;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private String mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_MIRROR_URL = "mirror_url";
  @SerializedName(SERIALIZED_NAME_MIRROR_URL)
  private Object mirrorUrl = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OPEN_ISSUES = "open_issues";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES)
  private Integer openIssues;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private Integer openIssuesCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private DeploymentWorkflowRunHeadRepositoryOwner owner;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushed_at";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private String pushedAt;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_SSH_URL = "ssh_url";
  @SerializedName(SERIALIZED_NAME_SSH_URL)
  private String sshUrl;

  public static final String SERIALIZED_NAME_STARGAZERS_COUNT = "stargazers_count";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_COUNT)
  private Integer stargazersCount;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private String stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private String subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private String subscriptionUrl;

  public static final String SERIALIZED_NAME_SVN_URL = "svn_url";
  @SerializedName(SERIALIZED_NAME_SVN_URL)
  private String svnUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private String tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private String teamsUrl;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Object> topics;

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private Integer watchers;

  public static final String SERIALIZED_NAME_WATCHERS_COUNT = "watchers_count";
  @SerializedName(SERIALIZED_NAME_WATCHERS_COUNT)
  private Integer watchersCount;

  public WebhookForkForkeeAllOf() {
  }

  public WebhookForkForkeeAllOf allowForking(Boolean allowForking) {
    
    this.allowForking = allowForking;
    return this;
  }

   /**
   * Get allowForking
   * @return allowForking
  **/
  @javax.annotation.Nullable

  public Boolean getAllowForking() {
    return allowForking;
  }


  public void setAllowForking(Boolean allowForking) {
    this.allowForking = allowForking;
  }


  public WebhookForkForkeeAllOf archiveUrl(String archiveUrl) {
    
    this.archiveUrl = archiveUrl;
    return this;
  }

   /**
   * Get archiveUrl
   * @return archiveUrl
  **/
  @javax.annotation.Nullable

  public String getArchiveUrl() {
    return archiveUrl;
  }


  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public WebhookForkForkeeAllOf archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public WebhookForkForkeeAllOf assigneesUrl(String assigneesUrl) {
    
    this.assigneesUrl = assigneesUrl;
    return this;
  }

   /**
   * Get assigneesUrl
   * @return assigneesUrl
  **/
  @javax.annotation.Nullable

  public String getAssigneesUrl() {
    return assigneesUrl;
  }


  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public WebhookForkForkeeAllOf blobsUrl(String blobsUrl) {
    
    this.blobsUrl = blobsUrl;
    return this;
  }

   /**
   * Get blobsUrl
   * @return blobsUrl
  **/
  @javax.annotation.Nullable

  public String getBlobsUrl() {
    return blobsUrl;
  }


  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public WebhookForkForkeeAllOf branchesUrl(String branchesUrl) {
    
    this.branchesUrl = branchesUrl;
    return this;
  }

   /**
   * Get branchesUrl
   * @return branchesUrl
  **/
  @javax.annotation.Nullable

  public String getBranchesUrl() {
    return branchesUrl;
  }


  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public WebhookForkForkeeAllOf cloneUrl(String cloneUrl) {
    
    this.cloneUrl = cloneUrl;
    return this;
  }

   /**
   * Get cloneUrl
   * @return cloneUrl
  **/
  @javax.annotation.Nullable

  public String getCloneUrl() {
    return cloneUrl;
  }


  public void setCloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
  }


  public WebhookForkForkeeAllOf collaboratorsUrl(String collaboratorsUrl) {
    
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

   /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
  **/
  @javax.annotation.Nullable

  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }


  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public WebhookForkForkeeAllOf commentsUrl(String commentsUrl) {
    
    this.commentsUrl = commentsUrl;
    return this;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @javax.annotation.Nullable

  public String getCommentsUrl() {
    return commentsUrl;
  }


  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public WebhookForkForkeeAllOf commitsUrl(String commitsUrl) {
    
    this.commitsUrl = commitsUrl;
    return this;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @javax.annotation.Nullable

  public String getCommitsUrl() {
    return commitsUrl;
  }


  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public WebhookForkForkeeAllOf compareUrl(String compareUrl) {
    
    this.compareUrl = compareUrl;
    return this;
  }

   /**
   * Get compareUrl
   * @return compareUrl
  **/
  @javax.annotation.Nullable

  public String getCompareUrl() {
    return compareUrl;
  }


  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public WebhookForkForkeeAllOf contentsUrl(String contentsUrl) {
    
    this.contentsUrl = contentsUrl;
    return this;
  }

   /**
   * Get contentsUrl
   * @return contentsUrl
  **/
  @javax.annotation.Nullable

  public String getContentsUrl() {
    return contentsUrl;
  }


  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public WebhookForkForkeeAllOf contributorsUrl(String contributorsUrl) {
    
    this.contributorsUrl = contributorsUrl;
    return this;
  }

   /**
   * Get contributorsUrl
   * @return contributorsUrl
  **/
  @javax.annotation.Nullable

  public String getContributorsUrl() {
    return contributorsUrl;
  }


  public void setContributorsUrl(String contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public WebhookForkForkeeAllOf createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookForkForkeeAllOf defaultBranch(String defaultBranch) {
    
    this.defaultBranch = defaultBranch;
    return this;
  }

   /**
   * Get defaultBranch
   * @return defaultBranch
  **/
  @javax.annotation.Nullable

  public String getDefaultBranch() {
    return defaultBranch;
  }


  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public WebhookForkForkeeAllOf deploymentsUrl(String deploymentsUrl) {
    
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

   /**
   * Get deploymentsUrl
   * @return deploymentsUrl
  **/
  @javax.annotation.Nullable

  public String getDeploymentsUrl() {
    return deploymentsUrl;
  }


  public void setDeploymentsUrl(String deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public WebhookForkForkeeAllOf description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public WebhookForkForkeeAllOf disabled(Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

   /**
   * Get disabled
   * @return disabled
  **/
  @javax.annotation.Nullable

  public Boolean getDisabled() {
    return disabled;
  }


  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public WebhookForkForkeeAllOf downloadsUrl(String downloadsUrl) {
    
    this.downloadsUrl = downloadsUrl;
    return this;
  }

   /**
   * Get downloadsUrl
   * @return downloadsUrl
  **/
  @javax.annotation.Nullable

  public String getDownloadsUrl() {
    return downloadsUrl;
  }


  public void setDownloadsUrl(String downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public WebhookForkForkeeAllOf eventsUrl(String eventsUrl) {
    
    this.eventsUrl = eventsUrl;
    return this;
  }

   /**
   * Get eventsUrl
   * @return eventsUrl
  **/
  @javax.annotation.Nullable

  public String getEventsUrl() {
    return eventsUrl;
  }


  public void setEventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public WebhookForkForkeeAllOf fork(ForkEnum fork) {
    
    this.fork = fork;
    return this;
  }

   /**
   * Get fork
   * @return fork
  **/
  @javax.annotation.Nullable

  public ForkEnum getFork() {
    return fork;
  }


  public void setFork(ForkEnum fork) {
    this.fork = fork;
  }


  public WebhookForkForkeeAllOf forks(Integer forks) {
    
    this.forks = forks;
    return this;
  }

   /**
   * Get forks
   * @return forks
  **/
  @javax.annotation.Nullable

  public Integer getForks() {
    return forks;
  }


  public void setForks(Integer forks) {
    this.forks = forks;
  }


  public WebhookForkForkeeAllOf forksCount(Integer forksCount) {
    
    this.forksCount = forksCount;
    return this;
  }

   /**
   * Get forksCount
   * @return forksCount
  **/
  @javax.annotation.Nullable

  public Integer getForksCount() {
    return forksCount;
  }


  public void setForksCount(Integer forksCount) {
    this.forksCount = forksCount;
  }


  public WebhookForkForkeeAllOf forksUrl(String forksUrl) {
    
    this.forksUrl = forksUrl;
    return this;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @javax.annotation.Nullable

  public String getForksUrl() {
    return forksUrl;
  }


  public void setForksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
  }


  public WebhookForkForkeeAllOf fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public WebhookForkForkeeAllOf gitCommitsUrl(String gitCommitsUrl) {
    
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

   /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
  **/
  @javax.annotation.Nullable

  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }


  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public WebhookForkForkeeAllOf gitRefsUrl(String gitRefsUrl) {
    
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

   /**
   * Get gitRefsUrl
   * @return gitRefsUrl
  **/
  @javax.annotation.Nullable

  public String getGitRefsUrl() {
    return gitRefsUrl;
  }


  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public WebhookForkForkeeAllOf gitTagsUrl(String gitTagsUrl) {
    
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

   /**
   * Get gitTagsUrl
   * @return gitTagsUrl
  **/
  @javax.annotation.Nullable

  public String getGitTagsUrl() {
    return gitTagsUrl;
  }


  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public WebhookForkForkeeAllOf gitUrl(String gitUrl) {
    
    this.gitUrl = gitUrl;
    return this;
  }

   /**
   * Get gitUrl
   * @return gitUrl
  **/
  @javax.annotation.Nullable

  public String getGitUrl() {
    return gitUrl;
  }


  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }


  public WebhookForkForkeeAllOf hasDownloads(Boolean hasDownloads) {
    
    this.hasDownloads = hasDownloads;
    return this;
  }

   /**
   * Get hasDownloads
   * @return hasDownloads
  **/
  @javax.annotation.Nullable

  public Boolean getHasDownloads() {
    return hasDownloads;
  }


  public void setHasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
  }


  public WebhookForkForkeeAllOf hasIssues(Boolean hasIssues) {
    
    this.hasIssues = hasIssues;
    return this;
  }

   /**
   * Get hasIssues
   * @return hasIssues
  **/
  @javax.annotation.Nullable

  public Boolean getHasIssues() {
    return hasIssues;
  }


  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public WebhookForkForkeeAllOf hasPages(Boolean hasPages) {
    
    this.hasPages = hasPages;
    return this;
  }

   /**
   * Get hasPages
   * @return hasPages
  **/
  @javax.annotation.Nullable

  public Boolean getHasPages() {
    return hasPages;
  }


  public void setHasPages(Boolean hasPages) {
    this.hasPages = hasPages;
  }


  public WebhookForkForkeeAllOf hasProjects(Boolean hasProjects) {
    
    this.hasProjects = hasProjects;
    return this;
  }

   /**
   * Get hasProjects
   * @return hasProjects
  **/
  @javax.annotation.Nullable

  public Boolean getHasProjects() {
    return hasProjects;
  }


  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public WebhookForkForkeeAllOf hasWiki(Boolean hasWiki) {
    
    this.hasWiki = hasWiki;
    return this;
  }

   /**
   * Get hasWiki
   * @return hasWiki
  **/
  @javax.annotation.Nullable

  public Boolean getHasWiki() {
    return hasWiki;
  }


  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public WebhookForkForkeeAllOf homepage(String homepage) {
    
    this.homepage = homepage;
    return this;
  }

   /**
   * Get homepage
   * @return homepage
  **/
  @javax.annotation.Nullable

  public String getHomepage() {
    return homepage;
  }


  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public WebhookForkForkeeAllOf hooksUrl(String hooksUrl) {
    
    this.hooksUrl = hooksUrl;
    return this;
  }

   /**
   * Get hooksUrl
   * @return hooksUrl
  **/
  @javax.annotation.Nullable

  public String getHooksUrl() {
    return hooksUrl;
  }


  public void setHooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public WebhookForkForkeeAllOf htmlUrl(String htmlUrl) {
    
    this.htmlUrl = htmlUrl;
    return this;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @javax.annotation.Nullable

  public String getHtmlUrl() {
    return htmlUrl;
  }


  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WebhookForkForkeeAllOf id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookForkForkeeAllOf isTemplate(Boolean isTemplate) {
    
    this.isTemplate = isTemplate;
    return this;
  }

   /**
   * Get isTemplate
   * @return isTemplate
  **/
  @javax.annotation.Nullable

  public Boolean getIsTemplate() {
    return isTemplate;
  }


  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public WebhookForkForkeeAllOf issueCommentUrl(String issueCommentUrl) {
    
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

   /**
   * Get issueCommentUrl
   * @return issueCommentUrl
  **/
  @javax.annotation.Nullable

  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }


  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public WebhookForkForkeeAllOf issueEventsUrl(String issueEventsUrl) {
    
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

   /**
   * Get issueEventsUrl
   * @return issueEventsUrl
  **/
  @javax.annotation.Nullable

  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }


  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public WebhookForkForkeeAllOf issuesUrl(String issuesUrl) {
    
    this.issuesUrl = issuesUrl;
    return this;
  }

   /**
   * Get issuesUrl
   * @return issuesUrl
  **/
  @javax.annotation.Nullable

  public String getIssuesUrl() {
    return issuesUrl;
  }


  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public WebhookForkForkeeAllOf keysUrl(String keysUrl) {
    
    this.keysUrl = keysUrl;
    return this;
  }

   /**
   * Get keysUrl
   * @return keysUrl
  **/
  @javax.annotation.Nullable

  public String getKeysUrl() {
    return keysUrl;
  }


  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public WebhookForkForkeeAllOf labelsUrl(String labelsUrl) {
    
    this.labelsUrl = labelsUrl;
    return this;
  }

   /**
   * Get labelsUrl
   * @return labelsUrl
  **/
  @javax.annotation.Nullable

  public String getLabelsUrl() {
    return labelsUrl;
  }


  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public WebhookForkForkeeAllOf language(Object language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable

  public Object getLanguage() {
    return language;
  }


  public void setLanguage(Object language) {
    this.language = language;
  }


  public WebhookForkForkeeAllOf languagesUrl(String languagesUrl) {
    
    this.languagesUrl = languagesUrl;
    return this;
  }

   /**
   * Get languagesUrl
   * @return languagesUrl
  **/
  @javax.annotation.Nullable

  public String getLanguagesUrl() {
    return languagesUrl;
  }


  public void setLanguagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public WebhookForkForkeeAllOf license(Object license) {
    
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nullable

  public Object getLicense() {
    return license;
  }


  public void setLicense(Object license) {
    this.license = license;
  }


  public WebhookForkForkeeAllOf mergesUrl(String mergesUrl) {
    
    this.mergesUrl = mergesUrl;
    return this;
  }

   /**
   * Get mergesUrl
   * @return mergesUrl
  **/
  @javax.annotation.Nullable

  public String getMergesUrl() {
    return mergesUrl;
  }


  public void setMergesUrl(String mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public WebhookForkForkeeAllOf milestonesUrl(String milestonesUrl) {
    
    this.milestonesUrl = milestonesUrl;
    return this;
  }

   /**
   * Get milestonesUrl
   * @return milestonesUrl
  **/
  @javax.annotation.Nullable

  public String getMilestonesUrl() {
    return milestonesUrl;
  }


  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public WebhookForkForkeeAllOf mirrorUrl(Object mirrorUrl) {
    
    this.mirrorUrl = mirrorUrl;
    return this;
  }

   /**
   * Get mirrorUrl
   * @return mirrorUrl
  **/
  @javax.annotation.Nullable

  public Object getMirrorUrl() {
    return mirrorUrl;
  }


  public void setMirrorUrl(Object mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
  }


  public WebhookForkForkeeAllOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookForkForkeeAllOf nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @javax.annotation.Nullable

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WebhookForkForkeeAllOf notificationsUrl(String notificationsUrl) {
    
    this.notificationsUrl = notificationsUrl;
    return this;
  }

   /**
   * Get notificationsUrl
   * @return notificationsUrl
  **/
  @javax.annotation.Nullable

  public String getNotificationsUrl() {
    return notificationsUrl;
  }


  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public WebhookForkForkeeAllOf openIssues(Integer openIssues) {
    
    this.openIssues = openIssues;
    return this;
  }

   /**
   * Get openIssues
   * @return openIssues
  **/
  @javax.annotation.Nullable

  public Integer getOpenIssues() {
    return openIssues;
  }


  public void setOpenIssues(Integer openIssues) {
    this.openIssues = openIssues;
  }


  public WebhookForkForkeeAllOf openIssuesCount(Integer openIssuesCount) {
    
    this.openIssuesCount = openIssuesCount;
    return this;
  }

   /**
   * Get openIssuesCount
   * @return openIssuesCount
  **/
  @javax.annotation.Nullable

  public Integer getOpenIssuesCount() {
    return openIssuesCount;
  }


  public void setOpenIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public WebhookForkForkeeAllOf owner(DeploymentWorkflowRunHeadRepositoryOwner owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable

  public DeploymentWorkflowRunHeadRepositoryOwner getOwner() {
    return owner;
  }


  public void setOwner(DeploymentWorkflowRunHeadRepositoryOwner owner) {
    this.owner = owner;
  }


  public WebhookForkForkeeAllOf _private(Boolean _private) {
    
    this._private = _private;
    return this;
  }

   /**
   * Get _private
   * @return _private
  **/
  @javax.annotation.Nullable

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public WebhookForkForkeeAllOf _public(Boolean _public) {
    
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @javax.annotation.Nullable

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public WebhookForkForkeeAllOf pullsUrl(String pullsUrl) {
    
    this.pullsUrl = pullsUrl;
    return this;
  }

   /**
   * Get pullsUrl
   * @return pullsUrl
  **/
  @javax.annotation.Nullable

  public String getPullsUrl() {
    return pullsUrl;
  }


  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public WebhookForkForkeeAllOf pushedAt(String pushedAt) {
    
    this.pushedAt = pushedAt;
    return this;
  }

   /**
   * Get pushedAt
   * @return pushedAt
  **/
  @javax.annotation.Nullable

  public String getPushedAt() {
    return pushedAt;
  }


  public void setPushedAt(String pushedAt) {
    this.pushedAt = pushedAt;
  }


  public WebhookForkForkeeAllOf releasesUrl(String releasesUrl) {
    
    this.releasesUrl = releasesUrl;
    return this;
  }

   /**
   * Get releasesUrl
   * @return releasesUrl
  **/
  @javax.annotation.Nullable

  public String getReleasesUrl() {
    return releasesUrl;
  }


  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public WebhookForkForkeeAllOf size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public WebhookForkForkeeAllOf sshUrl(String sshUrl) {
    
    this.sshUrl = sshUrl;
    return this;
  }

   /**
   * Get sshUrl
   * @return sshUrl
  **/
  @javax.annotation.Nullable

  public String getSshUrl() {
    return sshUrl;
  }


  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }


  public WebhookForkForkeeAllOf stargazersCount(Integer stargazersCount) {
    
    this.stargazersCount = stargazersCount;
    return this;
  }

   /**
   * Get stargazersCount
   * @return stargazersCount
  **/
  @javax.annotation.Nullable

  public Integer getStargazersCount() {
    return stargazersCount;
  }


  public void setStargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
  }


  public WebhookForkForkeeAllOf stargazersUrl(String stargazersUrl) {
    
    this.stargazersUrl = stargazersUrl;
    return this;
  }

   /**
   * Get stargazersUrl
   * @return stargazersUrl
  **/
  @javax.annotation.Nullable

  public String getStargazersUrl() {
    return stargazersUrl;
  }


  public void setStargazersUrl(String stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public WebhookForkForkeeAllOf statusesUrl(String statusesUrl) {
    
    this.statusesUrl = statusesUrl;
    return this;
  }

   /**
   * Get statusesUrl
   * @return statusesUrl
  **/
  @javax.annotation.Nullable

  public String getStatusesUrl() {
    return statusesUrl;
  }


  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public WebhookForkForkeeAllOf subscribersUrl(String subscribersUrl) {
    
    this.subscribersUrl = subscribersUrl;
    return this;
  }

   /**
   * Get subscribersUrl
   * @return subscribersUrl
  **/
  @javax.annotation.Nullable

  public String getSubscribersUrl() {
    return subscribersUrl;
  }


  public void setSubscribersUrl(String subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public WebhookForkForkeeAllOf subscriptionUrl(String subscriptionUrl) {
    
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

   /**
   * Get subscriptionUrl
   * @return subscriptionUrl
  **/
  @javax.annotation.Nullable

  public String getSubscriptionUrl() {
    return subscriptionUrl;
  }


  public void setSubscriptionUrl(String subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public WebhookForkForkeeAllOf svnUrl(String svnUrl) {
    
    this.svnUrl = svnUrl;
    return this;
  }

   /**
   * Get svnUrl
   * @return svnUrl
  **/
  @javax.annotation.Nullable

  public String getSvnUrl() {
    return svnUrl;
  }


  public void setSvnUrl(String svnUrl) {
    this.svnUrl = svnUrl;
  }


  public WebhookForkForkeeAllOf tagsUrl(String tagsUrl) {
    
    this.tagsUrl = tagsUrl;
    return this;
  }

   /**
   * Get tagsUrl
   * @return tagsUrl
  **/
  @javax.annotation.Nullable

  public String getTagsUrl() {
    return tagsUrl;
  }


  public void setTagsUrl(String tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public WebhookForkForkeeAllOf teamsUrl(String teamsUrl) {
    
    this.teamsUrl = teamsUrl;
    return this;
  }

   /**
   * Get teamsUrl
   * @return teamsUrl
  **/
  @javax.annotation.Nullable

  public String getTeamsUrl() {
    return teamsUrl;
  }


  public void setTeamsUrl(String teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public WebhookForkForkeeAllOf topics(List<Object> topics) {
    
    this.topics = topics;
    return this;
  }

  public WebhookForkForkeeAllOf addTopicsItem(Object topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @javax.annotation.Nullable

  public List<Object> getTopics() {
    return topics;
  }


  public void setTopics(List<Object> topics) {
    this.topics = topics;
  }


  public WebhookForkForkeeAllOf treesUrl(String treesUrl) {
    
    this.treesUrl = treesUrl;
    return this;
  }

   /**
   * Get treesUrl
   * @return treesUrl
  **/
  @javax.annotation.Nullable

  public String getTreesUrl() {
    return treesUrl;
  }


  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public WebhookForkForkeeAllOf updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookForkForkeeAllOf url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public WebhookForkForkeeAllOf visibility(String visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @javax.annotation.Nullable

  public String getVisibility() {
    return visibility;
  }


  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public WebhookForkForkeeAllOf watchers(Integer watchers) {
    
    this.watchers = watchers;
    return this;
  }

   /**
   * Get watchers
   * @return watchers
  **/
  @javax.annotation.Nullable

  public Integer getWatchers() {
    return watchers;
  }


  public void setWatchers(Integer watchers) {
    this.watchers = watchers;
  }


  public WebhookForkForkeeAllOf watchersCount(Integer watchersCount) {
    
    this.watchersCount = watchersCount;
    return this;
  }

   /**
   * Get watchersCount
   * @return watchersCount
  **/
  @javax.annotation.Nullable

  public Integer getWatchersCount() {
    return watchersCount;
  }


  public void setWatchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookForkForkeeAllOf webhookForkForkeeAllOf = (WebhookForkForkeeAllOf) o;
    return Objects.equals(this.allowForking, webhookForkForkeeAllOf.allowForking) &&
        Objects.equals(this.archiveUrl, webhookForkForkeeAllOf.archiveUrl) &&
        Objects.equals(this.archived, webhookForkForkeeAllOf.archived) &&
        Objects.equals(this.assigneesUrl, webhookForkForkeeAllOf.assigneesUrl) &&
        Objects.equals(this.blobsUrl, webhookForkForkeeAllOf.blobsUrl) &&
        Objects.equals(this.branchesUrl, webhookForkForkeeAllOf.branchesUrl) &&
        Objects.equals(this.cloneUrl, webhookForkForkeeAllOf.cloneUrl) &&
        Objects.equals(this.collaboratorsUrl, webhookForkForkeeAllOf.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, webhookForkForkeeAllOf.commentsUrl) &&
        Objects.equals(this.commitsUrl, webhookForkForkeeAllOf.commitsUrl) &&
        Objects.equals(this.compareUrl, webhookForkForkeeAllOf.compareUrl) &&
        Objects.equals(this.contentsUrl, webhookForkForkeeAllOf.contentsUrl) &&
        Objects.equals(this.contributorsUrl, webhookForkForkeeAllOf.contributorsUrl) &&
        Objects.equals(this.createdAt, webhookForkForkeeAllOf.createdAt) &&
        Objects.equals(this.defaultBranch, webhookForkForkeeAllOf.defaultBranch) &&
        Objects.equals(this.deploymentsUrl, webhookForkForkeeAllOf.deploymentsUrl) &&
        Objects.equals(this.description, webhookForkForkeeAllOf.description) &&
        Objects.equals(this.disabled, webhookForkForkeeAllOf.disabled) &&
        Objects.equals(this.downloadsUrl, webhookForkForkeeAllOf.downloadsUrl) &&
        Objects.equals(this.eventsUrl, webhookForkForkeeAllOf.eventsUrl) &&
        Objects.equals(this.fork, webhookForkForkeeAllOf.fork) &&
        Objects.equals(this.forks, webhookForkForkeeAllOf.forks) &&
        Objects.equals(this.forksCount, webhookForkForkeeAllOf.forksCount) &&
        Objects.equals(this.forksUrl, webhookForkForkeeAllOf.forksUrl) &&
        Objects.equals(this.fullName, webhookForkForkeeAllOf.fullName) &&
        Objects.equals(this.gitCommitsUrl, webhookForkForkeeAllOf.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, webhookForkForkeeAllOf.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, webhookForkForkeeAllOf.gitTagsUrl) &&
        Objects.equals(this.gitUrl, webhookForkForkeeAllOf.gitUrl) &&
        Objects.equals(this.hasDownloads, webhookForkForkeeAllOf.hasDownloads) &&
        Objects.equals(this.hasIssues, webhookForkForkeeAllOf.hasIssues) &&
        Objects.equals(this.hasPages, webhookForkForkeeAllOf.hasPages) &&
        Objects.equals(this.hasProjects, webhookForkForkeeAllOf.hasProjects) &&
        Objects.equals(this.hasWiki, webhookForkForkeeAllOf.hasWiki) &&
        Objects.equals(this.homepage, webhookForkForkeeAllOf.homepage) &&
        Objects.equals(this.hooksUrl, webhookForkForkeeAllOf.hooksUrl) &&
        Objects.equals(this.htmlUrl, webhookForkForkeeAllOf.htmlUrl) &&
        Objects.equals(this.id, webhookForkForkeeAllOf.id) &&
        Objects.equals(this.isTemplate, webhookForkForkeeAllOf.isTemplate) &&
        Objects.equals(this.issueCommentUrl, webhookForkForkeeAllOf.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, webhookForkForkeeAllOf.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, webhookForkForkeeAllOf.issuesUrl) &&
        Objects.equals(this.keysUrl, webhookForkForkeeAllOf.keysUrl) &&
        Objects.equals(this.labelsUrl, webhookForkForkeeAllOf.labelsUrl) &&
        Objects.equals(this.language, webhookForkForkeeAllOf.language) &&
        Objects.equals(this.languagesUrl, webhookForkForkeeAllOf.languagesUrl) &&
        Objects.equals(this.license, webhookForkForkeeAllOf.license) &&
        Objects.equals(this.mergesUrl, webhookForkForkeeAllOf.mergesUrl) &&
        Objects.equals(this.milestonesUrl, webhookForkForkeeAllOf.milestonesUrl) &&
        Objects.equals(this.mirrorUrl, webhookForkForkeeAllOf.mirrorUrl) &&
        Objects.equals(this.name, webhookForkForkeeAllOf.name) &&
        Objects.equals(this.nodeId, webhookForkForkeeAllOf.nodeId) &&
        Objects.equals(this.notificationsUrl, webhookForkForkeeAllOf.notificationsUrl) &&
        Objects.equals(this.openIssues, webhookForkForkeeAllOf.openIssues) &&
        Objects.equals(this.openIssuesCount, webhookForkForkeeAllOf.openIssuesCount) &&
        Objects.equals(this.owner, webhookForkForkeeAllOf.owner) &&
        Objects.equals(this._private, webhookForkForkeeAllOf._private) &&
        Objects.equals(this._public, webhookForkForkeeAllOf._public) &&
        Objects.equals(this.pullsUrl, webhookForkForkeeAllOf.pullsUrl) &&
        Objects.equals(this.pushedAt, webhookForkForkeeAllOf.pushedAt) &&
        Objects.equals(this.releasesUrl, webhookForkForkeeAllOf.releasesUrl) &&
        Objects.equals(this.size, webhookForkForkeeAllOf.size) &&
        Objects.equals(this.sshUrl, webhookForkForkeeAllOf.sshUrl) &&
        Objects.equals(this.stargazersCount, webhookForkForkeeAllOf.stargazersCount) &&
        Objects.equals(this.stargazersUrl, webhookForkForkeeAllOf.stargazersUrl) &&
        Objects.equals(this.statusesUrl, webhookForkForkeeAllOf.statusesUrl) &&
        Objects.equals(this.subscribersUrl, webhookForkForkeeAllOf.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, webhookForkForkeeAllOf.subscriptionUrl) &&
        Objects.equals(this.svnUrl, webhookForkForkeeAllOf.svnUrl) &&
        Objects.equals(this.tagsUrl, webhookForkForkeeAllOf.tagsUrl) &&
        Objects.equals(this.teamsUrl, webhookForkForkeeAllOf.teamsUrl) &&
        Objects.equals(this.topics, webhookForkForkeeAllOf.topics) &&
        Objects.equals(this.treesUrl, webhookForkForkeeAllOf.treesUrl) &&
        Objects.equals(this.updatedAt, webhookForkForkeeAllOf.updatedAt) &&
        Objects.equals(this.url, webhookForkForkeeAllOf.url) &&
        Objects.equals(this.visibility, webhookForkForkeeAllOf.visibility) &&
        Objects.equals(this.watchers, webhookForkForkeeAllOf.watchers) &&
        Objects.equals(this.watchersCount, webhookForkForkeeAllOf.watchersCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowForking, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, isTemplate, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, _public, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, visibility, watchers, watchersCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookForkForkeeAllOf {\n");
    sb.append("    allowForking: ").append(toIndentedString(allowForking)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    cloneUrl: ").append(toIndentedString(cloneUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hasDownloads: ").append(toIndentedString(hasDownloads)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasPages: ").append(toIndentedString(hasPages)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    mirrorUrl: ").append(toIndentedString(mirrorUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    openIssues: ").append(toIndentedString(openIssues)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    stargazersCount: ").append(toIndentedString(stargazersCount)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    svnUrl: ").append(toIndentedString(svnUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("    watchersCount: ").append(toIndentedString(watchersCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_forking");
    openapiFields.add("archive_url");
    openapiFields.add("archived");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("clone_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("created_at");
    openapiFields.add("default_branch");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks");
    openapiFields.add("forks_count");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("git_url");
    openapiFields.add("has_downloads");
    openapiFields.add("has_issues");
    openapiFields.add("has_pages");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("homepage");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_template");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("language");
    openapiFields.add("languages_url");
    openapiFields.add("license");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("mirror_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("open_issues");
    openapiFields.add("open_issues_count");
    openapiFields.add("owner");
    openapiFields.add("private");
    openapiFields.add("public");
    openapiFields.add("pulls_url");
    openapiFields.add("pushed_at");
    openapiFields.add("releases_url");
    openapiFields.add("size");
    openapiFields.add("ssh_url");
    openapiFields.add("stargazers_count");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("svn_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("topics");
    openapiFields.add("trees_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("visibility");
    openapiFields.add("watchers");
    openapiFields.add("watchers_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookForkForkeeAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookForkForkeeAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookForkForkeeAllOf is not found in the empty JSON string", WebhookForkForkeeAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookForkForkeeAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookForkForkeeAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("archive_url") != null && !jsonObj.get("archive_url").isJsonNull()) && !jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if ((jsonObj.get("assignees_url") != null && !jsonObj.get("assignees_url").isJsonNull()) && !jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if ((jsonObj.get("blobs_url") != null && !jsonObj.get("blobs_url").isJsonNull()) && !jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if ((jsonObj.get("branches_url") != null && !jsonObj.get("branches_url").isJsonNull()) && !jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if ((jsonObj.get("clone_url") != null && !jsonObj.get("clone_url").isJsonNull()) && !jsonObj.get("clone_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_url").toString()));
      }
      if ((jsonObj.get("collaborators_url") != null && !jsonObj.get("collaborators_url").isJsonNull()) && !jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if ((jsonObj.get("comments_url") != null && !jsonObj.get("comments_url").isJsonNull()) && !jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if ((jsonObj.get("commits_url") != null && !jsonObj.get("commits_url").isJsonNull()) && !jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if ((jsonObj.get("compare_url") != null && !jsonObj.get("compare_url").isJsonNull()) && !jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if ((jsonObj.get("contents_url") != null && !jsonObj.get("contents_url").isJsonNull()) && !jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if ((jsonObj.get("contributors_url") != null && !jsonObj.get("contributors_url").isJsonNull()) && !jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("deployments_url") != null && !jsonObj.get("deployments_url").isJsonNull()) && !jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("downloads_url") != null && !jsonObj.get("downloads_url").isJsonNull()) && !jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if ((jsonObj.get("events_url") != null && !jsonObj.get("events_url").isJsonNull()) && !jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if ((jsonObj.get("forks_url") != null && !jsonObj.get("forks_url").isJsonNull()) && !jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("git_commits_url") != null && !jsonObj.get("git_commits_url").isJsonNull()) && !jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if ((jsonObj.get("git_refs_url") != null && !jsonObj.get("git_refs_url").isJsonNull()) && !jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if ((jsonObj.get("git_tags_url") != null && !jsonObj.get("git_tags_url").isJsonNull()) && !jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if ((jsonObj.get("git_url") != null && !jsonObj.get("git_url").isJsonNull()) && !jsonObj.get("git_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_url").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if ((jsonObj.get("hooks_url") != null && !jsonObj.get("hooks_url").isJsonNull()) && !jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("issue_comment_url") != null && !jsonObj.get("issue_comment_url").isJsonNull()) && !jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if ((jsonObj.get("issue_events_url") != null && !jsonObj.get("issue_events_url").isJsonNull()) && !jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if ((jsonObj.get("issues_url") != null && !jsonObj.get("issues_url").isJsonNull()) && !jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if ((jsonObj.get("keys_url") != null && !jsonObj.get("keys_url").isJsonNull()) && !jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if ((jsonObj.get("labels_url") != null && !jsonObj.get("labels_url").isJsonNull()) && !jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if ((jsonObj.get("languages_url") != null && !jsonObj.get("languages_url").isJsonNull()) && !jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      if ((jsonObj.get("merges_url") != null && !jsonObj.get("merges_url").isJsonNull()) && !jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if ((jsonObj.get("milestones_url") != null && !jsonObj.get("milestones_url").isJsonNull()) && !jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("notifications_url") != null && !jsonObj.get("notifications_url").isJsonNull()) && !jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        DeploymentWorkflowRunHeadRepositoryOwner.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      if ((jsonObj.get("pulls_url") != null && !jsonObj.get("pulls_url").isJsonNull()) && !jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      if ((jsonObj.get("pushed_at") != null && !jsonObj.get("pushed_at").isJsonNull()) && !jsonObj.get("pushed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushed_at").toString()));
      }
      if ((jsonObj.get("releases_url") != null && !jsonObj.get("releases_url").isJsonNull()) && !jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if ((jsonObj.get("ssh_url") != null && !jsonObj.get("ssh_url").isJsonNull()) && !jsonObj.get("ssh_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url").toString()));
      }
      if ((jsonObj.get("stargazers_url") != null && !jsonObj.get("stargazers_url").isJsonNull()) && !jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if ((jsonObj.get("statuses_url") != null && !jsonObj.get("statuses_url").isJsonNull()) && !jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if ((jsonObj.get("subscribers_url") != null && !jsonObj.get("subscribers_url").isJsonNull()) && !jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if ((jsonObj.get("subscription_url") != null && !jsonObj.get("subscription_url").isJsonNull()) && !jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if ((jsonObj.get("svn_url") != null && !jsonObj.get("svn_url").isJsonNull()) && !jsonObj.get("svn_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svn_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svn_url").toString()));
      }
      if ((jsonObj.get("tags_url") != null && !jsonObj.get("tags_url").isJsonNull()) && !jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if ((jsonObj.get("teams_url") != null && !jsonObj.get("teams_url").isJsonNull()) && !jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if ((jsonObj.get("trees_url") != null && !jsonObj.get("trees_url").isJsonNull()) && !jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookForkForkeeAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookForkForkeeAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookForkForkeeAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookForkForkeeAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookForkForkeeAllOf>() {
           @Override
           public void write(JsonWriter out, WebhookForkForkeeAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookForkForkeeAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookForkForkeeAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookForkForkeeAllOf
  * @throws IOException if the JSON string is invalid with respect to WebhookForkForkeeAllOf
  */
  public static WebhookForkForkeeAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookForkForkeeAllOf.class);
  }

 /**
  * Convert an instance of WebhookForkForkeeAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

