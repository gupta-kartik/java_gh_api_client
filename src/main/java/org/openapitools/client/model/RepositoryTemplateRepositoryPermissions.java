/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepositoryTemplateRepositoryPermissions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class RepositoryTemplateRepositoryPermissions {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_MAINTAIN = "maintain";
  @SerializedName(SERIALIZED_NAME_MAINTAIN)
  private Boolean maintain;

  public static final String SERIALIZED_NAME_PUSH = "push";
  @SerializedName(SERIALIZED_NAME_PUSH)
  private Boolean push;

  public static final String SERIALIZED_NAME_TRIAGE = "triage";
  @SerializedName(SERIALIZED_NAME_TRIAGE)
  private Boolean triage;

  public static final String SERIALIZED_NAME_PULL = "pull";
  @SerializedName(SERIALIZED_NAME_PULL)
  private Boolean pull;

  public RepositoryTemplateRepositoryPermissions() {
  }

  public RepositoryTemplateRepositoryPermissions admin(Boolean admin) {
    
    this.admin = admin;
    return this;
  }

   /**
   * Get admin
   * @return admin
  **/
  @javax.annotation.Nullable

  public Boolean getAdmin() {
    return admin;
  }


  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public RepositoryTemplateRepositoryPermissions maintain(Boolean maintain) {
    
    this.maintain = maintain;
    return this;
  }

   /**
   * Get maintain
   * @return maintain
  **/
  @javax.annotation.Nullable

  public Boolean getMaintain() {
    return maintain;
  }


  public void setMaintain(Boolean maintain) {
    this.maintain = maintain;
  }


  public RepositoryTemplateRepositoryPermissions push(Boolean push) {
    
    this.push = push;
    return this;
  }

   /**
   * Get push
   * @return push
  **/
  @javax.annotation.Nullable

  public Boolean getPush() {
    return push;
  }


  public void setPush(Boolean push) {
    this.push = push;
  }


  public RepositoryTemplateRepositoryPermissions triage(Boolean triage) {
    
    this.triage = triage;
    return this;
  }

   /**
   * Get triage
   * @return triage
  **/
  @javax.annotation.Nullable

  public Boolean getTriage() {
    return triage;
  }


  public void setTriage(Boolean triage) {
    this.triage = triage;
  }


  public RepositoryTemplateRepositoryPermissions pull(Boolean pull) {
    
    this.pull = pull;
    return this;
  }

   /**
   * Get pull
   * @return pull
  **/
  @javax.annotation.Nullable

  public Boolean getPull() {
    return pull;
  }


  public void setPull(Boolean pull) {
    this.pull = pull;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryTemplateRepositoryPermissions repositoryTemplateRepositoryPermissions = (RepositoryTemplateRepositoryPermissions) o;
    return Objects.equals(this.admin, repositoryTemplateRepositoryPermissions.admin) &&
        Objects.equals(this.maintain, repositoryTemplateRepositoryPermissions.maintain) &&
        Objects.equals(this.push, repositoryTemplateRepositoryPermissions.push) &&
        Objects.equals(this.triage, repositoryTemplateRepositoryPermissions.triage) &&
        Objects.equals(this.pull, repositoryTemplateRepositoryPermissions.pull);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, maintain, push, triage, pull);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryTemplateRepositoryPermissions {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    maintain: ").append(toIndentedString(maintain)).append("\n");
    sb.append("    push: ").append(toIndentedString(push)).append("\n");
    sb.append("    triage: ").append(toIndentedString(triage)).append("\n");
    sb.append("    pull: ").append(toIndentedString(pull)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("maintain");
    openapiFields.add("push");
    openapiFields.add("triage");
    openapiFields.add("pull");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RepositoryTemplateRepositoryPermissions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RepositoryTemplateRepositoryPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryTemplateRepositoryPermissions is not found in the empty JSON string", RepositoryTemplateRepositoryPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RepositoryTemplateRepositoryPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryTemplateRepositoryPermissions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryTemplateRepositoryPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryTemplateRepositoryPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryTemplateRepositoryPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryTemplateRepositoryPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryTemplateRepositoryPermissions>() {
           @Override
           public void write(JsonWriter out, RepositoryTemplateRepositoryPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryTemplateRepositoryPermissions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RepositoryTemplateRepositoryPermissions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepositoryTemplateRepositoryPermissions
  * @throws IOException if the JSON string is invalid with respect to RepositoryTemplateRepositoryPermissions
  */
  public static RepositoryTemplateRepositoryPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryTemplateRepositoryPermissions.class);
  }

 /**
  * Convert an instance of RepositoryTemplateRepositoryPermissions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

