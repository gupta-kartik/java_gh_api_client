/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.SecretScanningAlertResolution;
import org.openapitools.client.model.SecretScanningAlertState;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecretScanningAlert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class SecretScanningAlert {
  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_LOCATIONS_URL = "locations_url";
  @SerializedName(SERIALIZED_NAME_LOCATIONS_URL)
  private URI locationsUrl;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SecretScanningAlertState state;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private SecretScanningAlertResolution resolution;

  public static final String SERIALIZED_NAME_RESOLVED_AT = "resolved_at";
  @SerializedName(SERIALIZED_NAME_RESOLVED_AT)
  private OffsetDateTime resolvedAt;

  public static final String SERIALIZED_NAME_RESOLVED_BY = "resolved_by";
  @SerializedName(SERIALIZED_NAME_RESOLVED_BY)
  private NullableSimpleUser resolvedBy;

  public static final String SERIALIZED_NAME_RESOLUTION_COMMENT = "resolution_comment";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_COMMENT)
  private String resolutionComment;

  public static final String SERIALIZED_NAME_SECRET_TYPE = "secret_type";
  @SerializedName(SERIALIZED_NAME_SECRET_TYPE)
  private String secretType;

  public static final String SERIALIZED_NAME_SECRET_TYPE_DISPLAY_NAME = "secret_type_display_name";
  @SerializedName(SERIALIZED_NAME_SECRET_TYPE_DISPLAY_NAME)
  private String secretTypeDisplayName;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED = "push_protection_bypassed";
  @SerializedName(SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED)
  private Boolean pushProtectionBypassed;

  public static final String SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED_BY = "push_protection_bypassed_by";
  @SerializedName(SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED_BY)
  private NullableSimpleUser pushProtectionBypassedBy;

  public static final String SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED_AT = "push_protection_bypassed_at";
  @SerializedName(SERIALIZED_NAME_PUSH_PROTECTION_BYPASSED_AT)
  private OffsetDateTime pushProtectionBypassedAt;

  public SecretScanningAlert() {
  }

  
  public SecretScanningAlert(
     Integer number, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     URI url, 
     URI htmlUrl
  ) {
    this();
    this.number = number;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.url = url;
    this.htmlUrl = htmlUrl;
  }

   /**
   * The security alert number.
   * @return number
  **/
  @javax.annotation.Nullable

  public Integer getNumber() {
    return number;
  }




   /**
   * The time that the alert was created in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * The time that the alert was last updated in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




   /**
   * The REST API URL of the alert resource.
   * @return url
  **/
  @javax.annotation.Nullable

  public URI getUrl() {
    return url;
  }




   /**
   * The GitHub URL of the alert resource.
   * @return htmlUrl
  **/
  @javax.annotation.Nullable

  public URI getHtmlUrl() {
    return htmlUrl;
  }




  public SecretScanningAlert locationsUrl(URI locationsUrl) {
    
    this.locationsUrl = locationsUrl;
    return this;
  }

   /**
   * The REST API URL of the code locations for this alert.
   * @return locationsUrl
  **/
  @javax.annotation.Nullable

  public URI getLocationsUrl() {
    return locationsUrl;
  }


  public void setLocationsUrl(URI locationsUrl) {
    this.locationsUrl = locationsUrl;
  }


  public SecretScanningAlert state(SecretScanningAlertState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public SecretScanningAlertState getState() {
    return state;
  }


  public void setState(SecretScanningAlertState state) {
    this.state = state;
  }


  public SecretScanningAlert resolution(SecretScanningAlertResolution resolution) {
    
    this.resolution = resolution;
    return this;
  }

   /**
   * Get resolution
   * @return resolution
  **/
  @javax.annotation.Nullable

  public SecretScanningAlertResolution getResolution() {
    return resolution;
  }


  public void setResolution(SecretScanningAlertResolution resolution) {
    this.resolution = resolution;
  }


  public SecretScanningAlert resolvedAt(OffsetDateTime resolvedAt) {
    
    this.resolvedAt = resolvedAt;
    return this;
  }

   /**
   * The time that the alert was resolved in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return resolvedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getResolvedAt() {
    return resolvedAt;
  }


  public void setResolvedAt(OffsetDateTime resolvedAt) {
    this.resolvedAt = resolvedAt;
  }


  public SecretScanningAlert resolvedBy(NullableSimpleUser resolvedBy) {
    
    this.resolvedBy = resolvedBy;
    return this;
  }

   /**
   * Get resolvedBy
   * @return resolvedBy
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getResolvedBy() {
    return resolvedBy;
  }


  public void setResolvedBy(NullableSimpleUser resolvedBy) {
    this.resolvedBy = resolvedBy;
  }


  public SecretScanningAlert resolutionComment(String resolutionComment) {
    
    this.resolutionComment = resolutionComment;
    return this;
  }

   /**
   * An optional comment to resolve an alert.
   * @return resolutionComment
  **/
  @javax.annotation.Nullable

  public String getResolutionComment() {
    return resolutionComment;
  }


  public void setResolutionComment(String resolutionComment) {
    this.resolutionComment = resolutionComment;
  }


  public SecretScanningAlert secretType(String secretType) {
    
    this.secretType = secretType;
    return this;
  }

   /**
   * The type of secret that secret scanning detected.
   * @return secretType
  **/
  @javax.annotation.Nullable

  public String getSecretType() {
    return secretType;
  }


  public void setSecretType(String secretType) {
    this.secretType = secretType;
  }


  public SecretScanningAlert secretTypeDisplayName(String secretTypeDisplayName) {
    
    this.secretTypeDisplayName = secretTypeDisplayName;
    return this;
  }

   /**
   * User-friendly name for the detected secret, matching the &#x60;secret_type&#x60;. For a list of built-in patterns, see \&quot;[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\&quot;
   * @return secretTypeDisplayName
  **/
  @javax.annotation.Nullable

  public String getSecretTypeDisplayName() {
    return secretTypeDisplayName;
  }


  public void setSecretTypeDisplayName(String secretTypeDisplayName) {
    this.secretTypeDisplayName = secretTypeDisplayName;
  }


  public SecretScanningAlert secret(String secret) {
    
    this.secret = secret;
    return this;
  }

   /**
   * The secret that was detected.
   * @return secret
  **/
  @javax.annotation.Nullable

  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    this.secret = secret;
  }


  public SecretScanningAlert pushProtectionBypassed(Boolean pushProtectionBypassed) {
    
    this.pushProtectionBypassed = pushProtectionBypassed;
    return this;
  }

   /**
   * Whether push protection was bypassed for the detected secret.
   * @return pushProtectionBypassed
  **/
  @javax.annotation.Nullable

  public Boolean getPushProtectionBypassed() {
    return pushProtectionBypassed;
  }


  public void setPushProtectionBypassed(Boolean pushProtectionBypassed) {
    this.pushProtectionBypassed = pushProtectionBypassed;
  }


  public SecretScanningAlert pushProtectionBypassedBy(NullableSimpleUser pushProtectionBypassedBy) {
    
    this.pushProtectionBypassedBy = pushProtectionBypassedBy;
    return this;
  }

   /**
   * Get pushProtectionBypassedBy
   * @return pushProtectionBypassedBy
  **/
  @javax.annotation.Nullable

  public NullableSimpleUser getPushProtectionBypassedBy() {
    return pushProtectionBypassedBy;
  }


  public void setPushProtectionBypassedBy(NullableSimpleUser pushProtectionBypassedBy) {
    this.pushProtectionBypassedBy = pushProtectionBypassedBy;
  }


  public SecretScanningAlert pushProtectionBypassedAt(OffsetDateTime pushProtectionBypassedAt) {
    
    this.pushProtectionBypassedAt = pushProtectionBypassedAt;
    return this;
  }

   /**
   * The time that push protection was bypassed in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return pushProtectionBypassedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getPushProtectionBypassedAt() {
    return pushProtectionBypassedAt;
  }


  public void setPushProtectionBypassedAt(OffsetDateTime pushProtectionBypassedAt) {
    this.pushProtectionBypassedAt = pushProtectionBypassedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretScanningAlert secretScanningAlert = (SecretScanningAlert) o;
    return Objects.equals(this.number, secretScanningAlert.number) &&
        Objects.equals(this.createdAt, secretScanningAlert.createdAt) &&
        Objects.equals(this.updatedAt, secretScanningAlert.updatedAt) &&
        Objects.equals(this.url, secretScanningAlert.url) &&
        Objects.equals(this.htmlUrl, secretScanningAlert.htmlUrl) &&
        Objects.equals(this.locationsUrl, secretScanningAlert.locationsUrl) &&
        Objects.equals(this.state, secretScanningAlert.state) &&
        Objects.equals(this.resolution, secretScanningAlert.resolution) &&
        Objects.equals(this.resolvedAt, secretScanningAlert.resolvedAt) &&
        Objects.equals(this.resolvedBy, secretScanningAlert.resolvedBy) &&
        Objects.equals(this.resolutionComment, secretScanningAlert.resolutionComment) &&
        Objects.equals(this.secretType, secretScanningAlert.secretType) &&
        Objects.equals(this.secretTypeDisplayName, secretScanningAlert.secretTypeDisplayName) &&
        Objects.equals(this.secret, secretScanningAlert.secret) &&
        Objects.equals(this.pushProtectionBypassed, secretScanningAlert.pushProtectionBypassed) &&
        Objects.equals(this.pushProtectionBypassedBy, secretScanningAlert.pushProtectionBypassedBy) &&
        Objects.equals(this.pushProtectionBypassedAt, secretScanningAlert.pushProtectionBypassedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(number, createdAt, updatedAt, url, htmlUrl, locationsUrl, state, resolution, resolvedAt, resolvedBy, resolutionComment, secretType, secretTypeDisplayName, secret, pushProtectionBypassed, pushProtectionBypassedBy, pushProtectionBypassedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretScanningAlert {\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    locationsUrl: ").append(toIndentedString(locationsUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    resolvedAt: ").append(toIndentedString(resolvedAt)).append("\n");
    sb.append("    resolvedBy: ").append(toIndentedString(resolvedBy)).append("\n");
    sb.append("    resolutionComment: ").append(toIndentedString(resolutionComment)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("    secretTypeDisplayName: ").append(toIndentedString(secretTypeDisplayName)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    pushProtectionBypassed: ").append(toIndentedString(pushProtectionBypassed)).append("\n");
    sb.append("    pushProtectionBypassedBy: ").append(toIndentedString(pushProtectionBypassedBy)).append("\n");
    sb.append("    pushProtectionBypassedAt: ").append(toIndentedString(pushProtectionBypassedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("number");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("html_url");
    openapiFields.add("locations_url");
    openapiFields.add("state");
    openapiFields.add("resolution");
    openapiFields.add("resolved_at");
    openapiFields.add("resolved_by");
    openapiFields.add("resolution_comment");
    openapiFields.add("secret_type");
    openapiFields.add("secret_type_display_name");
    openapiFields.add("secret");
    openapiFields.add("push_protection_bypassed");
    openapiFields.add("push_protection_bypassed_by");
    openapiFields.add("push_protection_bypassed_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SecretScanningAlert
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SecretScanningAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretScanningAlert is not found in the empty JSON string", SecretScanningAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SecretScanningAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretScanningAlert` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("locations_url") != null && !jsonObj.get("locations_url").isJsonNull()) && !jsonObj.get("locations_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locations_url").toString()));
      }
      // validate the optional field `resolved_by`
      if (jsonObj.get("resolved_by") != null && !jsonObj.get("resolved_by").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("resolved_by"));
      }
      if ((jsonObj.get("resolution_comment") != null && !jsonObj.get("resolution_comment").isJsonNull()) && !jsonObj.get("resolution_comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution_comment").toString()));
      }
      if ((jsonObj.get("secret_type") != null && !jsonObj.get("secret_type").isJsonNull()) && !jsonObj.get("secret_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_type").toString()));
      }
      if ((jsonObj.get("secret_type_display_name") != null && !jsonObj.get("secret_type_display_name").isJsonNull()) && !jsonObj.get("secret_type_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_type_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_type_display_name").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      // validate the optional field `push_protection_bypassed_by`
      if (jsonObj.get("push_protection_bypassed_by") != null && !jsonObj.get("push_protection_bypassed_by").isJsonNull()) {
        NullableSimpleUser.validateJsonObject(jsonObj.getAsJsonObject("push_protection_bypassed_by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretScanningAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretScanningAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretScanningAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretScanningAlert>() {
           @Override
           public void write(JsonWriter out, SecretScanningAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretScanningAlert read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SecretScanningAlert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SecretScanningAlert
  * @throws IOException if the JSON string is invalid with respect to SecretScanningAlert
  */
  public static SecretScanningAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretScanningAlert.class);
  }

 /**
  * Convert an instance of SecretScanningAlert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

