/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.RepositoryRuleBranchNamePattern;
import org.openapitools.client.model.RepositoryRuleCommitAuthorEmailPattern;
import org.openapitools.client.model.RepositoryRuleCommitMessagePattern;
import org.openapitools.client.model.RepositoryRuleCommitMessagePatternParameters;
import org.openapitools.client.model.RepositoryRuleCommitterEmailPattern;
import org.openapitools.client.model.RepositoryRuleCreation;
import org.openapitools.client.model.RepositoryRuleDeletion;
import org.openapitools.client.model.RepositoryRuleNonFastForward;
import org.openapitools.client.model.RepositoryRulePullRequest;
import org.openapitools.client.model.RepositoryRuleRequiredDeployments;
import org.openapitools.client.model.RepositoryRuleRequiredLinearHistory;
import org.openapitools.client.model.RepositoryRuleRequiredSignatures;
import org.openapitools.client.model.RepositoryRuleRequiredStatusChecks;
import org.openapitools.client.model.RepositoryRuleTagNamePattern;
import org.openapitools.client.model.RepositoryRuleUpdate;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class RepositoryRule extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RepositoryRule.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RepositoryRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RepositoryRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RepositoryRuleBranchNamePattern> adapterRepositoryRuleBranchNamePattern = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleBranchNamePattern.class));
            final TypeAdapter<RepositoryRuleCommitAuthorEmailPattern> adapterRepositoryRuleCommitAuthorEmailPattern = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleCommitAuthorEmailPattern.class));
            final TypeAdapter<RepositoryRuleCommitMessagePattern> adapterRepositoryRuleCommitMessagePattern = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleCommitMessagePattern.class));
            final TypeAdapter<RepositoryRuleCommitterEmailPattern> adapterRepositoryRuleCommitterEmailPattern = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleCommitterEmailPattern.class));
            final TypeAdapter<RepositoryRuleCreation> adapterRepositoryRuleCreation = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleCreation.class));
            final TypeAdapter<RepositoryRuleDeletion> adapterRepositoryRuleDeletion = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleDeletion.class));
            final TypeAdapter<RepositoryRuleNonFastForward> adapterRepositoryRuleNonFastForward = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleNonFastForward.class));
            final TypeAdapter<RepositoryRulePullRequest> adapterRepositoryRulePullRequest = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRulePullRequest.class));
            final TypeAdapter<RepositoryRuleRequiredDeployments> adapterRepositoryRuleRequiredDeployments = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleRequiredDeployments.class));
            final TypeAdapter<RepositoryRuleRequiredLinearHistory> adapterRepositoryRuleRequiredLinearHistory = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleRequiredLinearHistory.class));
            final TypeAdapter<RepositoryRuleRequiredSignatures> adapterRepositoryRuleRequiredSignatures = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleRequiredSignatures.class));
            final TypeAdapter<RepositoryRuleRequiredStatusChecks> adapterRepositoryRuleRequiredStatusChecks = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleRequiredStatusChecks.class));
            final TypeAdapter<RepositoryRuleTagNamePattern> adapterRepositoryRuleTagNamePattern = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleTagNamePattern.class));
            final TypeAdapter<RepositoryRuleUpdate> adapterRepositoryRuleUpdate = gson.getDelegateAdapter(this, TypeToken.get(RepositoryRuleUpdate.class));

            return (TypeAdapter<T>) new TypeAdapter<RepositoryRule>() {
                @Override
                public void write(JsonWriter out, RepositoryRule value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleBranchNamePattern`
                    if (value.getActualInstance() instanceof RepositoryRuleBranchNamePattern) {
                        JsonObject obj = adapterRepositoryRuleBranchNamePattern.toJsonTree((RepositoryRuleBranchNamePattern)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleCommitAuthorEmailPattern`
                    if (value.getActualInstance() instanceof RepositoryRuleCommitAuthorEmailPattern) {
                        JsonObject obj = adapterRepositoryRuleCommitAuthorEmailPattern.toJsonTree((RepositoryRuleCommitAuthorEmailPattern)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleCommitMessagePattern`
                    if (value.getActualInstance() instanceof RepositoryRuleCommitMessagePattern) {
                        JsonObject obj = adapterRepositoryRuleCommitMessagePattern.toJsonTree((RepositoryRuleCommitMessagePattern)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleCommitterEmailPattern`
                    if (value.getActualInstance() instanceof RepositoryRuleCommitterEmailPattern) {
                        JsonObject obj = adapterRepositoryRuleCommitterEmailPattern.toJsonTree((RepositoryRuleCommitterEmailPattern)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleCreation`
                    if (value.getActualInstance() instanceof RepositoryRuleCreation) {
                        JsonObject obj = adapterRepositoryRuleCreation.toJsonTree((RepositoryRuleCreation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleDeletion`
                    if (value.getActualInstance() instanceof RepositoryRuleDeletion) {
                        JsonObject obj = adapterRepositoryRuleDeletion.toJsonTree((RepositoryRuleDeletion)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleNonFastForward`
                    if (value.getActualInstance() instanceof RepositoryRuleNonFastForward) {
                        JsonObject obj = adapterRepositoryRuleNonFastForward.toJsonTree((RepositoryRuleNonFastForward)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRulePullRequest`
                    if (value.getActualInstance() instanceof RepositoryRulePullRequest) {
                        JsonObject obj = adapterRepositoryRulePullRequest.toJsonTree((RepositoryRulePullRequest)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleRequiredDeployments`
                    if (value.getActualInstance() instanceof RepositoryRuleRequiredDeployments) {
                        JsonObject obj = adapterRepositoryRuleRequiredDeployments.toJsonTree((RepositoryRuleRequiredDeployments)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleRequiredLinearHistory`
                    if (value.getActualInstance() instanceof RepositoryRuleRequiredLinearHistory) {
                        JsonObject obj = adapterRepositoryRuleRequiredLinearHistory.toJsonTree((RepositoryRuleRequiredLinearHistory)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleRequiredSignatures`
                    if (value.getActualInstance() instanceof RepositoryRuleRequiredSignatures) {
                        JsonObject obj = adapterRepositoryRuleRequiredSignatures.toJsonTree((RepositoryRuleRequiredSignatures)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleRequiredStatusChecks`
                    if (value.getActualInstance() instanceof RepositoryRuleRequiredStatusChecks) {
                        JsonObject obj = adapterRepositoryRuleRequiredStatusChecks.toJsonTree((RepositoryRuleRequiredStatusChecks)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleTagNamePattern`
                    if (value.getActualInstance() instanceof RepositoryRuleTagNamePattern) {
                        JsonObject obj = adapterRepositoryRuleTagNamePattern.toJsonTree((RepositoryRuleTagNamePattern)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RepositoryRuleUpdate`
                    if (value.getActualInstance() instanceof RepositoryRuleUpdate) {
                        JsonObject obj = adapterRepositoryRuleUpdate.toJsonTree((RepositoryRuleUpdate)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate");
                }

                @Override
                public RepositoryRule read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize RepositoryRuleBranchNamePattern
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleBranchNamePattern.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleBranchNamePattern;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleBranchNamePattern'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleBranchNamePattern failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleBranchNamePattern'", e);
                    }

                    // deserialize RepositoryRuleCommitAuthorEmailPattern
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleCommitAuthorEmailPattern.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleCommitAuthorEmailPattern;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleCommitAuthorEmailPattern'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleCommitAuthorEmailPattern failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleCommitAuthorEmailPattern'", e);
                    }

                    // deserialize RepositoryRuleCommitMessagePattern
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleCommitMessagePattern.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleCommitMessagePattern;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleCommitMessagePattern'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleCommitMessagePattern failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleCommitMessagePattern'", e);
                    }

                    // deserialize RepositoryRuleCommitterEmailPattern
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleCommitterEmailPattern.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleCommitterEmailPattern;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleCommitterEmailPattern'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleCommitterEmailPattern failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleCommitterEmailPattern'", e);
                    }

                    // deserialize RepositoryRuleCreation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleCreation.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleCreation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleCreation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleCreation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleCreation'", e);
                    }

                    // deserialize RepositoryRuleDeletion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleDeletion.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleDeletion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleDeletion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleDeletion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleDeletion'", e);
                    }

                    // deserialize RepositoryRuleNonFastForward
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleNonFastForward.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleNonFastForward;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleNonFastForward'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleNonFastForward failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleNonFastForward'", e);
                    }

                    // deserialize RepositoryRulePullRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRulePullRequest.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRulePullRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRulePullRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRulePullRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRulePullRequest'", e);
                    }

                    // deserialize RepositoryRuleRequiredDeployments
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleRequiredDeployments.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleRequiredDeployments;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleRequiredDeployments'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredDeployments failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleRequiredDeployments'", e);
                    }

                    // deserialize RepositoryRuleRequiredLinearHistory
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleRequiredLinearHistory.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleRequiredLinearHistory;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleRequiredLinearHistory'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredLinearHistory failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleRequiredLinearHistory'", e);
                    }

                    // deserialize RepositoryRuleRequiredSignatures
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleRequiredSignatures.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleRequiredSignatures;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleRequiredSignatures'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredSignatures failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleRequiredSignatures'", e);
                    }

                    // deserialize RepositoryRuleRequiredStatusChecks
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleRequiredStatusChecks.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleRequiredStatusChecks;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleRequiredStatusChecks'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredStatusChecks failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleRequiredStatusChecks'", e);
                    }

                    // deserialize RepositoryRuleTagNamePattern
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleTagNamePattern.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleTagNamePattern;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleTagNamePattern'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleTagNamePattern failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleTagNamePattern'", e);
                    }

                    // deserialize RepositoryRuleUpdate
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RepositoryRuleUpdate.validateJsonObject(jsonObject);
                        actualAdapter = adapterRepositoryRuleUpdate;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RepositoryRuleUpdate'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RepositoryRuleUpdate failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RepositoryRuleUpdate'", e);
                    }

                    if (match == 1) {
                        RepositoryRule ret = new RepositoryRule();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RepositoryRule: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public RepositoryRule() {
        super("oneOf", Boolean.FALSE);
    }

    public RepositoryRule(RepositoryRuleBranchNamePattern o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleCommitAuthorEmailPattern o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleCommitMessagePattern o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleCommitterEmailPattern o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleCreation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleDeletion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleNonFastForward o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRulePullRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleRequiredDeployments o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleRequiredLinearHistory o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleRequiredSignatures o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleRequiredStatusChecks o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleTagNamePattern o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RepositoryRule(RepositoryRuleUpdate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RepositoryRuleBranchNamePattern", new GenericType<RepositoryRuleBranchNamePattern>() {
        });
        schemas.put("RepositoryRuleCommitAuthorEmailPattern", new GenericType<RepositoryRuleCommitAuthorEmailPattern>() {
        });
        schemas.put("RepositoryRuleCommitMessagePattern", new GenericType<RepositoryRuleCommitMessagePattern>() {
        });
        schemas.put("RepositoryRuleCommitterEmailPattern", new GenericType<RepositoryRuleCommitterEmailPattern>() {
        });
        schemas.put("RepositoryRuleCreation", new GenericType<RepositoryRuleCreation>() {
        });
        schemas.put("RepositoryRuleDeletion", new GenericType<RepositoryRuleDeletion>() {
        });
        schemas.put("RepositoryRuleNonFastForward", new GenericType<RepositoryRuleNonFastForward>() {
        });
        schemas.put("RepositoryRulePullRequest", new GenericType<RepositoryRulePullRequest>() {
        });
        schemas.put("RepositoryRuleRequiredDeployments", new GenericType<RepositoryRuleRequiredDeployments>() {
        });
        schemas.put("RepositoryRuleRequiredLinearHistory", new GenericType<RepositoryRuleRequiredLinearHistory>() {
        });
        schemas.put("RepositoryRuleRequiredSignatures", new GenericType<RepositoryRuleRequiredSignatures>() {
        });
        schemas.put("RepositoryRuleRequiredStatusChecks", new GenericType<RepositoryRuleRequiredStatusChecks>() {
        });
        schemas.put("RepositoryRuleTagNamePattern", new GenericType<RepositoryRuleTagNamePattern>() {
        });
        schemas.put("RepositoryRuleUpdate", new GenericType<RepositoryRuleUpdate>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return RepositoryRule.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RepositoryRuleBranchNamePattern) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleCommitAuthorEmailPattern) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleCommitMessagePattern) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleCommitterEmailPattern) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleCreation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleDeletion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleNonFastForward) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRulePullRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleRequiredDeployments) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleRequiredLinearHistory) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleRequiredSignatures) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleRequiredStatusChecks) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleTagNamePattern) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RepositoryRuleUpdate) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate");
    }

    /**
     * Get the actual instance, which can be the following:
     * RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate
     *
     * @return The actual instance (RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleBranchNamePattern`. If the actual instance is not `RepositoryRuleBranchNamePattern`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleBranchNamePattern`
     * @throws ClassCastException if the instance is not `RepositoryRuleBranchNamePattern`
     */
    public RepositoryRuleBranchNamePattern getRepositoryRuleBranchNamePattern() throws ClassCastException {
        return (RepositoryRuleBranchNamePattern)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleCommitAuthorEmailPattern`. If the actual instance is not `RepositoryRuleCommitAuthorEmailPattern`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleCommitAuthorEmailPattern`
     * @throws ClassCastException if the instance is not `RepositoryRuleCommitAuthorEmailPattern`
     */
    public RepositoryRuleCommitAuthorEmailPattern getRepositoryRuleCommitAuthorEmailPattern() throws ClassCastException {
        return (RepositoryRuleCommitAuthorEmailPattern)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleCommitMessagePattern`. If the actual instance is not `RepositoryRuleCommitMessagePattern`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleCommitMessagePattern`
     * @throws ClassCastException if the instance is not `RepositoryRuleCommitMessagePattern`
     */
    public RepositoryRuleCommitMessagePattern getRepositoryRuleCommitMessagePattern() throws ClassCastException {
        return (RepositoryRuleCommitMessagePattern)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleCommitterEmailPattern`. If the actual instance is not `RepositoryRuleCommitterEmailPattern`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleCommitterEmailPattern`
     * @throws ClassCastException if the instance is not `RepositoryRuleCommitterEmailPattern`
     */
    public RepositoryRuleCommitterEmailPattern getRepositoryRuleCommitterEmailPattern() throws ClassCastException {
        return (RepositoryRuleCommitterEmailPattern)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleCreation`. If the actual instance is not `RepositoryRuleCreation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleCreation`
     * @throws ClassCastException if the instance is not `RepositoryRuleCreation`
     */
    public RepositoryRuleCreation getRepositoryRuleCreation() throws ClassCastException {
        return (RepositoryRuleCreation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleDeletion`. If the actual instance is not `RepositoryRuleDeletion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleDeletion`
     * @throws ClassCastException if the instance is not `RepositoryRuleDeletion`
     */
    public RepositoryRuleDeletion getRepositoryRuleDeletion() throws ClassCastException {
        return (RepositoryRuleDeletion)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleNonFastForward`. If the actual instance is not `RepositoryRuleNonFastForward`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleNonFastForward`
     * @throws ClassCastException if the instance is not `RepositoryRuleNonFastForward`
     */
    public RepositoryRuleNonFastForward getRepositoryRuleNonFastForward() throws ClassCastException {
        return (RepositoryRuleNonFastForward)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRulePullRequest`. If the actual instance is not `RepositoryRulePullRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRulePullRequest`
     * @throws ClassCastException if the instance is not `RepositoryRulePullRequest`
     */
    public RepositoryRulePullRequest getRepositoryRulePullRequest() throws ClassCastException {
        return (RepositoryRulePullRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleRequiredDeployments`. If the actual instance is not `RepositoryRuleRequiredDeployments`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleRequiredDeployments`
     * @throws ClassCastException if the instance is not `RepositoryRuleRequiredDeployments`
     */
    public RepositoryRuleRequiredDeployments getRepositoryRuleRequiredDeployments() throws ClassCastException {
        return (RepositoryRuleRequiredDeployments)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleRequiredLinearHistory`. If the actual instance is not `RepositoryRuleRequiredLinearHistory`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleRequiredLinearHistory`
     * @throws ClassCastException if the instance is not `RepositoryRuleRequiredLinearHistory`
     */
    public RepositoryRuleRequiredLinearHistory getRepositoryRuleRequiredLinearHistory() throws ClassCastException {
        return (RepositoryRuleRequiredLinearHistory)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleRequiredSignatures`. If the actual instance is not `RepositoryRuleRequiredSignatures`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleRequiredSignatures`
     * @throws ClassCastException if the instance is not `RepositoryRuleRequiredSignatures`
     */
    public RepositoryRuleRequiredSignatures getRepositoryRuleRequiredSignatures() throws ClassCastException {
        return (RepositoryRuleRequiredSignatures)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleRequiredStatusChecks`. If the actual instance is not `RepositoryRuleRequiredStatusChecks`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleRequiredStatusChecks`
     * @throws ClassCastException if the instance is not `RepositoryRuleRequiredStatusChecks`
     */
    public RepositoryRuleRequiredStatusChecks getRepositoryRuleRequiredStatusChecks() throws ClassCastException {
        return (RepositoryRuleRequiredStatusChecks)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleTagNamePattern`. If the actual instance is not `RepositoryRuleTagNamePattern`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleTagNamePattern`
     * @throws ClassCastException if the instance is not `RepositoryRuleTagNamePattern`
     */
    public RepositoryRuleTagNamePattern getRepositoryRuleTagNamePattern() throws ClassCastException {
        return (RepositoryRuleTagNamePattern)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RepositoryRuleUpdate`. If the actual instance is not `RepositoryRuleUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RepositoryRuleUpdate`
     * @throws ClassCastException if the instance is not `RepositoryRuleUpdate`
     */
    public RepositoryRuleUpdate getRepositoryRuleUpdate() throws ClassCastException {
        return (RepositoryRuleUpdate)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RepositoryRule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with RepositoryRuleBranchNamePattern
    try {
      RepositoryRuleBranchNamePattern.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleBranchNamePattern failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleCommitAuthorEmailPattern
    try {
      RepositoryRuleCommitAuthorEmailPattern.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleCommitAuthorEmailPattern failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleCommitMessagePattern
    try {
      RepositoryRuleCommitMessagePattern.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleCommitMessagePattern failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleCommitterEmailPattern
    try {
      RepositoryRuleCommitterEmailPattern.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleCommitterEmailPattern failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleCreation
    try {
      RepositoryRuleCreation.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleCreation failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleDeletion
    try {
      RepositoryRuleDeletion.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleDeletion failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleNonFastForward
    try {
      RepositoryRuleNonFastForward.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleNonFastForward failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRulePullRequest
    try {
      RepositoryRulePullRequest.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRulePullRequest failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleRequiredDeployments
    try {
      RepositoryRuleRequiredDeployments.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredDeployments failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleRequiredLinearHistory
    try {
      RepositoryRuleRequiredLinearHistory.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredLinearHistory failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleRequiredSignatures
    try {
      RepositoryRuleRequiredSignatures.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredSignatures failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleRequiredStatusChecks
    try {
      RepositoryRuleRequiredStatusChecks.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleRequiredStatusChecks failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleTagNamePattern
    try {
      RepositoryRuleTagNamePattern.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleTagNamePattern failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RepositoryRuleUpdate
    try {
      RepositoryRuleUpdate.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RepositoryRuleUpdate failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for RepositoryRule with oneOf schemas: RepositoryRuleBranchNamePattern, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of RepositoryRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RepositoryRule
  * @throws IOException if the JSON string is invalid with respect to RepositoryRule
  */
  public static RepositoryRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryRule.class);
  }

 /**
  * Convert an instance of RepositoryRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

