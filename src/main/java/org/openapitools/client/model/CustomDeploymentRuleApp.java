/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A GitHub App that is providing a custom deployment protection rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-09T20:37:23.111113500+10:00[Australia/Brisbane]")
public class CustomDeploymentRuleApp {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_INTEGRATION_URL = "integration_url";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_URL)
  private String integrationUrl;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public CustomDeploymentRuleApp() {
  }

  public CustomDeploymentRuleApp id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of the deployment protection rule integration.
   * @return id
  **/
  @javax.annotation.Nonnull

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CustomDeploymentRuleApp slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * The slugified name of the deployment protection rule integration.
   * @return slug
  **/
  @javax.annotation.Nonnull

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }


  public CustomDeploymentRuleApp integrationUrl(String integrationUrl) {
    
    this.integrationUrl = integrationUrl;
    return this;
  }

   /**
   * The URL for the endpoint to get details about the app.
   * @return integrationUrl
  **/
  @javax.annotation.Nonnull

  public String getIntegrationUrl() {
    return integrationUrl;
  }


  public void setIntegrationUrl(String integrationUrl) {
    this.integrationUrl = integrationUrl;
  }


  public CustomDeploymentRuleApp nodeId(String nodeId) {
    
    this.nodeId = nodeId;
    return this;
  }

   /**
   * The node ID for the deployment protection rule integration.
   * @return nodeId
  **/
  @javax.annotation.Nonnull

  public String getNodeId() {
    return nodeId;
  }


  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDeploymentRuleApp customDeploymentRuleApp = (CustomDeploymentRuleApp) o;
    return Objects.equals(this.id, customDeploymentRuleApp.id) &&
        Objects.equals(this.slug, customDeploymentRuleApp.slug) &&
        Objects.equals(this.integrationUrl, customDeploymentRuleApp.integrationUrl) &&
        Objects.equals(this.nodeId, customDeploymentRuleApp.nodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, slug, integrationUrl, nodeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDeploymentRuleApp {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    integrationUrl: ").append(toIndentedString(integrationUrl)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("slug");
    openapiFields.add("integration_url");
    openapiFields.add("node_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("integration_url");
    openapiRequiredFields.add("node_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomDeploymentRuleApp
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomDeploymentRuleApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDeploymentRuleApp is not found in the empty JSON string", CustomDeploymentRuleApp.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomDeploymentRuleApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDeploymentRuleApp` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomDeploymentRuleApp.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("integration_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration_url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDeploymentRuleApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDeploymentRuleApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDeploymentRuleApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDeploymentRuleApp.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDeploymentRuleApp>() {
           @Override
           public void write(JsonWriter out, CustomDeploymentRuleApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDeploymentRuleApp read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomDeploymentRuleApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomDeploymentRuleApp
  * @throws IOException if the JSON string is invalid with respect to CustomDeploymentRuleApp
  */
  public static CustomDeploymentRuleApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDeploymentRuleApp.class);
  }

 /**
  * Convert an instance of CustomDeploymentRuleApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

